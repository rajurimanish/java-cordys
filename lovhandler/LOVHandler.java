/*
 * This class has been generated by the Code Generator
 * 
 * Change History:
 * 
 * 	No			Date			Description										Changed By
 * =====		==========		===========										==========
 * SR001		26/06/2018		Added new operation in GetLovData Service		   VSR
 * 
 */

package com.opentext.lovhandler;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.exception.BsfRuntimeException;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.util.logger.CordysLogger;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;



public class LOVHandler extends LOVHandlerBase {
	private static Document document = null;
	private static CordysLogger logger = CordysLogger.getCordysLogger(LOVHandler.class);

	public LOVHandler() {
		this((BusObjectConfig) null);
	}

	public LOVHandler(BusObjectConfig config) {
		super(config);
	}

	@SuppressWarnings("unchecked")
	public static BusObjectIterator<com.cordys.cpc.bsf.busobject.BusObject> GetLOVData(String BRANCH, String LOB, String BUSINESS_FUNCTION, String PRODUCT, String OPERATION, String FORM_NAME, String FORM_FIELD_NAME, String FIELD_TYPE, int ADVANCE_CONFIG_XML, com.cordys.cpc.bsf.query.Cursor cursor) throws Exception {
		String viewName = "";
		String returnQueryText = "";
		String outputParameters=null;
		String harcodedWhereConditions = null;
		String harcodedOrderbyClause = null;
		String harcodedGroupbyClause = null;
		String hardcodedAttribute1= null;
		String colName=null;
		String colValue=null;
		int inpXML=-1;
		String condition=null;
		String ignoreCase ="N";

		LOV_MAPPING lovMapping = LOV_MAPPING.getLOVMappingBySearch(BRANCH, LOB, BUSINESS_FUNCTION, PRODUCT, OPERATION, FORM_NAME, FORM_FIELD_NAME, FIELD_TYPE);

		if (lovMapping != null) {
			viewName = lovMapping.getBACKEND_VIEW_NAME();
			outputParameters = lovMapping.getOUTPUT_COLUMNS();
			harcodedWhereConditions = lovMapping.getCONDITION();
			harcodedOrderbyClause = lovMapping.getORDER_CLAUSE();
			harcodedGroupbyClause = lovMapping.getGROUP_CLAUSE();
			hardcodedAttribute1 =lovMapping.getATTRIBUTE1();

		}
		if(hardcodedAttribute1!= null && hardcodedAttribute1.equalsIgnoreCase("Y") && !hardcodedAttribute1.isEmpty()) {
			returnQueryText=viewName;
		}
		else if(viewName != null && outputParameters != null && !outputParameters.isEmpty() && !viewName.isEmpty()){
			returnQueryText = "SELECT " + outputParameters + " FROM " + viewName;
		}

		if (returnQueryText != null && !returnQueryText.isEmpty()) {

			try {
				String op = null;
				String opValue = null;
				if (ADVANCE_CONFIG_XML > 0) {
					Map<String, String> opMap = new HashMap<String, String>();
					opMap.put("EQ", "=");
					opMap.put("NTEQ", "!=");
					opMap.put("GT", ">");
					opMap.put("GTEQ", ">=");
					opMap.put("LT", "<");
					opMap.put("LTEQ", "<=");
					opMap.put("LIKE", " LIKE ");
					opMap.put("STARTSWITH", " LIKE ");
					opMap.put("GROUP", " GROUP BY ");
					opMap.put("ORDER", " ORDER BY ");
					opMap.put("A", " ASC ");
					opMap.put("D", " DESC ");
					opMap.put("IS", " IS ");
					opMap.put("ISNOT", " IS NOT ");
					opMap.put("OPNPRNTHS", " ( ");
					opMap.put("CLSPRNTHS", " ) ");
					opMap.put("IN", " IN ");
					opMap.put("NOT IN", " NOT IN ");
					opMap.put("NOT LIKE", " NOT LIKE "); // SR001 - Added NOT LIKE Operation for LOV Data Service
					opMap.put("PARAM", " PARAM "); //Sreekanth -- added to use for SubQueries - Dynamic conditions.
					inpXML = ADVANCE_CONFIG_XML;

					if (inpXML > 0) {
						int xmlColumnsFilter[] = XPath.getMatchingNodes(".//*[local-name()='FILTER']", null, inpXML);
						int xmlColumnsSort[] = XPath.getMatchingNodes(".//*[local-name()='SORTFIELD']", null, inpXML);
						int xmlColumnsReplace[] = XPath.getMatchingNodes(".//*[local-name()='REPLACEFIELD']", null, inpXML);
						List<Integer> whereClauseConditions = new ArrayList<Integer>();
						List<Integer> groupClauseConditions = new ArrayList<Integer>();
						List<Integer> orderClauseConditions = new ArrayList<Integer>();
						String operator = "";
						for (int i = 0; i < xmlColumnsFilter.length; i++) {
							operator = Node.getAttribute(xmlColumnsFilter[i], "OPERATION");
							if (operator != null && "GROUP".equals(operator))
								groupClauseConditions.add(xmlColumnsFilter[i]);
							else
								whereClauseConditions.add(xmlColumnsFilter[i]);
						}
						for (int i = 0; i < xmlColumnsSort.length; i++) {
							operator = Node.getAttribute(xmlColumnsSort[i], "OPERATION");

							if (operator != null && "ORDER".equals(operator))
								orderClauseConditions.add(xmlColumnsSort[i]);
						}
						if (whereClauseConditions != null && !whereClauseConditions.isEmpty()) {							
							returnQueryText += " WHERE ";							

							Iterator<Integer> iter = whereClauseConditions.listIterator();
							Integer xml = 0;
							while (iter.hasNext()) {
								xml = iter.next();
								colValue = Node.getAttribute(xml, "FIELD_VALUE");
								colName = Node.getAttribute(xml, "FIELD_NAME");
								op = Node.getAttribute(xml, "OPERATION");
								condition = Node.getAttribute(xml, "CONDITION");
								ignoreCase = Node.getAttribute(xml, "IGNORECASE");
								opValue=opMap.get(op);
								boolean isConditionAdded = false;
								if(colValue!=null && !(" ( ".equals(opValue) || " ) ".equals(opValue))){
									if("LIKE".equals(op)){
										if ("Y".equals(ignoreCase)) {
											colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE_ESCAPE").getCONFIG_VALUE(), false);
											colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_CHAR").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE").getCONFIG_VALUE(), true);
											returnQueryText+= "UPPER("+ colName+ ")" + opValue + "UPPER(" + "'%"+ colValue +"%'" + ")"+ " escape " +LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE_QUERY").getCONFIG_VALUE();
										} else {
											colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE_ESCAPE").getCONFIG_VALUE(), false);
											colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_CHAR").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE").getCONFIG_VALUE(), true);
											returnQueryText+= colName+ opValue+ "'%"+ colValue +"%' " + "escape " +LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE_QUERY").getCONFIG_VALUE();
										}
									} else if ("STARTSWITH".equals(op)) {
										colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE_ESCAPE").getCONFIG_VALUE(), false);
										colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_CHAR").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE").getCONFIG_VALUE(), true);
										returnQueryText+= colName+ opValue+ "'"+ colValue +"%' " + "escape " +LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE_QUERY").getCONFIG_VALUE();
									} else if (" IS ".equals(opValue)) {
										returnQueryText += colName + opValue + colValue + " ";
									} else if (" IS NOT ".equals(opValue)) {
										returnQueryText += colName + opValue + colValue + " ";
									} else if (" IN ".equals(opValue)) {
										returnQueryText += colName+ opValue+ "(" +colValue+ ")" +" ";
									} else if (" NOT IN ".equals(opValue)) {
										returnQueryText += colName+ opValue+ "(" +colValue+ ")" +" ";
									} else if (" NOT LIKE ".equals(opValue)) { // SR001 - Added NOT LIKE Operation Conditions
										if ("Y".equals(ignoreCase)) {
											colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE_ESCAPE").getCONFIG_VALUE(), false);
											colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_CHAR").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE").getCONFIG_VALUE(), true);
											returnQueryText+= "UPPER("+ colName+ ")" + opValue + "UPPER(" + "'%"+ colValue +"%'" + ")"+ " escape " +LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE_QUERY").getCONFIG_VALUE();
										} else {
											colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE_ESCAPE").getCONFIG_VALUE(), false);
											colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_CHAR").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE").getCONFIG_VALUE(), true);
											returnQueryText+= colName+ opValue+ "'%"+ colValue +"%' " + "escape " +LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_WILD_CARD_ESCAPE_QUERY").getCONFIG_VALUE();
										}
									} else {
										colValue = replaceSpeicalChar(colValue, LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE").getCONFIG_VALUE().split(","), LOV_GLOABAL_CONFIG.getLovGloabalConfigObject("LOV_MAPPING_SINGLE_QUOTE_ESCAPE").getCONFIG_VALUE(), false);
										returnQueryText += colName + opValue + "'" + colValue + "' ";
									}
									isConditionAdded  = true;
								}
								if (" ( ".equals(opValue))
									returnQueryText += opValue;
								if (" ) ".equals(opValue)) {
									returnQueryText += opValue;
									isConditionAdded = true;
								}
								if (iter.hasNext() && isConditionAdded) {
									returnQueryText += " " + condition + " ";
								}
							}
						}
						if (harcodedWhereConditions != null && !harcodedWhereConditions.isEmpty()) {
							if (returnQueryText != null && returnQueryText.contains("WHERE")) {
								returnQueryText += " AND " + harcodedWhereConditions;
							} else {
								returnQueryText += " WHERE " + harcodedWhereConditions;
							}
						}

						if (groupClauseConditions != null && !groupClauseConditions.isEmpty()) {

							if (groupClauseConditions.size() == 1) {
								colValue = Node.getAttribute(groupClauseConditions.get(0), "FIELD_VALUE");
								colName = Node.getAttribute(groupClauseConditions.get(0), "FIELD_NAME");
								op = Node.getAttribute(groupClauseConditions.get(0), "OPERATION");
								opValue = opMap.get(op);
								returnQueryText += opValue + colName;
							} else {
								throw new Exception("Invalid Group By Clause :: FORM_NAME :: "+FORM_NAME+" :: FORM_FIELD_NAME :: "+FORM_FIELD_NAME);
							}
						}

						if (harcodedGroupbyClause != null && !harcodedGroupbyClause.isEmpty()) {
							if (returnQueryText != null && returnQueryText.contains(opMap.get("GROUP"))) {
								returnQueryText += "," + harcodedGroupbyClause;
							} else {
								returnQueryText += opMap.get("GROUP") + harcodedGroupbyClause;
							}

						}

						if (orderClauseConditions != null && !orderClauseConditions.isEmpty()) {
							if (orderClauseConditions.size() == 1) {
								colName = Node.getAttribute(orderClauseConditions.get(0), "FIELD_NAME");
								op = Node.getAttribute(orderClauseConditions.get(0), "ORDER");
								returnQueryText += " " + opMap.get("ORDER") + " " + colName;
							} else {
								throw new Exception("Invalid Order By Clause :: FORM_NAME :: "+FORM_NAME+" :: FORM_FIELD_NAME :: "+FORM_FIELD_NAME);
							}
						}

						if (harcodedOrderbyClause != null && !harcodedOrderbyClause.isEmpty()) {
							if (returnQueryText != null && returnQueryText.contains(opMap.get("ORDER"))) {
								returnQueryText += " , " + harcodedOrderbyClause;
							} else {
								returnQueryText += " " + opMap.get("ORDER") + " " + harcodedOrderbyClause;
							}
						}

						//Sreekanth --start
						for (int i = 0; i < xmlColumnsReplace.length; i++) {
							operator = Node.getAttribute(xmlColumnsReplace[i], "OPERATION");

							if (operator != null && "PARAM".equals(operator))
							{
								colValue = Node.getAttribute(xmlColumnsReplace[i], "FIELD_VALUE");
								colName = Node.getAttribute(xmlColumnsReplace[i], "FIELD_NAME");
								returnQueryText = returnQueryText.replaceAll(":" + colName, colValue);
							}
						}//End

						if (inpXML > 0)
							Node.delete(inpXML);
					}
				}
			} catch (Exception e) {
				throw new BsfRuntimeException(e);
				//throw new Exception("Exception while forming query :: FORM_NAME :: "+FORM_NAME+" :: FORM_FIELD_NAME :: "+FORM_FIELD_NAME);
			}
			document = BSF.getXMLDocument();
			int cursorNode = 0;
			try {
				try {
					cursorNode = document.parseString(cursor.getXmlString());
				} catch (Exception e) {
					throw new BsfRuntimeException(e);
					//throw new Exception("Unable to parse xml :: FORM_NAME :: "+FORM_NAME+" :: FORM_FIELD_NAME :: "+FORM_FIELD_NAME);
				}
				String[] paramNamesSer = { "queryText" };
				Object[] paramValuesSer = { returnQueryText };
				SOAPRequestObject soapreqSer = new SOAPRequestObject("http://schemas.opentext.com/lovconfig/v1.0", "ExecuteLOVQuery", paramNamesSer, paramValuesSer);
				if (cursorNode > 0)
					soapreqSer.addParameterAsXml(cursorNode);
				soapreqSer.setReceiver(lovMapping.getSG_DN());
				BusObjectIterator<com.cordys.cpc.bsf.busobject.BusObject> result = soapreqSer.getObjects();
				//logger.error(" FINAL PREPARED QUERY :: "+returnQueryText);
				// int xLOVSerResponse = soapreqSer.execute();
				return result;
			} catch (Exception e) {
				throw new BsfRuntimeException(e);
			}
		} else {
			throw new BsfRuntimeException(
					new Exception("Invalid Parameters given in the request. No Corresponding VIEW found.  :: FORM_NAME :: "+FORM_NAME+" :: FORM_FIELD_NAME :: "+FORM_FIELD_NAME));
		}
	}


	private static String replaceSpeicalChar(String origianlString, String sourceString[], String specialChar, boolean appendSoourceString) {
		String result = null;
		for (String s : sourceString) {
			if (appendSoourceString)
				result = origianlString.replaceAll(s, specialChar + s);
			else
				result = origianlString.replaceAll(s, specialChar);
		}
		return result;
	}

	public static BusObjectIterator<com.opentext.lovhandler.LOVHandler> getLOVHandlerObjects(
			com.cordys.cpc.bsf.query.Cursor cursor) {
		// TODO implement body
		return null;
	}

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
