
/*
  This class has been generated by the Code Generator
*/

package com.hct.utils;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.cordys.cpc.bsf.busobject.BSF;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import javax.net.ssl.HttpsURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.UUID;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;

import com.eibus.util.logger.CordysLogger;
import com.eibus.util.system.EIBProperties;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;
import java.io.*;
import org.w3c.dom.*;
import com.opentext.otds.client.OtdsRichClient;
import com.eibus.soap.SOAPTransaction;
import java.util.Base64;
import org.apache.commons.codec.binary.Base64InputStream;
import java.nio.*;
import java.nio.file.*;
import java.io.*;
import java.util.stream.*;
import org.apache.commons.io.IOUtils;


public class Utils extends UtilsBase {
    private static CordysLogger logger = CordysLogger.getCordysLogger(Utils.class);
    public Utils() {
        this((BusObjectConfig) null);
    }

    public Utils(BusObjectConfig config) {
        super(config);
    }

    
    public static String GetSamlArtByicket(String ticket, String target) throws Exception {

        target = "http://drdsdvwecmsapw1.ad.hct.ac.ae:81/home/HCTOrg/com.eibus.web.soap.Gateway.wcp?organization=o=HCTOrg,cn=cordys,cn=defaultInst,o=ad.hct.ac.ae";
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        String utcTime = sdf.format(new Date());

        String data = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\">" +
            "<SOAP:Header>" +
            "<OTAuthentication  xmlns=\"urn:api.bpm.opentext.com\">" +
            "<AuthenticationToken>" + ticket + "</AuthenticationToken>" +
            "</OTAuthentication>" +
            "</SOAP:Header>" +
            "<SOAP:Body>" +
            "<samlp:Request xmlns:samlp=\"urn:oasis:names:tc:SAML:1.0:protocol\" IssueInstant=\"" + utcTime + "\" MajorVersion=\"1\" MinorVersion=\"1\" RequestID=\"CRD-" + UUID.randomUUID().toString() + "\">" +
            "<samlp:AuthenticationQuery>" +
            "<saml:Subject xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\">" +
            "<saml:NameIdentifier Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"></saml:NameIdentifier>" +
            "</saml:Subject>" +
            "</samlp:AuthenticationQuery>" +
            "</samlp:Request>" + "</SOAP:Body>" + "</SOAP:Envelope>";



        URL url = new URL(target);

        HttpURLConnection conn = (HttpURLConnection) url.openConnection();

        conn.setConnectTimeout(5000);

        conn.setRequestProperty("Content-Type", "application/xml; charset=UTF-8");

        conn.setDoOutput(true);

        conn.setDoInput(true);

        conn.setRequestMethod("POST");



        OutputStream os = conn.getOutputStream();

        os.write(data.getBytes("UTF-8"));

        os.close();



        // read the response

        InputStream in = new BufferedInputStream(conn.getInputStream());

        String result = org.apache.commons.io.IOUtils.toString( in , "UTF-8");



        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();

        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();

        Document doc = dBuilder.parse(new ByteArrayInputStream(result.getBytes("utf-8")));



        //in.close();

        conn.disconnect();



        return doc.getElementsByTagName("samlp:AssertionArtifact").item(0).getTextContent();
    }
   public static String GetObjectIdForReport(String reportId, String requestedOutputFile, String paramValues) throws Exception
    {
       String urlParameters  = "reportId="+reportId+"&requestedOutputFile=PDF&paramValues=%7B%20%22ParameterValue%22%20%3A%20%5B%20%20%7B%22Name%22%20%3A%20%22AcademicId%22%2C%22Value%22%3A%201%7D%2C%20%7B%22Name%22%20%3A%20%22EducationTechnolologyId%22%2C%22Value%22%3A%201%7D%2C%20%7B%22Name%22%20%3A%20%22EmployeeId%22%2C%22Value%22%3A%201%7D%2C%20%7B%22Name%22%20%3A%20%22FacilitiesId%22%2C%22Value%22%3A%201%7D%2C%20%7B%22Name%22%20%3A%20%22FinanaceId%22%2C%22Value%22%3A%201%7D%2C%20%7B%22Name%22%20%3A%20%22HealthAndSafetyId%22%2C%22Value%22%3A%201%7D%2C%20%7B%22Name%22%20%3A%20%22HumanResourceId%22%2C%22Value%22%3A%201%7D%2C%20%7B%22Name%22%20%3A%20%22LineManagerId%22%2C%22Value%22%3A%201%7D%2C%20%20%7B%22Name%22%20%3A%20%22ClearanceId%22%2C%22Value%22%3A%201%7D%20%20%5D%7D&saveOutputFile=false&replaceExisting=false";

byte[] postData = urlParameters.getBytes( "UTF-8" );
  String target = "https://drdsdvwecmsihb1.ad.hct.ac.ae:8001/api/v2/jobs/execute";
    URL url = new URL(target);

        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();

        conn.setConnectTimeout(5000);

        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
 conn.setRequestProperty("AuthToken", "/yf7tVGnzmWFcFUqMu5K/gOXvAzVEWkJ2F8K5tNMfy6HBGOHzTnEfDSmbMSOE62lmvxPInXqHdy64tqDcaKAW6W2wmDSbSOtEdtWledo6r5Fb4yX4UcvytnMKjpxszcusv0p5xZNK1OXL7l0eN839AbTQjfkN0KFDnptW6j1sGnCZotWIH/lnhbV8LOerySAS9+N4vC1pb26oW8jk2YocsH3AIKZuOPHTUn4MC8rwRs=");


        conn.setDoOutput(true);

        conn.setDoInput(true);

        conn.setRequestMethod("POST");



        try(DataOutputStream wr = new DataOutputStream(conn.getOutputStream())) {
   wr.write( postData );

 BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line+"\n");
                }
                br.close();
                return sb.toString();
    }
}
 public static String GetReportContent(String AuthId, String targetURL, String ObjectId)throws Exception
    {
   


       URL url = new URL(targetURL);

        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();

        conn.setConnectTimeout(5000);


 conn.setRequestProperty("AuthToken",AuthId);
        InputStream is = conn.getInputStream();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int read = 0;
        while ((read = is.read(buffer, 0, buffer.length)) != -1) {
            baos.write(buffer, 0, read);
        }
        baos.flush();

        return Base64.getEncoder().encodeToString(baos.toByteArray());
    
    
}

    public static BusObjectIterator < com.hct.utils.Utils > getUtilsObjects(com.cordys.cpc.bsf.query.Cursor cursor) {
        return null;
    }

    public void onInsert() {}

    public void onUpdate() {}

    public void onDelete() {}

}