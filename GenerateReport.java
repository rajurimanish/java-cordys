/*
  This class has been generated by the Code Generator
 */

package com.msig.masterdata;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

import org.apache.commons.lang.WordUtils;
import org.apache.poi.hssf.usermodel.HSSFBorderFormatting;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Font;

import com.cordys.cpc.bsf.busobject.BusObject;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.eibus.util.logger.CordysLogger;
import com.eibus.xml.nom.Document;

@SuppressWarnings("deprecation")
public class GenerateReport extends GenerateReportBase {
	
	private static final CordysLogger logger = CordysLogger.getCordysLogger(GenerateReport.class);
	
	public GenerateReport() {
		this((BusObjectConfig) null);
	}

	public GenerateReport(BusObjectConfig config) {
		super(config);
	}

	@Override
	public void onDelete() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onInsert() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onUpdate() {
		// TODO Auto-generated method stub

	}

	/*
	 * Generate HSSFWorkbook object from the Iterator object
	 */
	public static HSSFWorkbook getWorkbookObject(BusObjectIterator<?> objects,
			String sheetName, String[] headerInfo, String[] columnInfo,
			String[] dataTypes) throws Exception {

		if (!objects.hasMoreElements())
			throw new Exception("No Records found");

		if (headerInfo.length != columnInfo.length)
			throw new Exception("Header and Column lengths not matched");

		HSSFWorkbook workbook = new HSSFWorkbook();

		HSSFSheet sheet = workbook.createSheet(sheetName);

		HSSFRow row = null;
		HSSFCell cell = null;

		SimpleDateFormat dateFormat;

		int colIndex = 0;
		int rowIndex = 0;
		int colLength = columnInfo.length;

		Font headerFont = workbook.createFont();
		headerFont.setFontName("Arial");
		headerFont.setFontHeightInPoints((short) 12);
		headerFont.setBoldweight(Font.BOLDWEIGHT_BOLD);

		HSSFCellStyle headerStyle = workbook.createCellStyle();
		headerStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		headerStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		headerStyle.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
		headerStyle.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
		headerStyle.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
		headerStyle.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
		headerStyle.setFillForegroundColor(HSSFColor.WHITE.index);
		headerStyle.setFont(headerFont);

		HSSFCellStyle numStyle = workbook.createCellStyle();
		numStyle.setAlignment(HSSFCellStyle.ALIGN_RIGHT);
		numStyle.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
		numStyle.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
		numStyle.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
		numStyle.setBorderTop(HSSFBorderFormatting.BORDER_THIN);

		HSSFCellStyle colStyle = workbook.createCellStyle();
		colStyle.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
		colStyle.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
		colStyle.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
		colStyle.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
		// colStyle.setDataFormat(workbook.createDataFormat().getFormat("dd-MMM-yy HH:mm"));

		row = sheet.createRow(rowIndex++);

		CellRangeAddress cra = new org.apache.poi.hssf.util.CellRangeAddress(0,
				0, 0, columnInfo.length - 1);
		sheet.addMergedRegion(cra);

		row = sheet.createRow(rowIndex++);

		while (colIndex < colLength) {
			cell = row.createCell(colIndex);
			cell.setCellValue(headerInfo[colIndex++]);
			cell.setCellStyle(headerStyle);
		}

		TimeZone tz = TimeZone.getDefault();
		long offset = tz.getOffset(new Date().getTime());
		SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.S");
		sd.setTimeZone(tz);

		while (objects.hasMoreElements()) {
			BusObject reportObject = (BusObject) objects.nextElement();

			row = sheet.createRow(rowIndex++);

			colIndex = 0;
			while (colIndex < colLength) {
				cell = row.createCell(colIndex);
				if (dataTypes[colIndex].equals("DATE")) {
					String dateValue = reportObject
							.getStringProperty(columnInfo[colIndex]);
					if (dateValue != null) {
						if (dateValue.indexOf("000000") != -1) {
							dateValue = dateValue.substring(0,
									dateValue.indexOf("000000"));
						}
						Date d = sd.parse(dateValue);
						d.setTime(d.getTime() + offset);
						dateFormat = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
						cell.setCellValue(dateFormat.format(d));
					} else {
						cell.setCellValue("");
					}
					// cell.setCellValue(reportObject.getStringProperty(columnInfo[colIndex++]));
				} else {
					String cellValue = reportObject
							.getStringProperty(columnInfo[colIndex]);
					cell.setCellValue((cellValue == null) ? "" : cellValue);
				}
				colIndex++;
				cell.setCellStyle(colStyle);
			}
		}
		return workbook;
	}

	public static HSSFWorkbook getWorkbookObjectNew(BusObjectIterator<?> objects, String sheetName, String[] headerInfo, String[] columnInfo, String[] dataTypes, int timezoneOffset) {

		HSSFWorkbook workbook = new HSSFWorkbook();

		try {
			if (!objects.hasMoreElements())
				throw new Exception("No Records found");

			if (headerInfo.length != columnInfo.length)
				throw new Exception("Header and Column lengths not matched");

			HSSFSheet sheet = workbook.createSheet(sheetName);

			HSSFRow row = null;
			HSSFCell cell = null;

			int colIndex = 0;
			int rowIndex = 0;
			int colLength = columnInfo.length;

			Font headerFont = workbook.createFont();
			headerFont.setFontName("Arial");
			headerFont.setFontHeightInPoints((short) 12);
			headerFont.setBoldweight(Font.BOLDWEIGHT_BOLD);

			HSSFCellStyle headerStyle = workbook.createCellStyle();
			headerStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
			headerStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
			headerStyle.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
			headerStyle.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
			headerStyle.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
			headerStyle.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
			headerStyle.setFillForegroundColor(HSSFColor.WHITE.index);
			headerStyle.setFont(headerFont);

			HSSFCellStyle numStyle = workbook.createCellStyle();
			numStyle.setAlignment(HSSFCellStyle.ALIGN_RIGHT);
			numStyle.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
			numStyle.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
			numStyle.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
			numStyle.setBorderTop(HSSFBorderFormatting.BORDER_THIN);

			HSSFCellStyle colStyle = workbook.createCellStyle();
			colStyle.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
			colStyle.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
			colStyle.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
			colStyle.setBorderTop(HSSFBorderFormatting.BORDER_THIN);

			row = sheet.createRow(rowIndex++);

			while (colIndex < colLength) {
				cell = row.createCell(colIndex);
				cell.setCellValue(headerInfo[colIndex++]);
				cell.setCellStyle(headerStyle);
			}
			Date d = new Date();
			SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.S");
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
			String dateValue = null;
			String cellValue = null;
			long offset = (timezoneOffset * 60 * 1000);
			BusObject reportObject = null;
			while (objects.hasMoreElements()) {
				reportObject = (BusObject) objects.nextElement();
				row = sheet.createRow(rowIndex++);
				colIndex = 0;
				while (colIndex < colLength) {
					cell = row.createCell(colIndex);
					if (dataTypes[colIndex].equals("DATE")) {
						dateValue = reportObject.getStringProperty(columnInfo[colIndex]);
						if (dateValue != null) {
							if (dateValue.indexOf("000000") != -1) {
								dateValue = dateValue.substring(0, dateValue.indexOf("000000"));
							}
							d = sd.parse(dateValue);
							d.setTime(d.getTime() - offset);
							cell.setCellValue(dateFormat.format(d));
						} else {
							cell.setCellValue("");
						}
					} else {
						cellValue = reportObject.getStringProperty(columnInfo[colIndex]);
						cell.setCellValue((cellValue == null) ? "" : cellValue);
					}
					colIndex++;
					cell.setCellStyle(colStyle);
				}
			}
		} catch (Exception e) {
			logger.error("Exception in getWorkbookObjectNew" + e.getMessage());
		}
		return workbook;
	}
	
	public static HSSFWorkbook getWorkbookObjectNewWithFormat(
			BusObjectIterator<?> objects, String sheetName,
			String[] headerInfo, String[] columnInfo, String[] dataTypes, String[] formats,
			int timezoneOffset) throws Exception {

		if (!objects.hasMoreElements())
			throw new Exception("No Records found");

		if (headerInfo.length != columnInfo.length)
			throw new Exception("Header and Column lengths not matched");

		HSSFWorkbook workbook = new HSSFWorkbook();

		HSSFSheet sheet = workbook.createSheet(sheetName);

		HSSFRow row = null;
		HSSFCell cell = null;

		SimpleDateFormat dateFormat;

		int colIndex = 0;
		int rowIndex = 0;
		int colLength = columnInfo.length;

		Font headerFont = workbook.createFont();
		headerFont.setFontName("Arial");
		headerFont.setFontHeightInPoints((short) 12);
		headerFont.setBoldweight(Font.BOLDWEIGHT_BOLD);

		HSSFCellStyle headerStyle = workbook.createCellStyle();
		headerStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		headerStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		headerStyle.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
		headerStyle.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
		headerStyle.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
		headerStyle.setBorderTop(HSSFBorderFormatting.BORDER_THIN);
		headerStyle.setFillForegroundColor(HSSFColor.WHITE.index);
		headerStyle.setFont(headerFont);

		HSSFCellStyle numStyle = workbook.createCellStyle();
		numStyle.setAlignment(HSSFCellStyle.ALIGN_RIGHT);
		numStyle.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
		numStyle.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
		numStyle.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
		numStyle.setBorderTop(HSSFBorderFormatting.BORDER_THIN);

		HSSFCellStyle colStyle = workbook.createCellStyle();
		colStyle.setBorderBottom(HSSFBorderFormatting.BORDER_THIN);
		colStyle.setBorderLeft(HSSFBorderFormatting.BORDER_THIN);
		colStyle.setBorderRight(HSSFBorderFormatting.BORDER_THIN);
		colStyle.setBorderTop(HSSFBorderFormatting.BORDER_THIN);

		row = sheet.createRow(rowIndex++);

		while (colIndex < colLength) {
			cell = row.createCell(colIndex);
			cell.setCellValue(headerInfo[colIndex++]);
			cell.setCellStyle(headerStyle);
		}

		SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.S");

		long offset = (timezoneOffset * 60 * 1000);

		while (objects.hasMoreElements()) {
			BusObject reportObject = (BusObject) objects.nextElement();

			row = sheet.createRow(rowIndex++);

			colIndex = 0;
			while (colIndex < colLength) {
				cell = row.createCell(colIndex);
				String cellValue = reportObject.getStringProperty(columnInfo[colIndex]);
				String datetype = dataTypes[colIndex];
				String format = formats[colIndex];
				
				if (datetype.equals("DATE")) {
					
					if (cellValue != null) {
						if (cellValue.indexOf("000000") != -1) {
							cellValue = cellValue.substring(0, cellValue.indexOf("000000"));
						}
						Date d = sd.parse(cellValue);
						d.setTime(d.getTime() - offset);
						
						String dateFormatStr = formats.length > 0 && format != null ? format : "dd-MM-yyyy HH:mm:ss";
						
						dateFormat = new SimpleDateFormat(dateFormatStr);
						cell.setCellValue(dateFormat.format(d));
					} else {
						cell.setCellValue("");
					}

				} else if (datetype.equals("STRING") && format != null) {
					
					if (format.equals("UPPERCASE")) {
						cell.setCellValue((cellValue == null) ? "" : cellValue.toUpperCase());
					} else if (format.equals("CAPITALIZE")) {
						cell.setCellValue((cellValue == null) ? "" : WordUtils.capitalize(cellValue));
					}
					
				} else if(datetype.equals("NUMBER")) {
					if (cellValue != null && !cellValue.equals("")) {
						double value = Double.valueOf(cellValue);
						String formattedValue = String.format("%,.2f", value);
						
						cell.setCellValue(formattedValue);
					} else {
						cell.setCellValue("");
					}
				} else {
					cell.setCellValue((cellValue == null) ? "" : cellValue);
				}
				
				colIndex++;
				cell.setCellStyle(colStyle);
			}
		}
		return workbook;
	}
	public static int writeExcelFile(HSSFWorkbook workbook, String filePath,
			String fileName) {
		FileOutputStream output = null;
		Date d = new Date();
		String currDate = (d.getYear() + 1900) + "" + (d.getMonth() + 1) + ""
				+ d.getDate() + "" + d.getHours() + "" + d.getMinutes() + ""
				+ d.getSeconds();
		String newFilePath = filePath + fileName + "Report_" + currDate
				+ ".xls";
		try {
			output = new FileOutputStream(newFilePath);
			workbook.write(output);

			// Generate download report base64 string
			String base64FileContent = new MasterDataUtil()
					.getBase64EncodedStringByFile(newFilePath);

			Document responseDoc = new Document();
			int root = responseDoc.createElement("REPORT");
			int filePathNode = responseDoc.createElement("FILE_PATH", root);
			responseDoc.createText(newFilePath, filePathNode);
			int base64Node = responseDoc.createElement("BASE64_CONTENT", root);
			responseDoc.createText(base64FileContent, base64Node);

			return root;

		} catch (IOException ie) {
			ie.printStackTrace();
		} finally {
			try {
				output.close();
				File oFile = new File(newFilePath);
				if(!(fileName == "BMS Usage " || fileName == "HRC "))
				oFile.delete();
				System.out.println("Successfully created the Excel File.....");
			} catch (IOException ie) {
				ie.printStackTrace();
			}
		}
		return -1;
	}
	public static int writeExcelFileIntoSharedLocation(HSSFWorkbook workbook, String filePath, String fileName, String virtualDir, boolean isTimestampRequired) {
		FileOutputStream output = null;
		Date d = new Date();
		String currDate = (d.getYear() + 1900) + "" + (d.getMonth() + 1) + ""
				+ d.getDate() + "" + d.getHours() + "" + d.getMinutes() + ""
				+ d.getSeconds();
		String newFilePath = "";
		String virtualDirPath = virtualDir;
		
		if (isTimestampRequired) {
			newFilePath = filePath + fileName + "Report_" + currDate + ".xls";
			virtualDirPath += "/" + fileName + "Report_" + currDate + ".xls";
		} else {
			newFilePath = filePath + fileName + "Report.xls";
			virtualDirPath += "/" + fileName + "Report.xls";
		}
		
		try {
			output = new FileOutputStream(newFilePath);
			workbook.write(output);

			Document responseDoc = new Document();
			int root = responseDoc.createElement("REPORT");
			int filePathNode = responseDoc.createElement("FILE_PATH", root);
			responseDoc.createText(virtualDirPath, filePathNode);

			return root;

		} catch (IOException ie) {
			ie.printStackTrace();
		} finally {
			try {
				output.close();
			} catch (IOException ie) {
				ie.printStackTrace();
			}
		}
		return -1;
	}
}