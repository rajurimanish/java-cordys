/*
  This class has been generated by the Code Generator
*/

package com.msig.bmsintegrationapp;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Properties;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.json.JSONArray;
import org.json.JSONObject;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.eibus.util.logger.CordysLogger;

public class BMS_5382 extends BMS_5382Base
{
	private static CordysLogger logger = CordysLogger.getCordysLogger(BMS_5382.class);
	private static String propsFilePath="../msigapp.properties"; 
	private static int rowCellsCount = 16;
	
	//public static final int SALUTATION=0;
	public static final int INSURED_PERSON_NAME=0;
	public static final int OCCUPATION=1;
	public static final int OCCUPATION_DESCRIPTION=2;
	public static final int OCCUPATION_CLASS=3;
	public static final int IC_OR_PASSPORT=4;
	public static final int DOB=5;
	public static final int GENDER=6;
	public static final int MARITAL_STATUS=7;
	public static final int NATIONALITY=8;
	public static final int HOMECITY=9;
	public static final int RESIDENCE=10;
	public static final int AREA_CODE=11;
	public static final int PLAN_CODE=12;
	public static final int MATR_DATE=13;
	//public static final int SUM_INSURED=14;
	//public static final int FLAT_PREMIUM=15;

	public static final String CODE_FORMAT="%02d";
	
    public BMS_5382()
    {
        this((BusObjectConfig)null);
    }

    public BMS_5382(BusObjectConfig config)
    {
        super(config);
    }

    public static BusObjectIterator<com.msig.bmsintegrationapp.BMS_5382> getBms5382Objects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public static String getUploadConfig_5382() throws Exception
    {
    	InputStream fis = null;
    	String uploadFilePath="";
    	Properties props = new Properties();
    	try {
    		fis = new FileInputStream(propsFilePath);
    		props.load(fis);
    		//uploadFilePath = (String) props.get("S5382_EXCEL_UPLOAD_FILEPATH");
    		uploadFilePath = (String) props.get("NGA_EXCEL_UPLOAD_PATH");
    	}
    	catch(IOException e){
    		logger.error("Cannot read file input stream: "+e.getMessage());
    		throw new Exception(e.getMessage());
    	}
		finally {
			try {
				if(fis != null){
					fis.close();
				}
			} catch(IOException e){
				logger.error("Cannot close File input stream connection: "+e.getMessage());
				throw new Exception(e.getMessage());
			}
		}
    	
    	return uploadFilePath;
    }

    public static String uploadInsuredDetails_5382(String filePath, String riskType, String param1) throws Exception
    {
    	logger.debug("executing uploadInsuredDetails_5382");
    	JSONObject excelData = new JSONObject(); 
		Workbook workbook = null;
		FileInputStream fis = null;
		
		HashMap<String,String> uniqueUserList = new HashMap<String,String>();
		
		try {
			fis = new FileInputStream(filePath);
			workbook = WorkbookFactory.create(fis);
		}  catch (Exception e) {
			throw new Exception("Cannot reead file - "+filePath + "  :: "+e.getMessage());			
		}  	
		
		Sheet versionSheet = workbook.getSheet("Version");
		try {
			if(!versionSheet.getRow(5).getCell(1).getStringCellValue().equalsIgnoreCase("tdZUWBidmE")){
				throw new Exception("Invalid file is uploaded. Please use the correct template");
			}
		} catch (Exception e) {
			throw new Exception("Invalid file is uploaded. Please use the correct template :: "+e.getMessage());
		}
				
		Sheet dataSheet = workbook.getSheet("Data");
		int rowCounter=1;
		JSONArray excelRowDataArr = new JSONArray();
		
		for (Iterator<Row> rowsItr = dataSheet.rowIterator(); rowsItr.hasNext();) {
			Row row = rowsItr.next();
			if (rowCounter > 2) {
				
				if(!checkIfRowIsEmpty(row)){
	
				    //String salutation			= getCellData(row.getCell(SALUTATION));
					String salutation			= "";
					String insuredName			= getCellData(row.getCell(INSURED_PERSON_NAME));
					String occupationCode		= getCellData(row.getCell(OCCUPATION));
					String occupatoinDesc		= getCellData(row.getCell(OCCUPATION_DESCRIPTION));
					String occupationClass		= getCellData(row.getCell(OCCUPATION_CLASS));
					String idProofNo			= getCellData(row.getCell(IC_OR_PASSPORT));
					String dob					= getCellData(row.getCell(DOB));
					String gender				= getCellData(row.getCell(GENDER));
					String maritalStatus		= getCellData(row.getCell(MARITAL_STATUS));
					String nationality			= getCellData(row.getCell(NATIONALITY));
					String homeCity				= getCellData(row.getCell(HOMECITY));
					String residence			= getCellData(row.getCell(RESIDENCE));
					String areaCode				= getCellData(row.getCell(AREA_CODE));
					String planCode				= getCellData(row.getCell(PLAN_CODE));
					String maternityDate 		= getCellData(row.getCell(MATR_DATE));
					//String sumInsured			= getCellData(row.getCell(SUM_INSURED));
					//String flatPremium		= getCellData(row.getCell(FLAT_PREMIUM));

					areaCode 		= formatCodes(areaCode, CODE_FORMAT);
					occupationClass = formatCodes(occupationClass, CODE_FORMAT);
					
					JSONObject rowData = new JSONObject();
					
					rowData.put("rowNumber", rowCounter);
					rowData.put("salutation", salutation);					
					rowData.put("insuredName", insuredName);
					rowData.put("occupationCode", occupationCode);
					rowData.put("occupatoinDesc", occupatoinDesc);
					rowData.put("occupationClass", occupationClass);
					rowData.put("idProofNo", idProofNo);
					rowData.put("dob", dob);
					rowData.put("gender", gender);
					rowData.put("maritalStatus", maritalStatus);
					rowData.put("nationality", nationality);
					rowData.put("homeCity", homeCity);
					rowData.put("residence", residence);
					rowData.put("areaCode", areaCode);
					rowData.put("planCode", planCode);
					rowData.put("maternityDate", maternityDate);
					//rowData.put("sumInsured", sumInsured);
					//rowData.put("flatPremium", flatPremium);
					rowData.put("expandBenfitIndicator", false);
					
					String uniqueUserStr = insuredName+idProofNo;
					if(uniqueUserList.containsKey(uniqueUserStr)){
						rowData.put("isValidationFailed", "true");
						rowData.put("validationMessage", "<p>Duplicate Entry</p>");
					} else {
						rowData.put("isValidationFailed", "false");
						rowData.put("validationMessage", "");
						uniqueUserList.put(uniqueUserStr, uniqueUserStr);
					}
					
					excelRowDataArr.put(rowData);
				}
			}
			rowCounter ++;
		}
		
		excelData.put("excelData", excelRowDataArr);
		
		logger.debug("Excel data uploaded: "+excelData.toString());
		
        return excelData.toString();
    }

    public static String getCellData(Cell cell){
		try {
			String data="";
			if (cell == null) {
	            return "";
	        }
			
			switch (cell.getCellType()) {
				case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
					String cellData = cell.getRichStringCellValue().toString();
					if(!"".equals(cellData)) {
						data = cellData.trim();
					}
					break;
					
				case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
					data = Integer.toString((int) cell.getNumericCellValue());
					break;
					
				default:
					data = "";
					break;
			}
			
			return data;			
		} 
		catch(Exception e){						
			return "";
		}
	}
	
	public static boolean checkIfRowIsEmpty(Row row) {
	    if (row == null) {
	        return true;
	    }
	    if (row.getLastCellNum() <= 0) {
	        return true;
	    }
	    boolean isEmptyRow = true;
	    try {
	    	/**********************************************
	    	 * Check if all mandatory columns are empty
	    	 **********************************************/
		    for (int i=0; i<rowCellsCount; i++) {
		        Cell cell = row.getCell(i);
		        if (cell != null)
			        if(cell.getCellType() != Cell.CELL_TYPE_BLANK) {
			        	isEmptyRow = false;
			        }
		    }
		} catch (Exception e) {
			isEmptyRow=true;
		}
	    
	    return isEmptyRow;
	}
	
	public static String formatCodes(String code, String format){	
		int numToFormat;
		//try to read as number
		try {
			numToFormat = Integer.parseInt(code);
			code = String.format(format, numToFormat);
		} catch (Exception e) {
			//cl.appendLogMessage("Error while converting occupation class into integer, returning occ class as is");
		}
		return code;
	}
	
    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }

}
