/*
  This class has been generated by the Code Generator
*/

package com.ot.ewm.user;

import com.cordys.coe.util.xml.nom.XPathHelper;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;

import java.io.UnsupportedEncodingException;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.exception.BsfException;
import com.cordys.cpc.bsf.soap.SOAPRequestObject; 
import com.eibus.connector.nom.Connector;
import com.eibus.soap.SOAPTransaction;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.system.EIBProperties;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.eibus.xml.nom.XMLException;
import com.eibus.xml.xpath.XPath;

public class EWM_USER_INFO extends EWM_USER_INFOBase
{
    public static CordysLogger logger = CordysLogger.getCordysLogger(EWM_USER_INFO.class);
    static Document doc = BSF.getXMLDocument();
	
	public EWM_USER_INFO()
    {
        this((BusObjectConfig)null);
    }

    public EWM_USER_INFO(BusObjectConfig config)
    {
        super(config);
    }

   

    public static BusObjectIterator<com.ot.ewm.user.EWM_USER_INFO> GetUsersBasedOnAccessType(String ACCESS_TYPE)
    {
        String queryText = "select * from EWM_USER_INFO";
        if(!ACCESS_TYPE.equalsIgnoreCase(""))
        {
        	queryText += " where ACCESS_TYPE  ='"+ACCESS_TYPE+"'";

        }
      
        QueryObject query = new QueryObject(queryText);        
        query.setResultClass(EWM_USER_INFO.class);
        return query.getObjects();
    }
	
	 public static BusObjectIterator<com.ot.ewm.user.EWM_USER_INFO> GetEwmUserInfoObjectsForOrganization(String Organization)
    {
        String queryText = "select * from \"EWM_USER_INFO\" where \"ORGANIZATION\" = :ORGANIZATION";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("ORGANIZATION", "EWM_USER_INFO.ORGANIZATION", QueryObject.PARAM_STRING, Organization);//NOPMD
        query.setResultClass(EWM_USER_INFO.class);
        return query.getObjects();
    }

    public static String ManageEWMUsers(int userDetails)
    {
         // TODO implement body
		   String type=null;
	    	int oldNode=XPath.getFirstMatch(".//tuple/old", null, userDetails);
			int newNode=XPath.getFirstMatch(".//tuple/new", null, userDetails);
			int roleNode=XPath.getFirstMatch(".//Roles", null, userDetails);
			if(oldNode>0&&newNode>0)
			{
				updateUser(oldNode,newNode,roleNode);
				return "The user with User ID: "+Node.getData(XPath.getFirstMatch(".//USER_ID",null, newNode))+" has been updated";
			}
			else if(oldNode<=0&&newNode>0)
			{
				createUser(userDetails);
				return "The user with User ID: "+Node.getData(XPath.getFirstMatch(".//USER_ID",null, newNode))+" has been created";
			}
			else if(oldNode>0&&newNode<=0)
			{
				deleteUsers(userDetails);
				return "The selected users has been deleted";
			}
			return "SUCCESS";
    }

    public static BusObjectIterator<com.ot.ewm.user.EWM_USER_INFO> SearchUser(String USER_ID)
    {
       String queryText = "select * from EWM_USER_INFO";
        if(!USER_ID.equalsIgnoreCase(""))
        {
        	queryText += " where lower(USER_ID) like  '%"+USER_ID.toLowerCase()+"%'";

        }
      
        QueryObject query = new QueryObject(queryText);        
        query.setResultClass(EWM_USER_INFO.class);
        return query.getObjects();
    }

	
	
    public static void updateUser(int oldNode,int newNode,int roleNode) 
    {
    	try{
		createCordysUser(newNode,roleNode);
		}
		catch(Exception e)
		{
		logger.error("Exception while creating cordys user. Error Message: "+e.getLocalizedMessage());
		}
    	//update details in DB
    	String userId=Node.getData(XPath.getFirstMatch(".//USER_ID",null, newNode));
    	EWM_USER_INFO userInfo=EWM_USER_INFO.getEwmUserInfoObject(userId);
    	try
    	{
    	persistInDB(userInfo, newNode,"update");
    	}
    	catch(Exception e)
    	{
    		logger.error("Error occured while updating user details in DB. Message: "+e.getLocalizedMessage());
    		//throw new Exception("Error occured while updating user details in DB. Message: "+e.getLocalizedMessage());
    	}
    }
    public static void createUser(int userDetails)
    {
    	
    	int newNode=XPath.getFirstMatch(".//tuple/new", null, userDetails);
    	int roleNode=XPath.getFirstMatch(".//Roles", null, userDetails);
    	try
    	{
    	createCordysUser(newNode,roleNode);
    	}
    	catch(Exception e)
    	{
    		logger.error("Exception while creating cordys user. Error Message: "+e.getLocalizedMessage());
    		//throw new Exception("Exception while creating cordys user. Error Message: "+e.getLocalizedMessage());
    	}
    	//Insert details in DB
    	EWM_USER_INFO userInfo=new EWM_USER_INFO();
    	try
    	{
    	persistInDB(userInfo, newNode,"new");
    	}
    	catch(Exception e)
    	{
    		logger.error("Error occured while creating user details in DB. Message: "+e.getLocalizedMessage());
    		String userId=XPathHelper.getStringValue(newNode, ".//USER_ID");
    		String orgDN="cn="+userId+",cn=organizational users,"+BSF.getOrganization();
    		deleteLDAPUsers(orgDN);
    		String authDN="cn="+userId+",cn=authenticated users,"+EIBProperties.getProperty(EIBProperties.LDAP_ROOT);
    		deleteLDAPUsers(authDN);
    		//throw new Exception("Error occured while updating user details in DB. Message: "+e.getLocalizedMessage());
    		//delete cordys user
    		
    	}
      
    }
    public static void persistInDB(EWM_USER_INFO userInfo,int newNode,String type)
    {
    	userInfo.setUSER_ID(XPathHelper.getStringValue(newNode, ".//USER_ID"));
    	userInfo.setACCESS_TYPE(XPathHelper.getStringValue(newNode, ".//ACCESS_TYPE"));
    	userInfo.setBRANCH_ID(XPathHelper.getStringValue(newNode, ".//BRANCH_ID"));
    	userInfo.setFIRST_NAME(XPathHelper.getStringValue(newNode, ".//FIRST_NAME"));
		userInfo.setLAST_NAME(XPathHelper.getStringValue(newNode, ".//LAST_NAME"));
		userInfo.setEMAIL_ID(XPathHelper.getStringValue(newNode, ".//EMAIL_ID"));
        userInfo.setCN(XPathHelper.getStringValue(newNode, ".//CN"));
        userInfo.setVALID_FROM(XPathHelper.getDateValue(newNode, ".//VALID_FROM"));
        userInfo.setVALID_TO(XPathHelper.getDateValue(newNode, ".//VALID_TO"));
        userInfo.setPARTICIPANT_ID(XPathHelper.getDoubleValue(newNode, ".//PARTICIPANT_ID"));
        userInfo.setLAST_ACCESS_DATE(XPathHelper.getDateValue(newNode, ".//LAST_ACCESS_DATE"));
        userInfo.setCREATED_DATE(XPathHelper.getDateValue(newNode, ".//CREATED_DATE"));
        userInfo.setORGANIZATION(XPathHelper.getStringValue(newNode, ".//ORGANIZATION"));
        if(type=="update")
        userInfo.update();
        else
        userInfo.insert();
    }
    public static void deleteUsers(int userDetails)
    {
    	int[] userNodes=XPath.getMatchingNodes(".//tuple/old", null, userDetails);
    	for(int i=0;i<userNodes.length;i++)
    	{
    		//delete org user
    		String userId=XPathHelper.getStringValue(userNodes[i], ".//USER_ID");
    		String orgDN="cn="+userId+",cn=organizational users,"+BSF.getOrganization();
    		String authDN="cn="+userId+",cn=authenticated users,"+EIBProperties.getProperty(EIBProperties.LDAP_ROOT);
    		//delete from DB
    		EWM_USER_INFO infoObject=EWM_USER_INFO.getEwmUserInfoObject(userId);
    		if(infoObject!=null)
    		infoObject.delete();
    		try
    		{
    		deleteLDAPUsers(orgDN);	
    		deleteLDAPUsers(authDN);
    		}
    		catch(Exception e)
    		{
    			infoObject.makeTransient();
    			//throw new Exception("Error while deleting users from cordys.Message: "+e.getLocalizedMessage());
    		}
    	}
    }
    public static void deleteLDAPUsers(String dn)
    {
    	SOAPRequestObject getOrgUser=new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "GetLDAPObject",new String[]{"dn"},new String[]{dn});
    	int response=getOrgUser.execute();
    	int tupleNode=XPath.getFirstMatch(".//tuple",null,response);
    	if(tupleNode>0)
    	{
    		//delete 
    		SOAPRequestObject deleteUser=new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "Update",new String[]{},new String[]{});
    		deleteUser.addParameterAsXml(tupleNode);
    		response=deleteUser.execute();
    	}
    }
    public static void createCordysUser(int newNode,int roleNode) throws XMLException, UnsupportedEncodingException
    {
    	//check for authenticated user and create if not exists
    	String organization=XPathHelper.getStringValue(newNode, ".//ORGANIZATION");
    	String userId=Node.getData(XPath.getFirstMatch(".//USER_ID",null, newNode));
    	String email=Node.getData(XPath.getFirstMatch(".//EMAIL_ID",null, newNode));
    	String authDN="cn="+userId+",cn=authenticated users,"+EIBProperties.getProperty(EIBProperties.LDAP_ROOT);
    	SOAPRequestObject getAuthenticatedUser=new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "GetLDAPObject",new String[]{"dn"},new String[]{authDN});
    	int response=getAuthenticatedUser.execute();
    	int entryNode=XPath.getFirstMatch(".//tuple/old/entry",null,response);
    	if(entryNode<=0)
    	{
    		//create authenticated user
    		int node=doc.parseString("<tuple><new><entry xmlns='http://schemas.cordys.com/1.0/ldap' dn='"+authDN+"'><objectclass><string>top</string><string>busauthenticationuser</string></objectclass><cn><string>"+userId+"</string></cn><description><string>"+userId+"</string></description><osidentity><string>"+userId+"</string></osidentity><mail><string>"+email+"</string></mail><defaultcontext><string>"+BSF.getOrganization()+"</string></defaultcontext><authenticationtype><string>domain</string></authenticationtype></entry></new></tuple>");
    		SOAPRequestObject createAuthUser=new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "Update",new String[]{},new String[]{});
       	 	createAuthUser.addParameterAsXml(node);
    		response=createAuthUser.execute();
    		
    	}
    	String orgDN="cn="+userId+",cn=organizational users,"+BSF.getOrganization();
    	SOAPRequestObject getOrgUser=new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "GetLDAPObject",new String[]{"dn"},new String[]{orgDN});
    	 response=getOrgUser.execute();
    	entryNode=Node.clone(XPath.getFirstMatch(".//tuple/old/entry",null,response),true);
    	//create org user
		int node=doc.parseString("<tuple><new><entry xmlns='http://schemas.cordys.com/1.0/ldap' dn='"+orgDN+"'><authenticationuser><string>"+authDN+"</string></authenticationuser><description><string>"+userId+"</string></description><role></role><cn><string>"+userId+"</string></cn><objectclass><string>top</string><string>busorganizationaluser</string><string>busorganizationalobject</string></objectclass></entry></new></tuple>");
		// add roles.
		int[] roleNodes=XPath.getMatchingNodes(".//ROLE", null, roleNode);
		int roleParent=XPath.getFirstMatch("//tuple/new/entry/role", null, node);
		String[] orgName=BSF.getOrganization().split(",")[0].split("=");
		Node.createTextElement("string","cn=everyoneIn" + orgName[1] + ",cn=organizational roles," + BSF.getOrganization(),roleParent);
		if(roleNodes!=null)
		{
			for(int i=0;i<roleNodes.length;i++)
			{
				Node.createTextElement("string",Node.getData(roleNodes[i]),roleParent);
				
			}
		}
		if(entryNode>0)
		{
			// add tuple old
		
			int oldNode=Node.clone(XPath.getFirstMatch(".//tuple/old", null, response),true);
			Node.appendToChildren(oldNode, XPath.getFirstMatch("//tuple", null, node));
			//get already exisitng roles and insert to new.
			//get Roles from DB
			entryNode=Node.clone(XPath.getFirstMatch(".//tuple/old/entry",null,response),true);
			BusObjectIterator<EWM_ROLE_APPLICATION> roleAppObjs=EWM_ROLE_APPLICATION.getEwmRoleApplicationObjectsByOrganization(organization);
			int[] existingRoles=XPathHelper.selectNodes(entryNode, ".//role/string", null);
			for(int i=0;i<existingRoles.length;i++)
			{
				
				String roleName=Node.getData(existingRoles[i]);
				if(!isRoleExists(roleAppObjs,roleName))
				{
					//add to new Node
					Node.createTextElement("string",roleName,roleParent);
				}
				
				
			}
			
			
		}
		SOAPRequestObject createOrgUser=new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "Update",new String[]{},new String[]{});
		createOrgUser.addParameterAsXml(node);
		response=createOrgUser.execute();
		//clean all nodes
		if(response>0)Node.delete(response);
		if(entryNode>0)Node.delete(entryNode);
		if(node>0)Node.delete(node);
		if(roleNodes.length>0)roleNodes=null;
		
	
		
    	}
    	
    public static boolean isRoleExists(BusObjectIterator<EWM_ROLE_APPLICATION> roleAppObjs,String roleName)
    {
    	BusObjectIterator<EWM_ROLE_APPLICATION> it=roleAppObjs.elements();
    	while(it.hasMoreElements())
    		{
    			EWM_ROLE_APPLICATION obj=it.nextElement();
    			if(roleName.equals(obj.getROLE()))
    					{
    				return true;
    					}
    		}
    		return false;
    }
	
	public static int LDAPUpdate_Wrapper(int oldTuple, int newTuple) throws XMLException, UnsupportedEncodingException

	{ 

		int req_node = 0;

		//String key = "com.schneider.scc.proxyUser";

		String Request="<Update xmlns=\"http://schemas.cordys.com/1.0/ldap\"><tuple></tuple></Update>";

		try

		{
			// can be taken up from XML Store

			String userDN = "cn=SYSTEM,cn=organizational users," + BSF.getOrganization();

			req_node = BSF.getXMLDocument().parseString(Request);

			int inputtuple = Node.getFirstElement(newTuple);

			// int inode = Node.clone(req_node, true);

			//check whether same DN exists or not

			if(newTuple != 0 && !"".equals(newTuple))

			{  
				String curDN = Node.getAttribute(XPath.getFirstMatch(".//*[local-name()='entry']", null, newTuple), "dn");
				String[] paramName = {"dn"};
				String[] paramValue = {curDN};
				SOAPRequestObject soapObj = new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "GetLDAPObject",paramName,paramValue);
				soapObj.setUser(userDN);
				int respObj = soapObj.execute();
				int oldNode = XPath.getFirstMatch(".//*[local-name()='old']", null, respObj);
				if(oldNode != 0)

				{
					Node.appendToChildren(oldNode, XPath.getFirstMatch(".//*[local-name()='tuple']", null, req_node));
				}

				// append the new tuple created



				int newTupleNode = BSF.getXMLDocument().parseString("<new></new>");

				Node.appendToChildren(newTupleNode, XPath.getFirstMatch(".//tuple']", null, req_node));

				Node.appendToChildren(inputtuple, XPath.getFirstMatch(".//tuple/new']", null, req_node));

			}

			else if(oldTuple != 0 && !"".equals(oldTuple))



			{

				int oldinputtuple = Node.getFirstElement(oldTuple);

				int oldTupleNode = BSF.getXMLDocument().parseString("<old></old>");

				Node.appendToChildren(oldTupleNode, XPath.getFirstMatch(".//tuple']", null, req_node));

				Node.appendToChildren(oldinputtuple, XPath.getFirstMatch(".//tuple/old']", null, req_node));

			}


			return executeSOAPRequest(req_node, userDN);



		}  

		catch (Exception e)


		{
			logger.error("Error Occured in Updating LDAP Service", e);

			if(req_node != 0)
				Node.delete(req_node);

			throw new RuntimeException("Error occured while Processing the request.Please contact Administrator! Error Details are : " + e.getMessage() + "");

		}


	} 
	


	
	private static int executeSOAPRequest(int SOAPRequest, String userDN) {


		int mnode = Node.clone(SOAPRequest, true);

		String methodName = Node.getName(mnode);


		String METHODSET_NAMESPACE = Node.getAttribute(mnode, "xmlns");

	//	String METHODSET_NAMESPACE = "http://schemas.cordys.com/1.0/ldap";

		int paramnode = Node.getFirstChild(mnode);


		SOAPRequestObject soapRequestObject = new SOAPRequestObject(



				METHODSET_NAMESPACE, methodName, null, null);


		soapRequestObject.setUser(userDN);

		for (int j = 0; j < Node.getNumChildren(mnode); j++) {


			soapRequestObject.addParameterAsXml(paramnode);


			int tempnode = Node.getNextElement(paramnode);



			paramnode = tempnode;


		}


		try {
			int resp = soapRequestObject.execute();

			Node.removeAttribute(resp, "xmlns");

			Node.removeAttribute(resp, "xmlns:SOAP");


			Node.delete(mnode);

			return resp;


		} catch (Exception e) {


			logger.error("Error Occurred in Executing SOAP request :", e);



			Node.delete(mnode);


			throw new RuntimeException("Error occured while Processing the request.Please contact Administrator! Error Details are : "+ e.getMessage() + "");


		} 




	}
	
	 public static BusObjectIterator<com.ot.ewm.user.EWM_USER_INFO> searchDelegates(String USER_ID, String FIRST_NAME, com.cordys.cpc.bsf.query.Cursor cursor) throws BsfException
    {
       String queryText = "SELECT USER_ID ,FIRST_NAME  FROM EWM_USER_INFO";    	
		QueryObject query = formatQuery(queryText,USER_ID,FIRST_NAME);
        query.setCursor(cursor);
        return query.getObjects();
    }
	  
	  private static QueryObject formatQuery(String queryText,String USER_ID,String FIRST_NAME) throws BsfException 
		{
			String condition = "";
			
	        if(!("".equals(USER_ID)))
			{
				condition = addCondition("USER_ID", "USER_ID", condition, "like");    		  
			}
			
			if(!("".equals(FIRST_NAME)))
			{
				condition = addCondition("FIRST_NAME", "FIRST_NAME", condition, "like");    		  
			}
			
			queryText += condition;
			QueryObject query = new QueryObject(queryText);    	    	    

			try
			{    	    	    
				query.addParameter("USER_ID", "EWM_USER_INFO.USER_ID", QueryObject.PARAM_STRING, USER_ID);
				query.addParameter("FIRST_NAME", "EWM_USER_INFO.FIRST_NAME", QueryObject.PARAM_STRING,  FIRST_NAME);
			    query.setResultClass(EWM_USER_INFO.class);
			}
			catch(Exception e)
			{
				throw new BsfException("Query execution failed " + e.getMessage());
			}
			return query;
		}
		
		
		 public static String addCondition(String parametervalue, String parameterName, String condition, String symbol)
	    {
			if(condition.contains("WHERE"))
			{
				condition += " AND " + parameterName + " " + symbol + " :" + parametervalue;
			}
			else
			{
				condition += " WHERE  " + parameterName + " " + symbol + " :" + parametervalue;
			}
			
			return condition;	
	    }

}
