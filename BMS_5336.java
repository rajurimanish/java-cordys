/*
  This class has been generated by the Code Generator
*/
/************************************************************************
 *  Version History
 *  Date			Author			Changes
 *  ==============================================================
 *  09-Aug-2017		Rajesh			consolidation of properties file location. 
 *  
 *  29-MAY-2017         VKR			        MYS-2019-0993  Redmine Fixes. 
 *  ==============================================================
 ************************************************************************/

package com.msig.bmsintegrationapp;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import javax.json.Json;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.json.JSONObject;
import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.util.logger.CordysLogger;
import com.eibus.xml.nom.Node;
import com.eibus.xml.nom.XMLException;
import com.eibus.xml.xpath.XPath;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;


public class BMS_5336 extends BMS_5336Base
{
	public static String CONTITEM="";
	public static CordysLogger logger = CordysLogger.getCordysLogger(BMS_5336.class);
	public static String propsFilePath="../msigapp.properties";
    public BMS_5336()
    {
        this((BusObjectConfig)null);
    }

    public BMS_5336(BusObjectConfig config)
    {
        super(config);
    }
    public static BusObjectIterator<com.msig.bmsintegrationapp.BMS_5336> getBms5336Objects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }
    public static String GetUploadConfig() throws IOException {
		Properties props = new Properties();
		InputStream is = new FileInputStream(propsFilePath);
		props.load(is);
		String uploadPath = (String) props.get("NGA_EXCEL_UPLOAD_PATH");
    	return uploadPath;
    }
    public static final int INSURED_PERSON_NAME=0;
    public static final int OCCUPATION=1;
    public static final int OCCUPATION_DESCRIPTION=2;
    public static final int OCCUPATION_CLASS=3;
    public static final int PASSPORT=4;
    public static final int NRIC=5;
    public static final int DOB=6;
    public static final int GENDER=7;
    public static final int MARITAL_STATUS=8;
    public static final int PLAN_CODE=9;
    public static final int SUM_INSURED=10;
    public static final int FLAT_PREMIUM=11;
    public static final int COVERAGE_DEAD_BENEFIT=12;
    public static final int COVERAGE_DEAD_RATE=13;
    public static final int COVERAGE_PDIS_BENEFIT=15;
    public static final int COVERAGE_PDIS_RATE=16;
    public static final int COVERAGE_PTDB_BENEFIT=18;
    public static final int COVERAGE_PTDB_RATE=19;
    public static final int COVERAGE_TTDW_BENEFIT=21;
    public static final int COVERAGE_TTDW_RATE=22;
    public static final int COVERAGE_TPDW_BENEFIT=24;
    public static final int COVERAGE_TPDW_RATE=25;
    public static final int COVERAGE_MEDC_BENEFIT=27;
    public static final int COVERAGE_MEDC_RATE=28;
    public static final int COVERAGE_FUNL_BENEFIT=30;
    public static final int COVERAGE_FUNL_RATE=31;
    public static final int COVERAGE_BURL_BENEFIT=33;
    public static final int COVERAGE_BURL_RATE=34;
    public static final int COVERAGE_AHIB_BENEFIT=36;
    public static final int COVERAGE_AHIB_RATE=37;
    public static final int COVERAGE_AMFE_BENEFIT=39;
    public static final int COVERAGE_AMFE_RATE=40;
    public static final int COVERAGE_BERA_BENEFIT=42;
    public static final int COVERAGE_BERA_RATE=43;
    public static final int COVERAGE_CALL_BENEFIT=45;
    public static final int COVERAGE_CALL_RATE=46;
    public static final int COVERAGE_DAHI_BENEFIT=48;
    public static final int COVERAGE_DAHI_RATE=49;
    public static final int COVERAGE_FCRE_BENEFIT=51;
    public static final int COVERAGE_FCRE_RATE=52;
    public static final int COVERAGE_ORTH_BENEFIT=54;
    public static final int COVERAGE_ORTH_RATE=55;
    public static final int COVERAGE_PLIA_BENEFIT=57;
    public static final int COVERAGE_PLIA_RATE=58;
	    
    public static String UploadInsuredDetails_5336(String FilePath, String TemplateName, String riskType, String productType, String ItemFromDate, String ItemToDate, String InsuredDataFromUI, String Extra1, String Extra2, String Extra3, String Extra4) throws Exception
    {
    	/******************************************************
    	 * Local Variables
    	 ******************************************************/
		String rowMessage="";
		HashMap<String, Object> planData = new HashMap<String, Object>();
		HashMap<String, Object> occData = new HashMap<String,Object>();
		HashMap<String, String> checkUniqueRows = new HashMap<String,String>();
		CoverageItems coverageList = new CoverageItems();
		ValidationResult vr = new ValidationResult();
		CustomLogger cl = new CustomLogger();
		ArrayList<String> logMessage = new ArrayList<String>();
		boolean anyPlanFailed=false;
		boolean anyOccupationFailed=false;
		String planErrorMessages="";
		String OccupationErrorMessages="";
		
		//boolean isValidationFailed=false;
		//String validationMessage="";
//		ArrayList<CoverageItem> coverageList = new ArrayList<>();
//		int coverageDeadLockThreshold=0;
//		String CONTITEM="";
		
    	cl.appendLogMessage("entered into UploadInsuredDetails_5336 method with parameters : FilePath:" + FilePath+",riskType: "+riskType+", productType:"+ productType + ", Extra1(Risk Name):"+Extra1);
    	cl.appendLogMessage("Insured data from UI: InsuredDataFromUI: "+InsuredDataFromUI);
    	/******************************************************
    	 * Read Insured Data from UI
    	 ******************************************************/
                //VK007 Added Try and Finally Blocks
                int insuredNode = 0;
                try{
		insuredNode = BSF.getXMLDocument().parseString(InsuredDataFromUI);
		cl.appendLogMessage("Insured data from UI: " + Node.writeToString(insuredNode, true));
		
			int insuredFromUI[] = XPath.getMatchingNodes(".//insured", null, insuredNode);
			cl.appendLogMessage("Number of insured records from UI : " + insuredFromUI.length );
			for(int node:insuredFromUI){
				cl.appendLogMessage("inside for loop of insured data from UI" + Node.writeToString(node, true));
				checkUniqueRows.put(Node.getDataWithDefault(node, "").toLowerCase() , Node.getDataWithDefault(node, "").toLowerCase());
                                node = 0;
			}
			cl.appendLogMessage("looping insured data from UI completed.");
		} finally {
                     if(Node.isValidNode(insuredNode ))
			Node.delete(insuredNode );
		insuredNode  = 0;

                }
    	cl.appendLogMessage("current checkUniqueRows items:checkUniqueRows.size()::: " + checkUniqueRows.size());
    	/******************************************************
    	 * Read Excel File
    	 ******************************************************/
		Workbook workbook = null;
    	try{
    		FileInputStream inp = new FileInputStream(FilePath);
    		workbook = WorkbookFactory.create(inp);
    	
    	}catch(Exception e){
			throw new Exception("Invalid file is uploaded. Please use the correct template");
    	}
		//get version sheet to validate wheather right file is uploaded.
		Sheet versionSheet = workbook.getSheet("Version");
		try {
			if(!versionSheet.getRow(5).getCell(1).getStringCellValue().equalsIgnoreCase("tdZUWBidmE")){
				throw new Exception("Invalid file is uploaded. Please use the correct template");
			}
		} catch (Exception e) {
			throw new Exception("Invalid file is uploaded. Please use the correct template");
		}
		// Get the Data Sheet.
		Sheet dataSheet = workbook.getSheet("Data");
		int rowCounter=1;
    	
    	/******************************************************
    	 * Consolidate Occupation Codes & Plans
    	 ******************************************************/
		cl.appendLogMessage("About to enter into loop for consolidating Occupation codes and plan codes : OccupationErrorMessages: "+OccupationErrorMessages + ", anyOccupationFailed:" + anyOccupationFailed);
		for (Iterator<Row> rowsIT = dataSheet.rowIterator(); rowsIT.hasNext();) {
			Row row = rowsIT.next();
			if (rowCounter > 2) {
				if(!checkIfRowIsEmpty(row)){
					CoverageDeadlockThreshold th = new CoverageDeadlockThreshold();
					th.setDeadlockThreshold(1);
					String occCode ="";
					occCode = getCellData(vr,row.getCell(OCCUPATION));//.substring(0, 4);
					cl.appendLogMessage("@@@About to read occupation information for the current row....");
					if(!occCode.equalsIgnoreCase("")){
						if(!occData.containsKey(occCode)){
					    	occData.put(occCode, null);
						}
					}
					cl.appendLogMessage("@@@Cccupation information reading completed for the current row....");
					String planCode ="";
					cl.appendLogMessage("@@@About to read Plan information from excel for the current row....");
					try{
						planCode = getCellData(vr,row.getCell(PLAN_CODE));						
					}catch(Exception e){}
					
					cl.appendLogMessage("@@@Plan code from excel is : " + planCode);
					if(!planCode.equalsIgnoreCase("")){
						try {
							if(!planData.containsKey(planCode)){
						    	coverageList = new CoverageItems();
						    	getPlanDataForPlanCode(cl,coverageList, riskType+planCode, ItemToDate,th);
								planData.put(planCode, coverageList);
							}
						} catch (Exception e) {
							if(!anyPlanFailed){
								anyPlanFailed=true;
								planErrorMessages=planErrorMessages+"Risk Code : " + riskType + ", Plan Code: " + planCode+". ";
							}
						}
					}
				}else{
					break;
				}
			}
			rowCounter++;
		}
		cl.appendLogMessage("Occupation Consolidation and Plan Consolidation Completed: occData : "+occData);
		cl.appendLogMessage("Retrieving occupation descriptions");
		
		occData = getOccupationDescription(cl,occData);
		cl.appendLogMessage("Retrieving occupation descriptions completed." + occData);
    	/******************************************************
    	 * Consolidate Plans
    	 ******************************************************/    	
		/*rowCounter=1;
		cl.appendLogMessage("About to enter into loop for consolidating plan codes : planErrorMessages: "+planErrorMessages + ", anyPlanFailed:" + anyPlanFailed);
		for (Iterator<Row> rowsIT = dataSheet.rowIterator(); rowsIT.hasNext();) {
			Row row = rowsIT.next();
			coverageDeadLockThreshold=0;
			if (rowCounter > 2) {
				if(!checkIfRowIsEmpty(row)){

				}else{
					break;
				}
			}
			rowCounter++;
		}
		if(anyPlanFailed){
			throw new BsfRuntimeException("Plan Retrieval failed for " + planErrorMessages);
		}
		cl.appendLogMessage("Plan Consolidation Completed: planData : "+planData);*/
		
    	/******************************************************
    	 * Prepare JSON Objects and Object Builders class objects
    	 ******************************************************/    	
		JsonObjectBuilder TopBuilder =  Json.createObjectBuilder();
		JsonObject topJsonObject = null;
		JsonObjectBuilder s5336Builder =  Json.createObjectBuilder();
		JsonArrayBuilder s5336ObjectArrayBuilder =  Json.createArrayBuilder();
		JsonObjectBuilder s5336ObjectDetailsBuilder =  Json.createObjectBuilder();
		
		HashSet<String> allowedGender = getAllowedGender();
		HashSet<String> allowedMaritalStatus = getAllowedMaritalStatus();
		
    	/******************************************************
    	 * Consolidate Data
    	 ******************************************************/    	
		
		rowCounter=1;
		cl.appendLogMessage("About to enter into Data Consolidation loop : rowCounter:" +rowCounter);
		for (Iterator<Row> rowsIT = dataSheet.rowIterator(); rowsIT.hasNext();) {
			Row row = rowsIT.next();
			rowMessage="";
			if(rowCounter>2){
				cl.appendLogMessage("Inside Data Consolidation loop : rowCounter:" +rowCounter);
				if(!checkIfRowIsEmpty(row)){
					vr = new ValidationResult();
					cl.appendLogMessage("Row is not empty : rowCounter:" +rowCounter);
					cl.appendLogMessage("Start reading excel values for each column starting from 0");
					String insuredName=getCellData(vr, row.getCell(INSURED_PERSON_NAME));
					String occupationCode=getCellData(vr, row.getCell(OCCUPATION));//.substring(0, 4);
					String occDesc=getCellData(vr, row.getCell(OCCUPATION_DESCRIPTION));
					String occupationClass=getCellData(vr, row.getCell(OCCUPATION_CLASS));
					String passport=getCellData(vr, row.getCell(PASSPORT));
					String nric=getCellData(vr, row.getCell(NRIC));
					String dateOfBirth=getCellData(vr, row.getCell(DOB));
					String gender=getCellData(vr, row.getCell(GENDER));
					String maritalStatus=getCellData(vr, row.getCell(MARITAL_STATUS));
					String planCode = getCellData(vr, row.getCell(PLAN_CODE));
					String s_e_sumInsured=getCellData(vr, row.getCell(SUM_INSURED),"DOUBLE");
					String s_e_flatPremium=getCellData(vr, row.getCell(FLAT_PREMIUM),"DOUBLE");
					cl.appendLogMessage("Occupation Description read from excel file : " +occDesc);
					CoverageItems currPlanData = (CoverageItems)planData.get(planCode);

					//isBrochurePlan = XPath.getMatchingNodes(".//T7072[IND='A' or IND='F']", null, currPlanData. ).length>0;
					s5336ObjectDetailsBuilder =  Json.createObjectBuilder();
					try {
						vr.appendMessage(false, "");
				    	/******************************************************
				    	 * 					Add Insured Data
				    	 ******************************************************/    	
						cl.appendLogMessage("Adding Insured Data Started : rowCounter:" +rowCounter);

						addDefaultPropertiesToBO(vr, s5336ObjectDetailsBuilder);
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskType",riskType );
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskName",Extra1 );
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "dateStart",ItemFromDate);
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "effectiveDate",ItemFromDate);
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "lastDateEnd",ItemToDate);
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "insuredPerson", insuredName, true, rowCounter,54);
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "IdProofNo", passport, false, rowCounter,15);
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "NRIC", nric, false, rowCounter,15);
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "gender",gender, true, rowCounter,1);
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "maritalStatus", maritalStatus, true, rowCounter,1);
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "plan", planCode.toUpperCase() , true, rowCounter,-1);
				    	/******************************************************
				    	 * 					Rating/Occupation Class retrieval
				    	 ******************************************************/
						cl.appendLogMessage("About to validate Occupation/Rating class");
						if(occupationClass.equalsIgnoreCase("")){
							cl.appendLogMessage("Error while validating Occupation/Rating class");
							vr.appendMessage(true, "-Invalid <B>Rating/Occupation Class</B> provided at line number <B>" + rowCounter +"</B></br>");
						}else{
							if (validateOccupationClass(cl, vr, occupationClass, rowCounter)) {
								occupationClass = formatOccupationClass(cl, occupationClass);
							}else{
								vr.appendMessage(true, "-Invalid <B>Rating/Occupation Class</B> provided at line number <B>" + rowCounter +"</B></br>");
							}
						}
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "ratingClass", occupationClass);

						
						/*******
						 * Check if Plan Data is invalid for the current row 
						 *****/
						if(null==currPlanData){
							vr.appendMessage(true, "-Plan Code("+planCode+") is invalid. No Data found<br/>");
							
						}else{
							cl.appendLogMessage("current plan code planCode:"+planCode+", array length : "+currPlanData.coverageItems.size());
							if(currPlanData.coverageItems.size()<=0){
								vr.appendMessage(true, "-Plan Code("+planCode+") is invalid. No Data found<br/>");
							}							
						}
						
						String unifiedString = getRecordAsString(cl, insuredName,passport,nric);
				    	/******************************************************
				    	 * 					Occupation Description retrieval
				    	 ******************************************************/
						cl.appendLogMessage("about to get occupation description for current occ code : " +occupationCode );
						cl.appendLogMessage("current occupation code : " + occupationCode);
						try {
							if(occData.get(occupationCode)==null){
								cl.appendLogMessage("occupation data not found for the given occ code" + occupationCode);
								vr.appendMessage(true, "-Invalid <B>Occupation Code</B> provided at line number <B>" + rowCounter +"</B></br>");
								addPropertyToRecord(vr,s5336ObjectDetailsBuilder, "occupationDescription","");
							}else{
								//occDesc = "";
								String isReferred = "";
								cl.appendLogMessage("Occupation data found for the given occ code: " + occupationCode);
								try{
									OccupationItem occItem = (OccupationItem) occData.get(occupationCode);
									cl.appendLogMessage("occupation Object :occItem.occupationCode :" + occItem.occupationCode + "## occItem.occupationDesc :" + occItem.occupationDesc + " ## occItem.isReferredRisk :"+occItem.isReferredRisk);
									cl.appendLogMessage("checking if occDesc varibale is empty: occDesc.equalsIgnoreCase(\"\") - " +occDesc.equalsIgnoreCase(""));

									if(occDesc.equalsIgnoreCase(""))
										occDesc = occItem.occupationDesc;
									cl.appendLogMessage("Occupation description after validation - " +occDesc);
									
									isReferred = occItem.isReferredRisk;
									if(isReferred.equalsIgnoreCase("Y")){
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskClassification"	,"Referred");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "symRiskClassification","Referred");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskClassificationReason","System Marked as Referred");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "occRiskClassification","Referred");
										
									}else if(isReferred.equalsIgnoreCase("D")){
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskClassification"	,"Declined");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "symRiskClassification","Declined");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskClassificationReason","System Marked as Declined");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "occRiskClassification","Declined");
									}else{
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskClassification"	,"Standard");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "symRiskClassification","");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskClassificationReason","");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "occRiskClassification","");
									}
								}catch(Exception e){
									cl.appendLogMessage("error while getting occupation details from hashmap");
									addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskClassification"	,"Standard");
									addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "symRiskClassification","");
									addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "riskClassificationReason","");
									addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "occRiskClassification","");
									
								}
                                //VK007 Changed occupationDescription to insuredOccDescription
								addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "insuredOccDescription",occDesc);

							}
                            //VK007 Changed  occupationCode to insuredOccCode
							addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "insuredOccCode",occupationCode , true, rowCounter,-1);
                                                        addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "childRiskIdentity","itemNo");
							
						} catch (Exception e) {
							cl.appendLogMessage("Error occured while reading occupation descriptions");
							vr.appendMessage(true, "-Error occured while reading <B>Occupation Code</B> provided at line number <B>" + rowCounter +"</B></br>");
						}
						
						
				    	/******************************************************
				    	 * 					Gender Validation
				    	 ******************************************************/
						cl.appendLogMessage("validating Gender : !allowedGender.contains(getCellData(row.getCell(6)).trim()): " + (!allowedGender.contains(gender)));
						if(!allowedGender.contains(gender)){
							vr.appendMessage(true, "-Invalid <B>Gender </B> provided at line number <B>" + rowCounter +"</B></br>");
						}
				    	/******************************************************
				    	 * 					Marital Status Validation
				    	 ******************************************************/
						if(!allowedMaritalStatus.contains(maritalStatus)){
							vr.appendMessage(true, "-Invalid <B>Marital Status </B> provided at line number <B>" + rowCounter +"</B></br>");
						}
						
				    	/******************************************************
				    	 * 					NRIC and OldIC/Passport Validation
				    	 ******************************************************/    	
						if(passport.equalsIgnoreCase("") && nric.equalsIgnoreCase("")){
							vr.appendMessage(true, "-Mandatory fields <B>NRIC and Old IC/Passport</B> missing at line number <B>" + rowCounter +"</B></br>");
						}else{
							cl.appendLogMessage("validating NRIC : " +validateFormat(nric,"[0-9]{6}-[0-9]{2}-[0-9]{4}$") );
							//passport is empty and NRIC is not empty
							if(passport.equalsIgnoreCase("") && !nric.equalsIgnoreCase("")){
								if(!validateFormat(nric,"[0-9]{6}-[0-9]{2}-[0-9]{4}$")){
									vr.appendMessage(true, "-Invalid NRIC format, format should be YYMMDD-XX-XXXX at line number <B>" + rowCounter +"</B></br>");
								}else{
									try{
										formatDate(nric.substring(0, 6),"yyMMdd","yyyy-MM-dd");
									}catch(Exception e){
										vr.appendMessage(true, "-Invalid date of birth in NRIC.<B>YYMMDD</B> Could not be computed from NRIC <B>" + rowCounter +"</B></br>");
									}									
								}
							}
						}
				    	/******************************************************
				    	 * 					Date of Birth Validation
				    	 ******************************************************/
						String dob="";
						cl.appendLogMessage("Validating Date of birth");
						if(dateOfBirth.equalsIgnoreCase("")){
							cl.appendLogMessage("Date of birth field is empty");
							// if Data of Birth is empty, check if it can be computed from NRIC
							if(nric.equalsIgnoreCase("")){
								//if NRIC Blank
								vr.appendMessage(true, "-Mandatory fields <B>Date of Birth</B> missing at line number <B>" + rowCounter +"</B></br>");
							}else{
								cl.appendLogMessage("trying to compute date of birth from NRIC : " + nric);
								//check if NRIC format is correct, trim first 6 chars from NRIC
								if(validateFormat(nric,"[0-9]{6}-[0-9]{2}-[0-9]{4}$")){
									try{
										cl.appendLogMessage("date part of the NRIC is : " + nric.substring(0, 6));
										dob = formatDate(nric.substring(0, 6),"yyMMdd","yyyy-MM-dd");
									}catch(Exception e){
										cl.appendLogMessage("-Mandatory field <B>Date of Birth</B> Could not be computed from NRIC <B>" + rowCounter +"</B></br>");
										vr.appendMessage(true, "-Mandatory field <B>Date of Birth</B> Could not be computed from NRIC <B>" + rowCounter +"</B></br>");
									}
								}
							}
						}else{
							//check if provided in correct format
							//dob = getCellData(row.getCell(5)).trim();
							cl.appendLogMessage("date of birth field is not empty in excel file.");
							cl.appendLogMessage("date to be formatted is : " + dob);
							try{
								dob = formatDate(dateOfBirth,"dd/MM/yyyy","yyyy-MM-dd");
							}catch(Exception e){
								vr.appendMessage(true, "-Invalid Date format for Mandatory field <B>Date of Birth</B>, Should be dd/MM/yyyy at line number<B>" + rowCounter +"</B></br>");
							}
							
						}
						addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "dateOfBirth",dob );
						
				    	/******************************************************
				    	 * 					Duplicate Check
				    	 ******************************************************/
						cl.appendLogMessage("about to check for duplicates : unifiedString="+unifiedString);
						cl.appendLogMessage("about to check for duplicates : !checkUniqueRows.containsKey(unifiedString)="+!checkUniqueRows.containsKey(unifiedString));
						if(!checkUniqueRows.containsKey(unifiedString)){
							cl.appendLogMessage("Not a duplicate");
							checkUniqueRows.put(unifiedString, unifiedString);
						}else{
							cl.appendLogMessage("Duplicate found");
							vr.appendMessage(true, "-Duplicate Entry");
							cl.appendLogMessage("Duplicate record : rowCounter:" + rowCounter +", unifiedString:"+unifiedString );
						}

				    	/******************************************************
				    	 * 					Add Coverage Information
				    	 ******************************************************/    	
						
						cl.appendLogMessage("Coverage Information Started : rowCounter:" +rowCounter);
						JsonObjectBuilder s5336BenefitsBuilder =  Json.createObjectBuilder();
						JsonArrayBuilder s5336BenefitsObjectArrayBuilder =  Json.createArrayBuilder();
						JsonObjectBuilder s5336BenefitsObjectDetailsBuilder =  Json.createObjectBuilder();
						//Determine brochure plan or non-brochure
						//XPath.getMatchingNodes(".//T7072[IND='A' or IND='F']", null, currPlanData)
						try{
							cl.appendLogMessage("about to read sum insred and flat premium");
							double e_sumInsured =Double.parseDouble(s_e_sumInsured);
							double e_flatPremium =Double.parseDouble(s_e_flatPremium);
							cl.appendLogMessage("completed reading sum insred and flat premium");
							double p_sumInsured=0.00;
							double basicPremium=0.00;
							boolean isBrochurePlan=false;
							String indicator="";
							cl.appendLogMessage("######1");
							try {
								cl.appendLogMessage("######2 - Next XML node will be printed, if not printed, it will print ####3 in case of exception");
								p_sumInsured= Double.parseDouble(currPlanData.coverageItems.get(0).ZSORIG);
								
								cl.appendLogMessage("ZSORIG value read from Coverage Items"+currPlanData.coverageItems.get(0).ZSORIG);
							} catch (Exception e) {
								cl.appendLogMessage("######3 error occured while reading sum Insured from XMLNode from excel values ==p_sumInsured:" + p_sumInsured+", e_sumInsured: "+e_sumInsured + ", e_flatPremium:" + e_flatPremium);
							}
							cl.appendLogMessage("variables after populating from excel file : p_sumInsured: "+p_sumInsured +", e_sumInsured: " + e_sumInsured +", e_flatPremium: "+ e_flatPremium);
							cl.appendLogMessage(" brochure or non-brochure plan validation result :Indicator:  "+indicator+",p_sumInsured: "+p_sumInsured+", Brochure or non-brochure result - " + (indicator.equalsIgnoreCase("F")||indicator.equalsIgnoreCase("A") &&(p_sumInsured>0)));
							indicator = currPlanData.coverageItems.get(0).IND;
							if(indicator.equalsIgnoreCase("F")||indicator.equalsIgnoreCase("A") &&(p_sumInsured>0))
								isBrochurePlan=true;
							cl.appendLogMessage("######4 - Number of Coverage Items inside current Plan: " + currPlanData.coverageItems.size() + " ### isBrochurePlan: " + isBrochurePlan + "## sumInsuredFromPlan: "+p_sumInsured);
							if(isBrochurePlan){
								cl.appendLogMessage("it is a Brochure plan");
								try {
									for(int i=0;i<currPlanData.coverageItems.size();i++){
										cl.appendLogMessage("Coverage Item Object:"+currPlanData.coverageItems.get(i));										
										addCoveragePropertyToRecordFromXML(s5336BenefitsObjectArrayBuilder, currPlanData.coverageItems.get(i));								
										basicPremium = basicPremium + Double.parseDouble(currPlanData.coverageItems.get(i).GPDPREM);
									}
									try {
										cl.appendLogMessage("about to format sumInsured: "+e_sumInsured+" and basicPremium:"+basicPremium);
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"sumInsured", new DecimalFormat("#").format(p_sumInsured));
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"basicPremium",new DecimalFormat("##.##").format(basicPremium));
										
									} catch (Exception e) {
										cl.appendLogMessage("Error while formatting sumInsured and basic Premium, falling back");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"sumInsured", String.valueOf(p_sumInsured));
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"basicPremium",String.valueOf(basicPremium));
									}

								} catch (Exception e) {
									vr.appendMessage(true, "-Error occured while reading benefit information for provided plan");
									cl.appendLogMessage("Error occured while reading benefit information for the brochure plan.");
									rowMessage = rowMessage+"@@error while reading Benefit details for row number : " + rowCounter;
								}
							}
							else{
								cl.appendLogMessage("it is a Non-Brochure plan");
								try {
									boolean isDEAD_Benefit_provided=false;
									boolean isPDIS_Benefit_provided=false;
									for(int i=0;i<currPlanData.coverageItems.size();i++){
										cl.appendLogMessage("Start=====================================================================");
								    	cl.appendLogMessage("Reading coverage Node Object: "+currPlanData.coverageItems.get(i));
										String cvCode = currPlanData.coverageItems.get(i).ZCVCDE;
										String optIndicator="";
										cl.appendLogMessage("Non-Brochure Benefit Code: " + cvCode);
										/********************logic here******************/
										if(cvCode.equals("DEAD")){
											try{
												cl.appendLogMessage("Checking if DEAD benefit value is provided at cell 11 : "+getCellData(vr, row.getCell(COVERAGE_DEAD_BENEFIT),"DOUBLE"));
												if(Double.parseDouble(getCellData(vr, row.getCell(COVERAGE_DEAD_BENEFIT),"DOUBLE"))>0)
													isDEAD_Benefit_provided=true;
											}catch(Exception e){
												vr.appendMessage(true, "-Invalid Benefit value for the Coverage Code : DEAD at column: "+(COVERAGE_DEAD_BENEFIT+1) +"<br/>");
												cl.appendLogMessage("-Invalid Benefit value for the Coverage Code : DEAD at column: "+(COVERAGE_DEAD_BENEFIT+1));
												isDEAD_Benefit_provided=false;
											}
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "DEAD", "DEATH", COVERAGE_DEAD_BENEFIT, COVERAGE_DEAD_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										}
										else if(cvCode.equals("PDIS")){
											try{
												cl.appendLogMessage("Checking if PDIS benefit value is provided at cell 11 : "+getCellData(vr, row.getCell(COVERAGE_PDIS_BENEFIT),"DOUBLE"));
												if(Double.parseDouble(getCellData(vr, row.getCell(COVERAGE_PDIS_BENEFIT),"DOUBLE"))>0)
													isPDIS_Benefit_provided=true;
											}catch(Exception e){
												vr.appendMessage(true, "-Invalid Benefit value for the Coverage Code : PDIS at column: "+(COVERAGE_PDIS_BENEFIT+1) +"<br/>");
												cl.appendLogMessage("-Invalid Benefit value for the Coverage Code : PDIS at column: "+(COVERAGE_PDIS_BENEFIT+1));
												isPDIS_Benefit_provided=false;
											}
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "PDIS", "PERMANENT DISABLEMENT", COVERAGE_PDIS_BENEFIT, COVERAGE_PDIS_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										}
										else if(cvCode.equals("PTDB"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "PTDB", "PERMANENT TOTAL DISABLEMENT", COVERAGE_PTDB_BENEFIT, COVERAGE_PTDB_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("TTDW"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "TTDW", "TEMPORARY TOTAL DISABLEMENT", COVERAGE_TTDW_BENEFIT, COVERAGE_TTDW_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("TPDW"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "TPDW", "TEMPORARY PARTIAL DISABLEMENT", COVERAGE_TPDW_BENEFIT, COVERAGE_TPDW_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("MEDC"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "MEDC", "MEDICAL EXPENSES (PER CLAIM)", COVERAGE_MEDC_BENEFIT, COVERAGE_MEDC_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("FUNL"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "FUNL", "FUNERAL", COVERAGE_FUNL_BENEFIT, COVERAGE_FUNL_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("BURL"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "BURL", "BURIAL/REPATRIATION", COVERAGE_BURL_BENEFIT, COVERAGE_BURL_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("AHIB"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "AHIB", "HOSPITAL BENEFIT - PER DAY", COVERAGE_AHIB_BENEFIT, COVERAGE_AHIB_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("AMFE"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "AMFE", "AMBULANCE FEES", COVERAGE_AMFE_BENEFIT, COVERAGE_AMFE_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("BERA"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "BERA", "BEREAVEMENT ALLOWANCE", COVERAGE_BERA_BENEFIT, COVERAGE_BERA_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("CALL"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "CALL", "CONVALESCENCE ALLOWANC", COVERAGE_CALL_BENEFIT, COVERAGE_CALL_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("DAHI"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "DAHI", "HOSPITAL INCOME (PER DAY)", COVERAGE_DAHI_BENEFIT, COVERAGE_DAHI_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("FCRE"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "FCRE", "FUNERAL CREMATION REPATRIATION", COVERAGE_FCRE_BENEFIT, COVERAGE_FCRE_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("ORTH"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "ORTH", "PURCHASE OF ORTHO.EQUIP", COVERAGE_ORTH_BENEFIT, COVERAGE_ORTH_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else if(cvCode.equals("PLIA"))
											basicPremium =basicPremium+ addCoveragePropertyToRecord(cl, vr, s5336BenefitsObjectArrayBuilder,row, "PLIA", "PERSONAL LIABILITY", COVERAGE_PLIA_BENEFIT, COVERAGE_PLIA_RATE,currPlanData.coverageItems.get(i),e_flatPremium);
										else 
											addCoveragePropertyToRecordFromXML(s5336BenefitsObjectArrayBuilder, currPlanData.coverageItems.get(i));
										cl.appendLogMessage("End=====================================================================");
									}
									if(!(isDEAD_Benefit_provided || isPDIS_Benefit_provided)){
										vr.appendMessage(true, "-Either of the DEAD or PDIS benefit should be provided for non-brochure plan.<br/>");
										cl.appendLogMessage("-Either of the DEAD or PDIS benefit should be provided for non-brochure plan.<br/>");
									}
									//addPropertyToRecord(s5336ObjectDetailsBuilder, "sumInsured", row, 9, true, rowCounter);
									try {
										cl.appendLogMessage("about to format sumInsured: "+e_sumInsured+" and basicPremium:"+basicPremium);
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"sumInsured", new DecimalFormat("#").format(e_sumInsured));
										if(basicPremium>0){
											addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"basicPremium",new DecimalFormat("#.00").format(basicPremium));											
										}else{
											addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"basicPremium","0.00");											
										}
										
									} catch (Exception e) {
										cl.appendLogMessage("Error while formatting sumInsured and basic Premium, falling back");
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"sumInsured", String.valueOf(e_sumInsured));
										addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"basicPremium",String.valueOf(basicPremium));
									}
								} catch (Exception e) {
									rowMessage = rowMessage+"@@error while reading Benefit details for row number : " + rowCounter;
								}
							}
                                                      
							s5336BenefitsBuilder.add("benefit", s5336BenefitsObjectArrayBuilder.build());
							s5336ObjectDetailsBuilder.add("itemBenefits",s5336BenefitsBuilder.build());
							cl.appendLogMessage("Calculated basic premium: " + String.valueOf(basicPremium));
							
							addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"isBrochurePlan", String.valueOf(isBrochurePlan));
							addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"seatPremium","0");
							try {
								addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"totalAnnualPremium",new DecimalFormat("#.00").format(basicPremium));								
							} catch (Exception e) {
								addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"totalAnnualPremium",String.valueOf(basicPremium));
							}
							addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"postingPremium",getPostedPremium(cl, basicPremium,ItemFromDate,ItemToDate) );
							try {
								addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"totalPremium",new DecimalFormat("#.00").format(basicPremium));
							} catch (Exception e) {
								addPropertyToRecord(vr, s5336ObjectDetailsBuilder,"totalPremium",String.valueOf(basicPremium));
							}
							
							addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "expandBenfitIndicator","false");
							addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "importedFromExcel","Y");
							//removed from here
						}catch(Exception e){
							
						}						
						
					} catch (Exception e) {
						cl.appendLogMessage("Adding Insured Data Failed : rowCounter:" +rowCounter);
						rowMessage=rowMessage+" error while reading insured details for row number : " + rowCounter;
					}
					cl.appendLogMessage("Adding Insured Data Completed : rowCounter:" +rowCounter);
					//added below
					addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "isValidationFailed",vr.isValidationFailed?"true":"false");
					addPropertyToRecord(vr, s5336ObjectDetailsBuilder, "validationMessage","<p>"+ vr.validationMessage +"</p>");
					s5336ObjectDetailsBuilder.add("importValidationMessage", rowMessage);
					s5336ObjectArrayBuilder.add(s5336ObjectDetailsBuilder);
					//s5336ObjectArrayBuilder.add(s5336ObjectDetailsBuilder);					
					logger.debug(cl.logMessages.toString());

				}else{
					break;
				}
			}
			rowCounter++;
		}
		s5336Builder.add("s5336Item", s5336ObjectArrayBuilder.build());
		TopBuilder.add("s5336Items",s5336Builder.build());
		topJsonObject = TopBuilder.build();
		cl.appendLogMessage("===================\nFinal Data\n=======================");
		cl.appendLogMessage(topJsonObject.toString());
		logger.debug("Debug log message from VR class : " + topJsonObject.toString() );
		removeUploadedExcelFile(FilePath);
        return topJsonObject.toString();
    }
	public static String formatOccupationClass(CustomLogger cl, String occClass){
		int numToFormat;
		//try to read as number
		try {
			numToFormat = Integer.parseInt(occClass);
			occClass=String.format("%02d", numToFormat);
		} catch (Exception e) {
			cl.appendLogMessage("Error while converting occupation class into integer, returning occ class as is");
		}
		return occClass;
	}
	public static HashMap<String, Object> getOccupationDescription(CustomLogger cl,  HashMap<String, Object> occSet) throws XMLException, UnsupportedEncodingException{
		String occCodeList = "";
		cl.appendLogMessage("Inside getOccupationDescription method ... ");
		//prepare query string
		for (HashMap.Entry<String, Object> entry : occSet.entrySet()) {
			occCodeList = occCodeList +"'"+ entry.getKey()+"',";
			//System.out.println("Item : " + entry.getKey() + " Count : " + entry.getValue());
		}
		//remove last comma
		try{
			if(occCodeList.length()>0)
				occCodeList=occCodeList.substring(0, occCodeList.length()-1);
		}catch(Exception e){			
		}
		cl.appendLogMessage(occCodeList);
		int occXMLData =0;
		try {
			occXMLData = executeSOAPRequestForOccupations(cl, occCodeList);			
		} catch (Exception e) {
			cl.appendLogMessage("Fetching occupation codes failed, occCodeList: "+ occCodeList);
		}
		cl.appendLogMessage("Occupation response XML" + Node.writeToString(occXMLData, true));
                //VK007 Added Try and Finally blocks
                int currNode = 0;
                try {
		//int occTuples[];
		if(occXMLData>0){
			//occTuples = XPath.getMatchingNodes(".//tuple", null, occXMLData);
			for (HashMap.Entry<String, Object> entry : occSet.entrySet()) {
				//System.out.println("Item : " + entry.getKey() + " Count : " + entry.getValue());
				currNode = XPath.getFirstMatch(".//T3644[VALUE='"+entry.getKey() +"']", null, occXMLData);
				if(currNode>0){
					OccupationItem occItem = new OccupationItem();
					occItem.occupationCode=entry.getKey();
					occItem.occupationDesc= Node.getDataWithDefault(XPath.getFirstMatch(".//DESCRIPTION", null, currNode), "");
					occItem.isReferredRisk=Node.getDataWithDefault(XPath.getFirstMatch(".//REFERREDRISK", null, currNode), "");
					//occItem.occNode = Node.clone(currNode, true);
					entry.setValue(occItem);
				}
			}
				
		} 
                }  finally {
			if(Node.isValidNode(occXMLData))
				Node.delete(occXMLData);
			occXMLData = 0;
			if(Node.isValidNode(currNode))
				Node.delete(currNode);
			currNode = 0;
		}
		return occSet;
	}
    public static int executeSOAPRequestForOccupations(CustomLogger cl,String OccupationsList) throws XMLException, UnsupportedEncodingException{
        // VK007 Added Try and Finally Blocks
        int iAdvanceConfig = 0;
    	int iCursorNode = 0;

        try {
    	String advConfig = "<ADVANCE_CONFIG_XML>"+
				"				<FILTERS>"+
				"					<FILTER FIELD_NAME=\"DESCITEM\" FIELD_VALUE=\""+OccupationsList+"\" OPERATION=\"IN\" CONDITION=\"AND\"/>"+
				"				</FILTERS>"+
				"</ADVANCE_CONFIG_XML>";
    	String sCursor ="<cursor id=\"0\" position=\"\" numRows=\"\" maxRows=\"99999\" sameConnection=\"false\"/>";
    	iAdvanceConfig = BSF.getXMLDocument().parseString(advConfig);
    	cl.appendLogMessage("inside executeSOAPRequestForOccupations method with values OccupationsList:"+OccupationsList + " Advanced Config node: " + Node.writeToString(iAdvanceConfig, true));
    	iCursorNode = BSF.getXMLDocument().parseString(sCursor);
        String []paramNamesSer = {"BRANCH","LOB","BUSINESS_FUNCTION","PRODUCT","OPERATION","FORM_NAME","FORM_FIELD_NAME","FIELD_TYPE"};
	Object []paramValuesSer = {"ALL","ALL","NEW BUSINESS","ALL","NEW","ALL","Occupation","LOV"};
    	SOAPRequestObject sro = new SOAPRequestObject("http://schemas.opentext.com/lovhandler/v1.0", "GetLOVData", paramNamesSer, paramValuesSer);
	if(iAdvanceConfig>0)
		sro.addParameterAsXml(iAdvanceConfig);
	if(iCursorNode>0)
		sro.addParameterAsXml(iCursorNode);
	return sro.execute();
        }  finally {

           if(Node.isValidNode(iAdvanceConfig))
                Node.delete(iAdvanceConfig);	
           iAdvanceConfig = 0;
	   if(Node.isValidNode(iCursorNode))
	        Node.delete(iCursorNode);	
           iCursorNode = 0;
       }

    }

	
	public static boolean validateOccupationClass(CustomLogger cl, ValidationResult vr, String p_occ_class, int rowCounter){
		boolean occClassFound=false;
		if(!p_occ_class.equalsIgnoreCase("")){
			HashSet<String> allowedRatingClasses = getAllowedRatingClasses();			
			cl.appendLogMessage("Rating/Occupation class is not empty value is : " + p_occ_class);
			cl.appendLogMessage("Checking if Occupation CLass in allowed list..." + allowedRatingClasses);
			try {
				cl.appendLogMessage("check if occupaton class existing in allowed list : allowedRatingClasses.contains(p_occ_class) " + allowedRatingClasses.contains(p_occ_class.substring(0, 1)));
				occClassFound = allowedRatingClasses.contains(p_occ_class.substring(0, 1));
			} catch (Exception e) {
				occClassFound=false;
			}
			
		}
		return occClassFound;
	}

	public static HashSet<String> getAllowedRatingClasses(){
		HashSet<String> allowedRatingClasses = new HashSet<String>();
		allowedRatingClasses.add("1");
		allowedRatingClasses.add("2");
		allowedRatingClasses.add("3");
		allowedRatingClasses.add("4");
		allowedRatingClasses.add("01");
		allowedRatingClasses.add("02");
		allowedRatingClasses.add("03");
		allowedRatingClasses.add("04");
		return allowedRatingClasses;		
	}
	public static HashSet<String> getAllowedGender(){
		HashSet<String> allowedGender = new HashSet<String>();
		allowedGender.add("?");
		allowedGender.add("F");
		allowedGender.add("J");
		allowedGender.add("M");
		return allowedGender;
	}
	public static HashSet<String> getAllowedMaritalStatus(){
		HashSet<String> allowedMaritalStatus = new HashSet<String>();
		allowedMaritalStatus.add("M");
		allowedMaritalStatus.add("S");
		return allowedMaritalStatus;
	}
    public static String getRecordAsString(CustomLogger cl, String insuredName, String passport, String nric){
		String unifiedData = insuredName.toLowerCase() +"#"+passport.toLowerCase()+"#"+nric.toLowerCase();
		cl.appendLogMessage("unified string of the record : " + unifiedData);
    	return unifiedData;
    }
	public static Date getDateFromString(String dateStr,String dtFormat) throws ParseException{
		DateFormat dtfOrgDTF = new SimpleDateFormat(dtFormat);
		dtfOrgDTF.setLenient(false);
		return dtfOrgDTF.parse(dateStr);
	}
	public static String getPostedPremium(CustomLogger cl , double totalPremium,String fromDT,String toDT) throws ParseException{
		DecimalFormat f = new DecimalFormat("0.00");
		//return String.valueOf( f.format((totalPremium/365) *  getDateDiff(cl, fromDT,toDT))); 
               //VK007 Added getNumberOfDaysForPOI and +1 to getDateDiff
               return String.valueOf( f.format((totalPremium/(getNumberOfDaysForPOI(cl, fromDT,toDT))) *  (getDateDiff(cl, fromDT,toDT)+1))); 

	}
	public static long getDateDiff(CustomLogger cl,  String fromDate,String toDate) throws ParseException{
		try{
			Date toDT = getDateFromString(toDate, "yyyy-MM-dd");
			Date fromDT = getDateFromString(fromDate, "yyyy-MM-dd");
			long diff = toDT.getTime() - fromDT.getTime();
			cl.appendLogMessage("calculating date diff value is : "+diff);
			return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
			
		}catch(Exception e){
			cl.appendLogMessage("#1234: error occured while getting date diff to calcualte posting premium");
			return 0;
		}
	}

	public static boolean getPlanDataForPlanCode(CustomLogger cl,CoverageItems coverageList, String DESCITEM, String effDate,CoverageDeadlockThreshold th)
			throws XMLException, UnsupportedEncodingException {
                int  result = 0;
		boolean continueExecution = true;
		cl.appendLogMessage("Outside while loop coverageDeadLockThreshold : " + th.getDeadlockThreshold());
		//while (continueExecution && coverageDeadLockThreshold <= 5) {
		while (continueExecution && th.getDeadlockThreshold() <= 5) {
			cl.appendLogMessage("Inside while loop coverageDeadLockThreshold : " + th.getDeadlockThreshold());
			th.setDeadlockThreshold(th.getDeadlockThreshold()+1);
			//coverageDeadLockThreshold++;
			String CONTITEM = "";
			try {
			      result = executeSOAPRequestForPlans(cl, DESCITEM, effDate);
                              if (XPath.getMatchingNodes(".//T7072", null, result).length > 0) {

 
				 for (int node : XPath.getMatchingNodes(".//T7072", null, result)) {
                                        logger.error("Vamsee getPlanDataForPlanCode"+Node.writeToString(node,true));
					CoverageItem ci = new CoverageItem();
					ci.ZSORIG = Node.getDataWithDefault(XPath.getFirstMatch(".//ZSORIG", null, node) , "");
					ci.NOUNTS = Node.getDataWithDefault(XPath.getFirstMatch(".//NOUNTS", null, node) , "");
					ci.ZCVCDE = Node.getDataWithDefault(XPath.getFirstMatch(".//ZCVCDE", null, node) , "");
					ci.COVER_DESC = Node.getDataWithDefault(XPath.getFirstMatch(".//COVER_DESC", null, node) , "");
                                 	ci.SUMIN = Node.getDataWithDefault(XPath.getFirstMatch(".//SUMIN", null, node) , "0");
					ci.GPDPREM = Node.getDataWithDefault(XPath.getFirstMatch(".//GPDPREM", null, node) , "0.00");
					ci.SRAT = Node.getDataWithDefault(XPath.getFirstMatch(".//SRAT", null, node) , "0.0000");
					ci.SLOA = Node.getDataWithDefault(XPath.getFirstMatch(".//SLOA", null, node) , "0.00");
					ci.IND = Node.getDataWithDefault(XPath.getFirstMatch(".//IND", null, node) , "");
					ci.OPTNO = Node.getDataWithDefault(XPath.getFirstMatch(".//OPTNO", null, node) , "");
					ci.OPTIND = Node.getDataWithDefault(XPath.getFirstMatch(".//OPTIND", null, node) , "");
					ci.CONTITEM = Node.getDataWithDefault(XPath.getFirstMatch(".//CONTITEM", null, node) , "");
					//ci.coverageNode = Node.clone(node, true);
					coverageList.coverageItems.add(ci);
                                     }
				 CONTITEM = Node.getDataWithDefault(XPath.getMatchingNodes(".//CONTITEM", null, result)[0], "");
                                 cl.appendLogMessage("CONTITEM : " + CONTITEM + ": CONTITEM.isEmpty(): " + CONTITEM.isEmpty());
				 if (!CONTITEM.trim().equalsIgnoreCase("") && CONTITEM != null) {
					continueExecution = getPlanDataForPlanCode(cl,coverageList, CONTITEM, effDate,th);
				 } else {
					continueExecution = false;
					return false;
				}
                               ;
				} else {
					continueExecution = false;
					return false;
				}
			} catch (Exception e) {
				// TODO: handle exception
			} finally {// VK007 Added Finally Block
                             if(Node.isValidNode(result))
                                Node.delete(result);
                            result = 0;
                        }
		}
		return false;
	}
    public static int executeSOAPRequestForPlans(CustomLogger cl, String DESCITEM,String effDate) throws XMLException, UnsupportedEncodingException{

        int iAdvanceConfig = 0;
    	int iCursorNode = 0;
        try {//VK007
    	String advConfig = "<ADVANCE_CONFIG_XML>"+
				"				<FILTERS>"+
				"					<FILTER FIELD_NAME=\"DESCITEM\" FIELD_VALUE=\""+DESCITEM+"\" OPERATION=\"EQ\" CONDITION=\"AND\"/>"+
				"					<FILTER FIELD_NAME=\"ITMFRM\" FIELD_VALUE=\""+effDate.replaceAll("-", "")+"\" OPERATION=\"LT\" CONDITION=\"AND\"/>"+
				"					<FILTER FIELD_NAME=\"ITMTO\" FIELD_VALUE=\""+effDate.replaceAll("-", "")+"\" OPERATION=\"GT\" CONDITION=\"AND\"/>"+
				//"					<FILTER FIELD_NAME=\"OPTIND\" FIELD_VALUE=\"O\" OPERATION=\"NTEQ\" CONDITION=\"AND\"/>"+
				"				</FILTERS>"+
				"</ADVANCE_CONFIG_XML>";
    	String sCursor ="<cursor id=\"0\" position=\"\" numRows=\"\" maxRows=\"99999\" sameConnection=\"false\"/>";
    	cl.appendLogMessage("inside getPlanDataForPlanCode method with values DESCITEM:"+DESCITEM+", effDate"+ effDate);

    	iAdvanceConfig = BSF.getXMLDocument().parseString(advConfig);
    	iCursorNode = BSF.getXMLDocument().parseString(sCursor);
	String []paramNamesSer = {"BRANCH","LOB","BUSINESS_FUNCTION","PRODUCT","OPERATION","FORM_NAME","FORM_FIELD_NAME","FIELD_TYPE"};
	Object []paramValuesSer = {"ALL","ALL","NEW BUSINESS","ALL","ALL","ALL","Coverage Information","LOOKUP"};
    	SOAPRequestObject sro = new SOAPRequestObject("http://schemas.opentext.com/lovhandler/v1.0", "GetLOVData", paramNamesSer, paramValuesSer);
	if(iAdvanceConfig>0)
		sro.addParameterAsXml(iAdvanceConfig);
	if(iCursorNode>0)
		sro.addParameterAsXml(iCursorNode);
	cl.appendLogMessage("Final request going for LOV : " + Node.writeToString(iAdvanceConfig, true) );
	return sro.execute();
        } catch(Exception e) {//vk007
          cl.appendLogMessage("In executeSOAPRequestForPlans Exception "+ e.getMessage());
    	  return 0;
        } finally {//VK007
		
           if(Node.isValidNode(iAdvanceConfig))
                Node.delete(iAdvanceConfig);	
           iAdvanceConfig = 0;
	   if(Node.isValidNode(iCursorNode))
	        Node.delete(iCursorNode);	
           iCursorNode = 0;
        }
    }

    public static String addDefaultPropertiesToBO(ValidationResult vr, JsonObjectBuilder s5336Obj){
		addPropertyToRecord(vr, s5336Obj, "contractNumber","");
		addPropertyToRecord(vr, s5336Obj, "indicator","");
		addPropertyToRecord(vr, s5336Obj, "inclusionDate","");
		addPropertyToRecord(vr, s5336Obj, "endorsmentEndDate","");
		addPropertyToRecord(vr, s5336Obj, "terminationDate","");
		addPropertyToRecord(vr, s5336Obj, "GP"	,"");
		addPropertyToRecord(vr, s5336Obj, "NO"	,"");
		addPropertyToRecord(vr, s5336Obj, "FI"	,"");
		addPropertyToRecord(vr, s5336Obj, "CL"	,"");
		addPropertyToRecord(vr, s5336Obj, "DD"	,"");
		addPropertyToRecord(vr, s5336Obj, "noOfUnits"	,"1");
		addPropertyToRecord(vr, s5336Obj, "printCI"	,"N");
		addPropertyToRecord(vr, s5336Obj, "itemNo"	,"");
		addPropertyToRecord(vr, s5336Obj, "basis"	,"NAMED");
		addPropertyToRecord(vr, s5336Obj, "noOfPerson"	,"1");
		addPropertyToRecord(vr, s5336Obj, "insuredSalutation","");
		//addPropertyToRecord(s5336Obj, "riskClassification"	,"Standard");
		//addPropertyToRecord(s5336Obj, "symRiskClassification","");
		//addPropertyToRecord(s5336Obj, "riskClassificationReason","");
		//addPropertyToRecord(s5336Obj, "occRiskClassification","");
		addPropertyToRecord(vr, s5336Obj, "insuredAge","");
		addPropertyToRecord(vr, s5336Obj, "planAgeLimit","");
		addPropertyToRecord(vr, s5336Obj, "rbpCode","");
		addPropertyToRecord(vr, s5336Obj, "rbpDesc","");
		addPropertyToRecord(vr, s5336Obj, "rbpMethod","");
		addPropertyToRecord(vr, s5336Obj, "rbpSIAdjustment","");
		addPropertyToRecord(vr, s5336Obj, "rbpMaxYears","");
		addPropertyToRecord(vr, s5336Obj, "rbpRestartRBPlan","");
		addPropertyToRecord(vr, s5336Obj, "financialInterest","");
		addPropertyToRecord(vr, s5336Obj, "loadingDiscountPercentage","0");
		addPropertyToRecord(vr, s5336Obj, "loadingDiscountAmount","0");
		//addPropertyToRecord(s5336Obj, "postingPremium","0");
		//addPropertyToRecord(s5336Obj, "totalAnnualPremium","0");
		addPropertyToRecord(vr, s5336Obj, "additionalLoading","");
		addPropertyToRecord(vr, s5336Obj, "addditionalPremium","0");
		//addPropertyToRecord(s5336Obj, "discountedPremium","0");
		addPropertyToRecord(vr, s5336Obj, "rebate","0");
		addPropertyToRecord(vr, s5336Obj, "rebateAmount","0");
		addPropertyToRecord(vr, s5336Obj, "GST","0");
		addPropertyToRecord(vr, s5336Obj, "gstAmount","0");
		//addPropertyToRecord(s5336Obj, "originalTotalPremium","0");
		//addPropertyToRecord(s5336Obj, "postedPremium","");
		addPropertyToRecord(vr, s5336Obj, "sumInsured","0");
		addPropertyToRecord(vr, s5336Obj, "rebatePercentage","0");
		s5336Obj.add("additionalCoverDetails", Json.createObjectBuilder()
				.add("additionalCoverTotal", "0")
				.add("additionalCover", Json.createArrayBuilder()));
		addPropertyToRecord(vr, s5336Obj, "nomineeDetails","{\"nominee\": []}");
		s5336Obj.add("nomineeDetails",Json.createObjectBuilder()
				.add("nominee", Json.createArrayBuilder()));
		s5336Obj.add("PADriverDetails",Json.createObjectBuilder()
				.add("modelCode", "")
				.add("yearOfMake", ""));
		//addPropertyToRecord(s5336Obj, "PADriverDetails","{\"modelCode\": \"\",\"yearOfMake\": \"\"}");
		addPropertyToRecord(vr, s5336Obj, "S5336AddressDetails","{}");
    	
    	return "";
    }
	public static String addPropertyToRecord(ValidationResult vr, JsonObjectBuilder s5336Obj, String propertyName, String propertyValue,boolean isMandatoryField, int rowNumber,int allowedLength){
		//jRow.put(propertyName,getCellData(row.getCell(cellNumber)));
		if(isMandatoryField){
			 if(propertyValue.equalsIgnoreCase("")){
				 vr.appendMessage(true, "-Mandatory field <B>"+propertyName+"</B> missing at line number <B>" + rowNumber +"</B></br>");
				 s5336Obj.add(propertyName,"");
			 }else if(allowedLength>0){
				 if(propertyValue.length()>allowedLength){
					 vr.appendMessage(true, "-Field length for <B>"+propertyName+"</B> exceeded at line number <B>" + rowNumber +"</B>. , allowed length is :"+ allowedLength+"</br>");
					 s5336Obj.add(propertyName,propertyValue);
				 }else{
					 s5336Obj.add(propertyName,propertyValue);					 
				 }
			 }
			 else{
				 s5336Obj.add(propertyName,propertyValue);				
			 }
		}else if(allowedLength>0){
			 if(propertyValue.length()>allowedLength){
				 vr.appendMessage(true, "-Field length for <B>"+propertyName+"</B> exceeded at line number <B>" + rowNumber +"</B>. , allowed length is :"+ allowedLength+"</br>");
				 s5336Obj.add(propertyName,propertyValue);
			 }else{
				 s5336Obj.add(propertyName,propertyValue);					 
			 }
			
		}else{
			 s5336Obj.add(propertyName,propertyValue);				
		}
		return "";
	}
	public static String addPropertyToRecord(ValidationResult vr, JsonObjectBuilder s5336Obj, String propertyName, String fixedValue){
		 s5336Obj.add(propertyName, fixedValue);		
		return "";
	}
	public static String addPropertyToRecordWithFixedValue(JsonObjectBuilder s5336Obj, String propertyName, JSONObject jRow,Row row,String value){
		//jRow.put(propertyName,value);
		return value;
	}
	public static double addCoveragePropertyToRecord(CustomLogger cl, ValidationResult vr,JsonArrayBuilder beneArray, Row row, String coverageCode, String coverageDesc, 
			int benefitIndex, int rateIndex,CoverageItem ci,double e_flatPremium) throws Exception{
		JsonObjectBuilder benefitObj =  Json.createObjectBuilder();
		double sumIns = 0;
		double rate = 0.00;
		double noUnits=1;
		double premium=0.00;
		String s_premium="0.00";
		String s_rate="0.0000";
		//String s_flatPremium="0.00";
		cl.appendLogMessage("##inside addCoveragePropertyToRecord method with e_flatPremium=" + e_flatPremium);
		try{
			cl.appendLogMessage("inside addCoveragePropertyToRecord method : #1, benefitIndex: "+benefitIndex + ", rateIndex: "+rateIndex);
			try{
				cl.appendLogMessage("Sum Insured value read for the current benefit is : "+getCellData(vr, row.getCell(benefitIndex),"DOUBLE"));
				sumIns = Double.parseDouble(getCellData(vr, row.getCell(benefitIndex),"DOUBLE"));
			}catch(Exception e){
				vr.appendMessage(true, "-Invalid Benefit value for the Coverage Code : " + coverageCode + " at column: "+(benefitIndex+1) +"<br/>");
				cl.appendLogMessage("-Invalid Benefit value for the Coverage Code : " + coverageCode + " at column: "+(benefitIndex+1));
				sumIns=0;
			}
			cl.appendLogMessage("inside addCoveragePropertyToRecord method : #2");
			try{
				cl.appendLogMessage("Rate value read for the current benefit is : "+getCellData(vr, row.getCell(rateIndex),"DOUBLE"));
				rate = Double.parseDouble(getCellData(vr, row.getCell(rateIndex),"DOUBLE"));				
			}catch(Exception e){
				vr.appendMessage(true, "-Invalid Rate value for the Coverage Code : " + coverageCode + " at column: "+ (rateIndex+1) +"<br/>");
				cl.appendLogMessage("-Invalid Rate value for the Coverage Code : " + coverageCode + " at column: "+ (rateIndex+1));
				rate=0.00;
			}
			cl.appendLogMessage("inside addCoveragePropertyToRecord method : #3");
			try{
				noUnits = Double.parseDouble(ci.NOUNTS);
			}catch(Exception e){
				//vr.appendMessage(true, "Error while reading No of Units for the Coverage Code : " + coverageCode + ", benefitIndex: "+benefitIndex + ", rateIndex: "+ rateIndex);
				cl.appendLogMessage("Error while reading No of Units for the Coverage Code : " + coverageCode + ", benefitIndex: "+benefitIndex + ", rateIndex: "+ rateIndex);
				noUnits=1;
			}
			cl.appendLogMessage("inside addCoveragePropertyToRecord method : #4");
			if(e_flatPremium>0){
				if (coverageCode.equalsIgnoreCase("DEAD")){
					premium = e_flatPremium;
				}
				else
					premium = 0.00;
			}else{
				cl.appendLogMessage("calculating premium in case of no flat premium provided...");
				premium = (((sumIns * noUnits)*rate)/100);
				cl.appendLogMessage("calculated premium is : " + premium + "simIns:"+sumIns + ", noUnits:"+noUnits + ", rate:"+rate);
			}
		}catch(Exception e){
			sumIns = 0;
			rate=0.00;
			noUnits=1;
		}
		//try to format the values if exception consider original values
		cl.appendLogMessage("trying to format reate and premium");
		try {
			s_premium = String.format("%1$.2f", premium);
			s_rate= String.format("%1$.4f", rate);
			//s_flatPremium = String.format("%1$,.2f", premium);
			cl.appendLogMessage("Formatting successful, s_premium:"+ s_premium);
		} catch (Exception e) {
			s_premium = String.valueOf(premium);
			s_rate=String.valueOf(rate);
			//s_flatPremium = String.valueOf(premium);
			cl.appendLogMessage("formatting failed");
		}		
		try {
			cl.appendLogMessage("inside addCoveragePropertyToRecord method : #5");
			if(sumIns>0 ||rate>0){
				cl.appendLogMessage("Sum Insured>0 and Rate >0 and premium : "+ s_premium);
				cl.appendLogMessage("Checking if the benefit is optional or mandatory");
				benefitObj.add("nounts" ,noUnits);
				benefitObj.add("coverageCode",coverageCode );
				benefitObj.add("coverageDescription" , coverageDesc);
				benefitObj.add("benefits" , (sumIns * noUnits));
				benefitObj.add("newSI" , (sumIns * noUnits ));
				benefitObj.add("rate" , s_rate);
				benefitObj.add("premium" , s_premium);
				benefitObj.add("load" , ci.SLOA);
				benefitObj.add("indicator" , ci.IND);
				benefitObj.add("optno" , ci.OPTNO);
				benefitObj.add("optind" ,ci.OPTIND);
				benefitObj.add("contitem" ,ci.CONTITEM);
				beneArray.add(benefitObj);


			}else{
				cl.appendLogMessage("Sum Insured<=0 and Rate <=0 and premium : "+ s_premium);
				if(!"O".equalsIgnoreCase(ci.OPTIND ) && (sumIns>0 ||rate>0)){
					benefitObj.add("nounts" ,"1");
					benefitObj.add("coverageCode",coverageCode);
					benefitObj.add("coverageDescription" ,coverageDesc);
					benefitObj.add("benefits" , ci.SUMIN);
					benefitObj.add("newSI" , ci.SUMIN);
					benefitObj.add("premium" , s_premium);
					benefitObj.add("rate" ,ci.SRAT);
					benefitObj.add("load" , "0.00");
					benefitObj.add("indicator", "");
					benefitObj.add("optno", "");
					benefitObj.add("optind", "");
					benefitObj.add("contitem", "");					
					beneArray.add(benefitObj);

				}
			}
			
		} catch (Exception e) {
			cl.appendLogMessage("Error occured while adding coverage benefit to object, adding a blank one...");
			benefitObj.add("nounts" ,"1");
			benefitObj.add("coverageCode",coverageCode);
			benefitObj.add("coverageDescription" ,coverageDesc);
			benefitObj.add("benefits" , "0");
			benefitObj.add("newSI" , "0");
			benefitObj.add("premium" , "0.00");
			benefitObj.add("rate" , "0.0000");
			benefitObj.add("load" , "0.00");
			benefitObj.add("indicator", "");
			benefitObj.add("optno", "");
			benefitObj.add("optind", "");
			benefitObj.add("contitem", "");
			beneArray.add(benefitObj);
			vr.appendMessage(true, "error while reading coverage data for :" + coverageCode + "Cell Indexes : " + benefitIndex +"," + rateIndex + ".<br/>");
		}
		
		return premium;

	}
	public static String addCoveragePropertyToRecordFromXML(JsonArrayBuilder beneArray, CoverageItem ci) throws Exception{
		JsonObjectBuilder benefitObj =  Json.createObjectBuilder();
		try 
		{
			//indicator = Node.getDataWithDefault(XPath.getFirstMatch(".//OPTIND", null, coverInfoXML) ,"");
			
			if(!"O".equalsIgnoreCase(ci.OPTIND)){
				//double noUnits = Double.parseDouble(Node.getDataWithDefault(XPath.getFirstMatch(".//NOUNTS", null, coverInfoXML) , "1"));
				//double sumIns = Double.parseDouble(Node.getDataWithDefault(XPath.getFirstMatch(".//SUMIN", null, coverInfoXML) , "0"));
				//double rate= Double.parseDouble(Node.getDataWithDefault(XPath.getFirstMatch(".//SRAT", null, coverInfoXML) , "0.0"));
				benefitObj.add("nounts" ,ci.NOUNTS);
				benefitObj.add("coverageCode",ci.ZCVCDE);
				benefitObj.add("coverageDescription" ,ci.COVER_DESC);
				benefitObj.add("benefits" , ci.SUMIN);
				benefitObj.add("newSI" , ci.SUMIN);
				benefitObj.add("premium" , ci.GPDPREM);
				benefitObj.add("rate" ,ci.SRAT);
				benefitObj.add("load" , ci.SLOA);
				benefitObj.add("indicator" , ci.IND);
				benefitObj.add("optno" , ci.OPTNO);
				benefitObj.add("optind" ,ci.OPTIND);
				benefitObj.add("contitem" , ci.CONTITEM);
				beneArray.add(benefitObj);	
                                logger.error("Vamsee addCoveragePropertyToRecordFromXML :ZCVCDE"+ci.ZCVCDE);		
			}
		} catch (Exception e) {
			throw new Exception( "error while reading coverage information for the plan.");
		}
		
		return "";

	}
	public static boolean validateFormat(String data, String regExStr){
		boolean finalResult=false;
		Pattern pattern = Pattern.compile(regExStr);
		finalResult = pattern.matcher(data).matches();
		return finalResult;
		
	}

       public static int getNumberOfDaysForPOI(CustomLogger cl,String fromDate,String toDate) {
		boolean flag = false;
		try {
			
			Date toDT = getDateFromString(toDate, "yyyy-MM-dd");
		
			Date fromDT = getDateFromString(fromDate, "yyyy-MM-dd");
		
			Calendar calendar = new GregorianCalendar();
		
			calendar.setTime(fromDT);
			int fromYear = calendar.get(Calendar.YEAR);
			//Add one to month {0 - 11}
			int fromMonth = calendar.get(Calendar.MONTH) + 1;
		
			calendar.setTime(toDT);
			int toYear = calendar.get(Calendar.YEAR);
			//Add one to month {0 - 11}
			int toMonth = calendar.get(Calendar.MONTH) + 1;
			int toDay = calendar.get(Calendar.DATE);
		
			Calendar cal = Calendar.getInstance();
        
			cal.set(Calendar.YEAR, fromYear);
			boolean yearFrm = cal.getActualMaximum(Calendar.DAY_OF_YEAR) > 365;
			//System.out.println();
        
			cal.set(Calendar.YEAR, toYear);
			boolean yearTo = cal.getActualMaximum(Calendar.DAY_OF_YEAR) > 365;
			//System.out.println();
        
			if(yearFrm && fromMonth <= 2) {	 
				flag = true;
			} else if (yearTo && toMonth > 2 ) {
				flag = true;
			} else if (yearTo && toMonth == 2 && toDay == 29) {
				flag = true;
			}        
        
			else flag = false;
        
			} catch (Exception e) {
			// TODO Auto-generated catch block
				cl.appendLogMessage("#1234: error occured while calculating number of days to calcualte posting premium");
			}
		if(flag) return 366;
		else return 365;
      }


	public static String formatDate(String dt, String currFormat, String requiredFormat) throws Exception{
		DateFormat dtfOrgDTF = new SimpleDateFormat(currFormat);
		DateFormat dtfReqDTF = new SimpleDateFormat(requiredFormat);		
		dtfOrgDTF.setLenient(false);
		Date sourceDate = dtfOrgDTF.parse(dt);
		return dtfReqDTF.format(sourceDate);
	}

	@SuppressWarnings("deprecation")
	public static String getCellData(ValidationResult vr, Cell cell,String NumberDataFormat){
		String data="0";
		try {
			if (cell == null) {
	            return "0";
	        }
			switch (cell.getCellType()) {
			case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
				data = cell.getRichStringCellValue().toString();
				break;
			case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
				if(NumberDataFormat.equalsIgnoreCase("DOUBLE")){
					data = Double.toString(cell.getNumericCellValue());				
				}else if(NumberDataFormat.equalsIgnoreCase("INTEGER")){
					data = Integer.toString((int) cell.getNumericCellValue());
				}
				break;
			}
			
		} catch (Exception e) {
			vr.appendMessage(true, "-Error while reading the cell "+ cell.getColumnIndex() + "-"+cell.getRowIndex()+ e.getMessage());
		}
		return data;
	}
	@SuppressWarnings("deprecation")
	public static String getCellData(ValidationResult vr, Cell cell){
		try{
			String data="";
			if (cell == null) {
	            return "";
	        }
			switch (cell.getCellType()) {
			case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
				data = cell.getRichStringCellValue().toString();
				if(!data.equals("")) {
					data=data.trim();
				}
				break;
			case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
				data = Integer.toString((int) cell.getNumericCellValue());
				break;
			default:
				data="";
				break;
			}
			return data;
			
		}catch(Exception e){
			vr.appendMessage(true, "-Error while reading the cell "+ cell.getColumnIndex() + "-"+cell.getRowIndex()+ e.getMessage());
			//isValidationFailed=true;
			//validationMessage=validationMessage+"-Error while reading the cell "+ cell.getColumnIndex() + "-"+cell.getRowIndex()+ e.getMessage();
			return "";
		}
	}
	public static boolean checkIfRowIsEmpty(Row row) {
	    if (row == null) {
	        return true;
	    }
	    if (row.getLastCellNum() <= 0) {
	        return true;
	    }
	    boolean isEmptyRow = true;
	    try {
	    	/**********************************************
	    	 * Check if all mandatory columns are empty
	    	 **********************************************/
		    for (int i=0;i<11;i++) {
		        Cell cell = row.getCell(i);
		        if (cell != null)
			        if(cell.getCellType() != Cell.CELL_TYPE_BLANK) {
			        	isEmptyRow = false;
			        }
		    }
		} catch (Exception e) {
			isEmptyRow=true;
		}
	    return isEmptyRow;
	}	
	public static String removeUploadedExcelFile(String fileName) {
		//
		try {
			Properties props = new Properties();
			InputStream is = new FileInputStream(propsFilePath);
			props.load(is);
			String deleteAfterProcessing = (String) props.get("NGA_EXCEL_UPLOAD_PATH_DELETE");
			logger.error("deleteAfterProcessing: " + deleteAfterProcessing);
			if (deleteAfterProcessing.equalsIgnoreCase("Y")) {
				File file = new File(fileName);
				boolean deleted = file.delete();
				return deleted ? "YES" : "NO";
			}
		} catch (Exception e) {

		}
		return "NO";
	}
    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }

}

class CoverageItems{
	public ArrayList<CoverageItem> coverageItems = new ArrayList<CoverageItem>();
}

class CoverageItem{
	//public int coverageNode;
	public String ZSORIG = "";
	public String NOUNTS = "";
	public String ZCVCDE = "";
	public String COVER_DESC = "";
	public String SUMIN = "";
	public String GPDPREM = "";
	public String SRAT = "";
	public String SLOA = "";
	public String IND = "";
	public String OPTNO = "";
	public String OPTIND = "";
	public String CONTITEM = "";
}
class OccupationItems{
	public ArrayList<OccupationItem> occItems = new ArrayList<OccupationItem>();	
}
class OccupationItem{
	//public int occNode;
	public String occupationCode="";
	public String occupationDesc="";
	public String isReferredRisk="";
}
class ValidationResult{
	public boolean isValidationFailed;
	public StringBuilder validationMessage;
	
	public ValidationResult(){
		isValidationFailed=true;
		validationMessage= new StringBuilder();
	}
	public void appendMessage(boolean vf,String vfm){
		isValidationFailed=vf;
		validationMessage.append(vfm);
	}
}
class CustomLogger{
	public ArrayList<String> logMessages;
	public CustomLogger(){
		logMessages = new ArrayList<String>();
	}
	public void appendLogMessage(String msg){
		logMessages.add(msg);
	}
	
}
/*class PlanItem{
	public String sumInsuredFromPlan="0";
	public double basicPremium=0.00;
	public boolean isBrochurePlan=false;
	public ArrayList<CoverageItem> coverageItem;
}*/

class CoverageDeadlockThreshold{
	private int deadlockThreshold=0;

	public int getDeadlockThreshold() {
		return deadlockThreshold;
	}

	public void setDeadlockThreshold(int deadlockThreshold) {
		this.deadlockThreshold = deadlockThreshold;
	}
	
}