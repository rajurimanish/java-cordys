/*
  This class has been generated by the Code Generator
 */

package com.msig.masterdata;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.busobject.exception.BsfConstraintViolationException;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.cordys.cpc.notification.utils.LDAPUtility;
import com.cordys.util.Encoding;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.system.EIBProperties;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.eibus.xml.nom.XMLException;
import com.eibus.xml.xpath.XPath;
import com.opentext.integration.services.Authenticator;
import com.opentext.integration.services.OTDSIntegration;

@SuppressWarnings("deprecation")
public class MasterDataUtil extends MasterDataUtilBase {
	private static Document document;
	private static CordysLogger logger = CordysLogger.getCordysLogger(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

	private static String GATEWAY_URL = null;
	private static String ADMIN_USER_ID = null;
	private static String ADMIN_PASSWORD = null;

	public MasterDataUtil() {
		this((BusObjectConfig) null);
	}

	public MasterDataUtil(BusObjectConfig config) {
		super(config);
	}

	public static BusObjectIterator<com.msig.masterdata.MasterDataUtil> getMasterDataUtilObjects(
			com.cordys.cpc.bsf.query.Cursor cursor) {
		return null;
	}

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

	public static String getCordysGatewayURL() throws Exception {
		if (GATEWAY_URL == null) {
			String orgName = getOrgName();

			GATEWAY_URL = "http://" + (InetAddress.getLocalHost()).getCanonicalHostName() + ":"
					+ EIBProperties.getProperty("web.server.portnumber") + "/home/" + orgName
					+ "/com.eibus.web.soap.Gateway.wcp";
		}
		return GATEWAY_URL;
	}

	public static String getOrgDN() {
		return BSF.getOrganization();
	}

	public static String getOrgName() {
		String orgDN = getOrgDN();
		String orgName = orgDN.substring(orgDN.indexOf("o=") + 2, orgDN.indexOf(","));

		return orgName;
	}

	public static String getUserName() {
		String userDN = BSF.getUser();
		String userName = userDN.substring(3, userDN.indexOf(","));

		return userName;
	}

	public static String getUserDn() {
		String userDN = BSF.getUser();
		return userDN;
	}

	public String getBase64EncodedStringByFile(String sFilePath) throws FileNotFoundException, IOException {
		FileInputStream fin = null;
		File oFile = new File(sFilePath);

		if (oFile.exists() == false)
			throw new FileNotFoundException(sFilePath);
		try {
			fin = new FileInputStream(oFile);
			byte byteFileContent[] = new byte[(int) oFile.length()];
			fin.read(byteFileContent);
			return new String((byte[]) Encoding.BASE64_ENCODING.encode(byteFileContent));
		} finally {
			if (fin != null)
				fin.close();
		}
	}

	public static String getBase64EncodedString(String sFilePath) throws FileNotFoundException, IOException {
		FileInputStream fin = null;
		File oFile = new File(sFilePath);

		if (oFile.exists() == false)
			throw new FileNotFoundException(sFilePath);
		try {
			fin = new FileInputStream(oFile);
			byte byteFileContent[] = new byte[(int) oFile.length()];
			fin.read(byteFileContent);
			return new String((byte[]) Encoding.BASE64_ENCODING.encode(byteFileContent));
		} finally {
			if (fin != null)
				fin.close();
		}
	}

	public static int executeSOAPRequest(String namespace, String methodName, String[] paramNames,
			String[] paramValues) {

		SOAPRequestObject sro = new SOAPRequestObject(namespace, methodName, paramNames, paramValues);
		sro.setUser(BSF.getUser());
		return sro.execute();

	}

	public static int getListOfFiles(String folderPath, String fileType) throws XMLException {

		File folder = new File(folderPath);

		File files[] = folder.listFiles();

		Arrays.sort(files, new Comparator<File>() {
			public int compare(File file1, File file2) {
				return Long.valueOf(file2.lastModified()).compareTo(file1.lastModified());
			}
		});

		List<File> fileTypeList = new ArrayList<>();

		for (int i = 0; i < files.length; i++) {
			File f = files[i];
			if (f.isFile() && f.getName().endsWith(fileType)) {
				fileTypeList.add(f);
			}
		}

		TimeZone timeZone = TimeZone.getDefault();
		long offset = timeZone.getOffset(new Date().getTime());

		document = BSF.getXMLDocument();
		StringBuffer responseStr = new StringBuffer("");
		responseStr.append("<tuple><directory>" + folder.getAbsolutePath() + "</directory>");
		Date d;
		SimpleDateFormat sd;

		for (File f : fileTypeList) {
			d = new Date(f.lastModified() - offset);
			sd = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.S");

			responseStr.append("<file><name>" + f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf("\\") + 1)
					+ "</name>" + "<absolutepath>" + f.getAbsolutePath() + "</absolutepath>");

			responseStr.append("<modified>" + sd.format(d).replaceAll(" ", "T") + "</modified>");
			responseStr.append("<filesize>" + String.valueOf(f.length()) + "</filesize></file>");
		}
		responseStr.append("</tuple>");
		byte xmlStr[] = responseStr.toString().getBytes();
		int result;

		result = document.load(xmlStr, xmlStr.length);

		return result;
	}

	public static boolean isFileExists(String filePath) {
		File fileObj = new File(filePath);

		return fileObj.exists();
	}

	public static String replace(String str, String str1, String str2) {
		return str.replaceAll(str1, str2);
	}

	public static void createRoleAndAssignUserInLDAPOld(String roleCode, String userId) throws Exception {
		int rolesNode = 0;
		int roleNode1 = 0;
		int roleNode2 = 0;

		try {
			// Creating the Role in LDAP and Assigning the Role to the user
			rolesNode = MasterDataUtil.executeSOAPRequest("http://schemas.cordys.com/UserManagement/1.0/User",
					"GetRoles", null, null);

			roleNode1 = XPath.getFirstMatch("descendant-or-self::Role[contains(., \"" + roleCode + "\")]", null,
					rolesNode);

			String orgDN = BSF.getOrganization();
			String orgName = orgDN.substring(orgDN.indexOf("o=") + 2, orgDN.indexOf(","));

			SOAPRequestObject sro = new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "Update", null, null);

			if (roleNode1 == 0) {
				// Create Role in LDPA

				String xml = "<tuple><new>	" + "<entry xmlns=\"http://schemas.cordys.com/1.0/ldap\" " + "dn=\"cn="
						+ roleCode + ",cn=organizational roles," + orgDN + "\">"
						+ "<objectclass><string>top</string><string>busorganizationalrole</string>"
						+ "<string>busorganizationalobject</string>"
						+ "</objectclass><busorganizationalroletype><string>Functional</string>"
						+ "</busorganizationalroletype><cn><string>" + roleCode + "</string>"
						+ "</cn><description><string>" + roleCode + "</string></description>"
						+ "<menu/><toolbar/><role>" + "<string>cn=everyoneIn" + orgName + ",cn=organizational roles,"
						+ orgDN + "</string>" + "</role></entry></new></tuple>";

				roleNode1 = BSF.getXMLDocument().parseString(xml);
				sro.addParameterAsXml(roleNode1);
				// sro.setUser("cn=cordysadmin,cn=organizational users," + orgDN);
				sro.execute();
			}

			/*
			 * boolean userFound = searchUserInLDAP(userId); MSIG_USERS_MASTER userObj =
			 * MSIG_USERS_MASTER.getMsigUsersMasterObject(userId); if (!userFound) { //
			 * Consolidate user partition //consilidatePartition(); //
			 * OTDSIntegration.consolidatePartitionRESTful();
			 * 
			 * //createUserInLDAP(userId, userObj.getUSER_FULL_NAME(),
			 * userObj.getUSER_EMAIL());
			 * 
			 * // Wait for one second to push users from OTDS to Cordys
			 * logger.error("::: User Id does not exists in Cordys" + userId); }
			 */

			// Assign user to the role
			sro = new SOAPRequestObject("http://schemas.cordys.com/UserManagement/1.0/Global", "AssignRolesToUser",
					new String[] { "Organization" }, new String[] { orgName });

			String xml = "<User>" + "<UserName>" + userId + "</UserName>" + "<Roles>" + "<Role application=\"\">"
					+ roleCode + "</Role>" + "<Role application=\"\">MSIG_APP_USER</Role>" + "</Roles>" + "</User>";

			roleNode2 = BSF.getXMLDocument().parseString(xml);
			sro.addParameterAsXml(roleNode2);
			// sro.setUser("cn=cordysadmin,cn=organizational users," + orgDN);
			sro.execute();

			/*
			 * OTDSIntegration.createOtUpdateUserInPartitionAsync(userId,
			 * userObj.getUSER_FULL_NAME(), userObj.getUSER_EMAIL());
			 * 
			 * logger.error(":::USER ASSIGNMENT SUCCESSFUL:::");
			 */
		} finally {
			if (Node.isValidNode(roleNode2)) {
				Node.delete(roleNode2);
				roleNode2 = 0;
			}
			if (Node.isValidNode(roleNode1)) {
				Node.delete(roleNode1);
				roleNode1 = 0;
			}
			if (Node.isValidNode(rolesNode)) {
				Node.delete(rolesNode);
				rolesNode = 0;
			}
		}
	}

	public static String getSAMLartToken() throws Exception {

		int response = 0;

		if (ADMIN_USER_ID == null || ADMIN_PASSWORD == null) {
			SOAPRequestObject sro = new SOAPRequestObject("http://schemas.cordys.com/1.0/xmlstore", "GetXMLObject",
					new String[] { "key" }, new String[] { "/com/msig/masterdata/mass-upload-config.xml" });
			// sro.setUser("cn=cordysadmin,cn=organizational users," +
			// BSF.getOrganization());

			try {
				response = sro.execute();
				ADMIN_USER_ID = Node.getData(XPath.getFirstMatch(
						"descendant-or-self::MasterDataConfig/descendant-or-self::AdminUserId", null, response));
				ADMIN_PASSWORD = Node.getData(XPath.getFirstMatch(
						"descendant-or-self::MasterDataConfig/descendant-or-self::AdminPassword", null, response));
			} finally {
				if (Node.isValidNode(response)) {
					Node.delete(response);
					response = 0;
				}
			}
		}

		try {
			// logger.error("ADMIN CREDENTIALS::::::" + ADMIN_USER_ID + ":::::" +
			// ADMIN_PASSWORD);
			response = Authenticator.authenticate(ADMIN_USER_ID, ADMIN_PASSWORD);

			String samlArt = Node.getData(XPath.getFirstMatch(
					"descendant-or-self::Response/descendant-or-self::AssertionArtifact", null, response));

			return samlArt;
		} finally {
			if (Node.isValidNode(response)) {
				Node.delete(response);
				response = 0;
			}
		}
	}

	public static void createRoleAndAssignUserInLDAP(String roleCode, String userId) throws Exception {
		try {
			String orgDN = getOrgDN();
			String orgName = getOrgName();

			MSIG_USERS_MASTER userObj = MSIG_USERS_MASTER.getMsigUsersMasterObject(userId);
			if (userObj == null) {
				return;
			}

			OTDSIntegration.createOrUpdateUserInPartitionRESTful(userId, userObj.getUSER_FULL_NAME(),
					userObj.getUSER_EMAIL(), userObj.getDESIGNATION(), orgDN);

			String gatewayUrl = getCordysGatewayURL();
			String samlToken = getSAMLartToken();

			gatewayUrl = gatewayUrl + "?SAMLart=" + samlToken;

			String createRoleXML = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\"><SOAP:Body><Update xmlns=\"http://schemas.cordys.com/1.0/ldap\" xmlns:clientattr=\"http://schemas.cordys.com/General/ClientAttributes/\" clientattr:sync_id=\"0\"><tuple clientattr:sync_id=\"4\"><new><entry xmlns=\"http://schemas.cordys.com/1.0/ldap\" dn=\"cn="
					+ roleCode + ",cn=organizational roles," + orgDN
					+ "\"><objectclass><string>top</string><string>busorganizationalrole</string><string>busorganizationalobject</string></objectclass><busorganizationalroletype><string>Functional</string></busorganizationalroletype><cn><string>"
					+ roleCode + "</string></cn><description><string>" + roleCode
					+ "</string></description><menu/><toolbar/><role><string>cn=everyoneIn" + orgName
					+ ",cn=organizational roles," + orgDN
					+ "</string></role></entry></new></tuple></Update></SOAP:Body></SOAP:Envelope>";

			String assignUserXML = "";
			// for Agents
			if ("agent".equalsIgnoreCase(userObj.getDESIGNATION())) {
				assignUserXML = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\"><SOAP:Body><AssignRolesToUser xmlns=\"http://schemas.cordys.com/UserManagement/1.0/Global\"><Organization>"
						+ orgName + "</Organization><User><UserName>" + userId
						+ "</UserName><Roles><Role>Agent</Role><Role application=\"\">MSIG_APP_USER</Role><Role application=\"\">"
						+ roleCode + "</Role></Roles></User></AssignRolesToUser></SOAP:Body></SOAP:Envelope>";
			} else {
				// for BMS users
				assignUserXML = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\"><SOAP:Body><AssignRolesToUser xmlns=\"http://schemas.cordys.com/UserManagement/1.0/Global\"><Organization>"
						+ orgName + "</Organization><User><UserName>" + userId
						+ "</UserName><Roles><Role application=\"\">MSIG_APP_USER</Role><Role application=\"\">MSIG_APP_ADMIN</Role><Role application=\"\">BMS_APP_USER</Role><Role application=\"\">"
						+ roleCode + "</Role></Roles></User></AssignRolesToUser></SOAP:Body></SOAP:Envelope>";
			}

			callSOAPUsingConnection(gatewayUrl, createRoleXML);
			callSOAPUsingConnection(gatewayUrl, assignUserXML);
		} finally {

		}
	}

	public static void assignTaskAdminRoleToUser(String userId) throws Exception {
		try {
			String orgName = getOrgName();
			String gatewayUrl = getCordysGatewayURL();
			String samlToken = getSAMLartToken();

			gatewayUrl = gatewayUrl + "?SAMLart=" + samlToken;

			String assignUserXML = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\"><SOAP:Body><AssignRolesToUser xmlns=\"http://schemas.cordys.com/UserManagement/1.0/Global\"><Organization>"
					+ orgName + "</Organization><User><UserName>" + userId
					+ "</UserName><Roles><Role application=\"\">MSIG_TASK_ADMIN</Role></Roles></User></AssignRolesToUser></SOAP:Body></SOAP:Envelope>";

			callSOAPUsingConnection(gatewayUrl, assignUserXML);
		} finally {

		}
	}

	public static void removeTaskAdminRoleFromUser(String userId) throws Exception {
		try {
			String gatewayUrl = getCordysGatewayURL();
			String samlToken = getSAMLartToken();
			gatewayUrl = gatewayUrl + "?SAMLart=" + samlToken;

			String removeRoleXML = "<SOAP:Envelope xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\"><SOAP:Body><RemoveRolesFromUser xmlns=\"http://schemas.cordys.com/UserManagement/1.0/Organization\"><User><UserName>"
					+ userId
					+ "</UserName><Roles><Role application=\"\">MSIG_TASK_ADMIN</Role></Roles></User></RemoveRolesFromUser></SOAP:Body></SOAP:Envelope>";

			callSOAPUsingConnection(gatewayUrl, removeRoleXML);
		} finally {

		}
	}

	public static void callSOAPUsingConnection(String gatewayURL, String xmlInput) throws Exception {
		HttpURLConnection connObj = null;
		try {
			URL url = new URL(gatewayURL);

			connObj = (HttpURLConnection) url.openConnection();
			connObj.setRequestMethod("POST");
			connObj.setRequestProperty("Content-Type", "text/xml; charset=UTF-8");

			connObj.setDoOutput(true);
			OutputStream os = connObj.getOutputStream();
			os.write(xmlInput.getBytes());
			os.flush();
			os.close();
			int responseCode = connObj.getResponseCode();
			if (responseCode != HttpURLConnection.HTTP_OK) {
				logger.error("Response Code::" + responseCode);
			}
		} finally {
			if (connObj != null) {
				connObj.disconnect();
			}
		}
	}

	public static void consilidatePartition() {
		SOAPRequestObject sro = new SOAPRequestObject("http://schemas.cordys.com/otds/integration/1.0",
				"ConsolidatePartitionRESTful", null, null);

		sro.execute();
	}

	public static void removeUserFromRoleInLDAP(String roleCode, String userId) throws Exception {
		int roleNode = 0;

		try {

			boolean userFound = searchUserInLDAP(userId);
			if (!userFound) {
				return;
			}

			// Remove user to the role
			SOAPRequestObject sro = new SOAPRequestObject("http://schemas.cordys.com/UserManagement/1.0/Organization",
					"RemoveRolesFromUser", null, null);
			String xml = "<User>" + "<UserName>" + userId + "</UserName>" + "<Roles>" + "<Role application=\"\">"
					+ roleCode + "</Role>" + "</Roles>" + "</User>";
			roleNode = BSF.getXMLDocument().parseString(xml);
			sro.addParameterAsXml(roleNode);
			// sro.setUser("cn=cordysadmin,cn=organizational users," + orgDN);
			sro.execute();
		} catch (Exception e) {
			throw new BsfConstraintViolationException("Exception occured while removing the role from cordys", e);
		} finally {
			if (Node.isValidNode(roleNode)) {
				Node.delete(roleNode);
				roleNode = 0;
			}
		}
	}

	public static boolean searchUserInLDAP(String userId) throws Exception {
		int tupleNode = 0;
		int response = 0;
		int xmlNode = 0;

		try {
			String inputXML = "<filter>&amp;(objectclass=busauthenticationuser)(osidentity =" + userId + ")</filter>";

			xmlNode = BSF.getXMLDocument().parseString(inputXML);

			String orgDN = BSF.getOrganization();
			String authDN = "cn=authenticated users," + orgDN.substring(orgDN.indexOf(",") + 1);

			SOAPRequestObject sro = new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "SearchLDAP",
					new String[] { "dn", "scope", "returnValues" }, new String[] { authDN, "1", "true" });
			sro.addParameterAsXml(xmlNode);
			// sro.setUser("cn=cordysadmin,cn=organizational users," + orgDN);

			response = sro.execute();
			tupleNode = XPath.getFirstMatch("descendant-or-self::tuple", null, response);

			return tupleNode != 0;
		} finally {
			if (Node.isValidNode(xmlNode)) {
				Node.delete(xmlNode);
				xmlNode = 0;
			}
			if (Node.isValidNode(tupleNode)) {
				Node.delete(tupleNode);
				tupleNode = 0;
			}
			if (Node.isValidNode(response)) {
				Node.delete(response);
				response = 0;
			}
		}
	}

	public static void createUserInLDAP(String userId, String userName, String email) throws Exception {
		String orgDN = BSF.getOrganization();
		String authDN = "cn=authenticated users," + orgDN.substring(orgDN.indexOf(",") + 1);
		String orgName = orgDN.substring(orgDN.indexOf("o=") + 2, orgDN.indexOf(","));

		SOAPRequestObject sro = new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "Update", null, null);

		String inputXML1 = "<tuple><new><entry xmlns=\"http://schemas.cordys.com/1.0/ldap\" dn=\"cn=" + userId + ","
				+ authDN + "\">"
				+ "<objectclass><string>top</string><string>busauthenticationuser</string></objectclass>"
				+ "<cn><string>" + userId + "</string></cn><description><string>" + userName + "</string></description>"
				+ "<osidentity><string>" + userId + "</string></osidentity>" + "<defaultcontext><string>" + orgDN
				+ "</string></defaultcontext>" + "<mail><string>" + email
				+ "</string></mail><authenticationtype><string>domain</string></authenticationtype></entry></new></tuple>";

		String inputXML2 = "<tuple><new><entry xmlns=\"http://schemas.cordys.com/1.0/ldap\" dn=\"cn=" + userId
				+ ",cn=organizational users," + orgDN + "\">" + "<authenticationuser><string>cn=" + userId + ","
				+ authDN + "</string></authenticationuser>" + "<description><string>" + userName
				+ "</string></description>" + "<role><string>cn=everyoneIn" + orgName + ",cn=organizational roles,"
				+ orgDN + "</string></role>" + "<cn><string>" + userId
				+ "</string></cn><objectclass><string>top</string><string>busorganizationaluser</string>"
				+ "<string>busorganizationalobject</string></objectclass></entry></new></tuple>";

		int xmlNode1 = 0;
		int xmlNode2 = 0;
		try {
			xmlNode1 = BSF.getXMLDocument().parseString(inputXML1);
			sro.addParameterAsXml(xmlNode1);
			// sro.setUser("cn=cordysadmin,cn=organizational users," + orgDN);

			sro.execute();

			sro = new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "Update", null, null);

			xmlNode2 = BSF.getXMLDocument().parseString(inputXML2);
			sro.addParameterAsXml(xmlNode2);
			// sro.setUser("cn=cordysadmin,cn=organizational users," + orgDN);

			sro.execute();
		} finally {
			if (Node.isValidNode(xmlNode1)) {
				Node.delete(xmlNode1);
				xmlNode1 = 0;
			}
			if (Node.isValidNode(xmlNode2)) {
				Node.delete(xmlNode2);
				xmlNode2 = 0;
			}
		}
	}

	public static void removeRoleFromLDAP(String roleCode) throws Exception {
		int xmlNode = 0;
		int returnNode = 0;

		String orgDN = BSF.getOrganization();
		String orgName = orgDN.substring(orgDN.indexOf("o=") + 2, orgDN.indexOf(","));

		try {

			SOAPRequestObject sro = new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "SearchLDAP",
					new String[] { "dn" }, new String[] { "cn=" + roleCode + ",cn=organizational roles," + orgDN });

			returnNode = sro.execute();

			returnNode = XPath.getFirstMatch("descendant-or-self::tuple", null, returnNode);

			if (returnNode == 0) {
				return;
			}

			String xml = "<tuple><old><entry dn=\"cn=" + roleCode + ",cn=organizational roles," + orgDN + "\">"
					+ "<role><string>cn=everyoneIn" + orgName + ",cn=organizational roles," + orgDN + "</string></role>"
					+ "<description><string>" + roleCode + "</string></description><cn><string>" + roleCode
					+ "</string></cn>"
					+ "<objectclass><string>top</string><string>busorganizationalrole</string><string>busorganizationalobject</string></objectclass>"
					+ "<busorganizationalroletype><string>Functional</string></busorganizationalroletype>"
					+ "</entry></old></tuple>";

			xmlNode = BSF.getXMLDocument().parseString(xml);

			sro = new SOAPRequestObject("http://schemas.cordys.com/1.0/ldap", "DeleteRecursive", null, null);
			sro.addParameterAsXml(xmlNode);
			// sro.setUser("cn=cordysadmin,cn=organizational users," + orgDN);
			sro.execute();

		} finally {
			if (Node.isValidNode(xmlNode)) {
				Node.delete(xmlNode);
				xmlNode = 0;
			}
			if (Node.isValidNode(returnNode)) {
				Node.delete(returnNode);
				returnNode = 0;
			}
		}
	}

	public static int createFaultMessage(String errorMessage) {
		document = BSF.getXMLDocument();
		int faultNode = document.createElement("Fault");
		Node.createTextElement("FaultString", errorMessage, faultNode);

		return faultNode;
	}

	private static int getTasks(String type, String dn) throws Exception {
		String criteriaXML = "<Criteria><Query>(Task.State='CREATED' OR Task.State='ASSIGNED' OR Task.State='INPROGRESS' OR Task.State='PAUSED' OR Task.State='SUSPENDED')</Query></Criteria>";
		String targetXML = "<Target type=\"" + type.toLowerCase() + "\">" + dn + "</Target>";

		SOAPRequestObject sroObject = new SOAPRequestObject("http://schemas.cordys.com/notification/workflow/1.0",
				"GetTasks", null, null);

		Document xmlDoc = BSF.getXMLDocument();

		sroObject.addParameterAsXml(xmlDoc.parseString(criteriaXML));
		sroObject.addParameterAsXml(xmlDoc.parseString(targetXML));

		return sroObject.execute();
	}

	public static int getTasksCountForRoleOrUser(String type, String dn) throws Exception {

		if (!type.toLowerCase().equals("role") && !type.toLowerCase().equals("user"))
			throw new Exception("Invalid value in Parameter 'type'");

		if ("role".equals(type.toLowerCase())) {
			boolean isRole = LDAPUtility.isRole(dn, BSF.getOrganization());
			if (!isRole) {
				return 0;
			}
		}
		if ("user".equals(type.toLowerCase())) {
			boolean isUser = LDAPUtility.isUser(dn);
			if (!isUser) {
				return 0;
			}
		}

		int response = getTasks(type, dn);
		int firstChild = Node.getFirstChild(response);
		int tupleCount = Node.getNumNextSiblingElements(firstChild);

		return tupleCount;

	}

	public static int getTasksCountForUserRole(String roleCode, String userDN) throws Exception {

		int response = getTasks("user", userDN);

		int[] nodes = XPath.getMatchingNodes(".//Target[contains(., '" + roleCode + "')]", null, response);

		return nodes.length;

	}

	public static BusObjectIterator<MSIG_BRANCH_MASTER> getUniqueApplications() {

		String queryText = "SELECT DISTINCT APPLICATION FROM MSIG_BRANCH_MASTER";

		QueryObject query = new QueryObject(queryText);

		query.setResultClass(MSIG_BRANCH_MASTER.class);

		return query.getObjects();
	}

	public static void savePreference(String userId, String displayName, String defaultDelivery) {
		SOAPRequestObject sroObj = new SOAPRequestObject("http://schemas.cordys.com/1.0/notification", "SavePreference",
				null, null);

		Document doc = null;
		int tupleNode = 0;
		try {
			doc = BSF.getXMLDocument();
			String xmlContent = "<tuple><new><PARTICIPANT><DISTINCT_NAME>cn=" + userId + ",cn=organizational users,"
					+ BSF.getOrganization() + "</DISTINCT_NAME><DISPLAY_NAME>" + displayName
					+ "</DISPLAY_NAME></PARTICIPANT></new></tuple>";

			tupleNode = doc.parseString(xmlContent);
			sroObj.addParameterAsXml(tupleNode);
			// sroObj.setUser("cn=cordysadmin,cn=organizational users," +
			// BSF.getOrganization());

			sroObj.execute();
		} catch (Exception e) {
			logger.error("Failed to Update Participant information");
		} finally {
			if (Node.isValidNode(tupleNode)) {
				Node.delete(tupleNode);
				tupleNode = 0;
			}
			doc = null;
		}
	}

	public static void sendUsernameAndPassword(String userId, String userName, String email, String password) {
		SOAPRequestObject sro = new SOAPRequestObject("http://schemas.opentext.com/masterdata/1.0", "SendEmailsToAgent",
				new String[] { "UserId", "UserName", "Password", "Email" },
				new String[] { userId, userName, password, email });
		sro.execute();
	}
}
