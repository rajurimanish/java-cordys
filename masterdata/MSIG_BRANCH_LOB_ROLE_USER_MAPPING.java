/*
  This class has been generated by the Code Generator
 */

package com.msig.masterdata;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Date;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.busobject.exception.BsfConstraintViolationException;
import com.cordys.cpc.bsf.query.Cursor;
import com.eibus.util.logger.CordysLogger;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;

@SuppressWarnings("deprecation")
public class MSIG_BRANCH_LOB_ROLE_USER_MAPPING extends MSIG_BRANCH_LOB_ROLE_USER_MAPPINGBase {

	private static final CordysLogger logger = CordysLogger.getCordysLogger(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

	@SuppressWarnings("unused")
	private static final String STATUS_INACTIVE = "INACTIVE";
	private static final String STATUS_ACTIVE = "ACTIVE";
	
	private static String getUserDN() {
		return BSF.getUser();
	}

	private static String getOrgDN() {
		return BSF.getOrganization();
	}

	public static String getUserID() {
		String userDN = getUserDN();
		String userId = userDN.substring(3, userDN.indexOf(","));
		return userId;
	}

	public MSIG_BRANCH_LOB_ROLE_USER_MAPPING() {
		this((BusObjectConfig) null);
	}

	public MSIG_BRANCH_LOB_ROLE_USER_MAPPING(BusObjectConfig config) {
		super(config);
	}

	@Override
	public void onBeforeInsert() {
		super.onBeforeInsert();

		if (this.getSTATUS() == null || (this.getSTATUS() != null && this.getSTATUS().equals(""))) {
			this.setSTATUS(STATUS_ACTIVE);
		}

		this.setCREATED_BY(MasterDataUtil.getUserName());
		this.setMODIFIED_BY(MasterDataUtil.getUserName());
		this.setCREATED_ON(new Date());
		this.setMODIFIED_ON(new Date());

		String roleCode = this.getBRANCH_CODE() + "_" + this.getLOB_CODE() + "_" + this.getROLE_CODE();
		String userId = this.getUSER_ID();

		try {
			MasterDataUtil.createRoleAndAssignUserInLDAP(roleCode, userId);

			if (this.getIS_LEAD().equals("Y")) {
				MasterDataUtil.assignTaskAdminRoleToUser(userId);
			} else {
				MasterDataUtil.removeTaskAdminRoleFromUser(userId);
			}

		} catch (Exception e) {
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			// int ind = (errors.toString().length()<500)? errors.toString().length():500;
			// this.setREMARKS(errors.toString().substring(0, ind));
			String errStr = (errors.toString().length() > 500) ? errors.toString().substring(0, 500)
					: errors.toString();
			this.setREMARKS(errStr);
		}

		try {
			// Java level triggers to update AWUS

			// If insert if of type SCH or LCH insert into AWUS table
			if (this.getROLE_CODE().equals("LCH") || this.getROLE_CODE().equals("SCH")
					|| this.getROLE_CODE().equals("LIAS") || this.getROLE_CODE().equals("LIAL")
					|| (this.getLOB_CODE().equals("OTAI") && (this.getROLE_CODE().equals("HEX")
							|| this.getROLE_CODE().equals("HSE") || this.getROLE_CODE().equals("HAM")
							|| this.getROLE_CODE().equals("HMG") || this.getROLE_CODE().equals("HHOD")
							|| this.getROLE_CODE().equals("HAVP") || this.getROLE_CODE().equals("SVP")
							|| this.getROLE_CODE().equals("DCEO") || this.getROLE_CODE().equals("CEO")))) {
				MSIG_AWUS MSIG_AWUS_OBJ = new MSIG_AWUS();
				// Insert into AWUS Table
				MSIG_AWUS_OBJ.setBRANCH(this.getBRANCH_CODE());
				MSIG_AWUS_OBJ.setCONDITION_ID(1);
				MSIG_AWUS_OBJ.setDIFF(0);
				MSIG_AWUS_OBJ.setIS_LAST_SERVED_ITEM(false);
				MSIG_AWUS_OBJ.setIS_ROUND_ROBIN(true);
				MSIG_AWUS_OBJ
						.setITEM_GROUP(this.getBRANCH_CODE() + "_" + this.getLOB_CODE() + "_" + this.getROLE_CODE());
				MSIG_AWUS_OBJ.setITEM_ID(this.getUSER_ID());
				MSIG_AWUS_OBJ.setITEM_NAME(
						MSIG_USERS_MASTER.getUserNameForUserId(this.getUSER_ID()).getStringProperty("USER_FULL_NAME"));
				// Get the count of the AWUS records for given role code and update weight for
				// new record
				Double count = (double) MSIG_AWUS.getCountOfRecordsForRoleCode(
						this.getBRANCH_CODE() + "_" + this.getLOB_CODE() + "_" + this.getROLE_CODE());
				MSIG_AWUS_OBJ.setITEM_WEIGHT(1 / (count + 1));
				MSIG_AWUS_OBJ.setLOB(this.getLOB_CODE());
				MSIG_AWUS_OBJ.setNO_OF_TASKS(0);
				MSIG_AWUS_OBJ.setTOTAL_TASKS(0);
				MSIG_AWUS_OBJ.setPROBABILITY(0);
				MSIG_AWUS_OBJ.setTYPE("claimsHandler");
				MSIG_AWUS_OBJ.insert();
				// Update the weight for all records
				if (count != 0) {

					// Iterate through the records and update the weight for old records
					final BusObjectIterator<MSIG_AWUS> AWUSList = MSIG_AWUS.getRecordsForRoleCode(
							this.getBRANCH_CODE() + "_" + this.getLOB_CODE() + "_" + this.getROLE_CODE());
					while (AWUSList.hasMoreElements()) {
						MSIG_AWUS AWUSObj = (MSIG_AWUS) AWUSList.nextElement();
						AWUSObj.setITEM_WEIGHT(1 / (count + 1));
						AWUSObj.update();

					}
				}
			}

		} catch (Exception e) {

		}

	}

	@Override
	public void onBeforeUpdate() {
		super.onBeforeUpdate();
		this.setMODIFIED_BY(MasterDataUtil.getUserName());
		this.setMODIFIED_ON(new Date());

		String roleCode = this.getBRANCH_CODE() + "_" + this.getLOB_CODE() + "_" + this.getROLE_CODE();
		String userId = this.getUSER_ID();

		int oldNode = Node.clone(super._getObjectDataForOld(), true);

		String oldUserId = Node.getData(XPath.getFirstMatch("descendant-or-self::USER_ID", null, oldNode));

		try {
			MasterDataUtil.createRoleAndAssignUserInLDAP(roleCode, userId);
			MasterDataUtil.removeUserFromRoleInLDAP(roleCode, oldUserId);

			if (this.getIS_LEAD().equals("Y")) {
				MasterDataUtil.assignTaskAdminRoleToUser(userId);
			} else {
				MasterDataUtil.removeTaskAdminRoleFromUser(userId);
			}
		} catch (Exception e) {
			StringWriter errors = new StringWriter();
			e.printStackTrace(new PrintWriter(errors));
			// int ind = (errors.toString().length()<500)? errors.toString().length():500;
			// this.setREMARKS(errors.toString().substring(0, ind));
			String errStr = (errors.toString().length() > 500) ? errors.toString().substring(0, 500)
					: errors.toString();
			this.setREMARKS(errStr);
		} finally {
			if (Node.isValidNode(oldNode)) {
				Node.delete(oldNode);
				oldNode = 0;
			}
		}
	}

	@Override
	public void onAfterDelete() {
		super.onAfterDelete();

		String roleCode = this.getBRANCH_CODE() + "_" + this.getLOB_CODE() + "_" + this.getROLE_CODE();

		int oldNode = Node.clone(super._getObjectDataForOld(), true);

		String oldUserId = Node.getData(XPath.getFirstMatch("descendant-or-self::USER_ID", null, oldNode));

		try {
			MasterDataUtil.removeUserFromRoleInLDAP(roleCode, oldUserId);
		} catch (Exception e) {
			throw new BsfConstraintViolationException("Exception occured while removing the role from cordys", e);
			// TODO store this info somewhere in table for further use
		} finally {
			if (Node.isValidNode(oldNode)) {
				Node.delete(oldNode);
				oldNode = 0;
			}
		}

		try {
			// Java level triggers to update AWUS

			// If Delete if of type SCH or LCH insert into AWUS table
			if (this.getROLE_CODE().equals("LCH") || this.getROLE_CODE().equals("SCH")
					|| this.getROLE_CODE().equals("LIAS") || this.getROLE_CODE().equals("LIAL")
					|| (this.getLOB_CODE().equals("OTAI") && (this.getROLE_CODE().equals("HEX")
							|| this.getROLE_CODE().equals("HSE") || this.getROLE_CODE().equals("HAM")
							|| this.getROLE_CODE().equals("HMG") || this.getROLE_CODE().equals("HHOD")
							|| this.getROLE_CODE().equals("HAVP") || this.getROLE_CODE().equals("SVP")
							|| this.getROLE_CODE().equals("DCEO") || this.getROLE_CODE().equals("CEO")))) {
				MSIG_AWUS.deleteRecords(this.getBRANCH_CODE() + "_" + this.getLOB_CODE() + "_" + this.getROLE_CODE(),
						this.getUSER_ID());
				// Get the count of the AWUS records for given role code
				Double count = (double) MSIG_AWUS.getCountOfRecordsForRoleCode(
						this.getBRANCH_CODE() + "_" + this.getLOB_CODE() + "_" + this.getROLE_CODE());
				if (count != 0) {
					// Iterate through the records and update the weight
					final BusObjectIterator<MSIG_AWUS> AWUSList = MSIG_AWUS.getRecordsForRoleCode(
							this.getBRANCH_CODE() + "_" + this.getLOB_CODE() + "_" + this.getROLE_CODE());
					while (AWUSList.hasMoreElements()) {
						MSIG_AWUS AWUSObj = (MSIG_AWUS) AWUSList.nextElement();
						AWUSObj.setITEM_WEIGHT(1 / count);
						AWUSObj.update();
					}
				}
			}
		} catch (Exception e) {

		}
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_ROLE_USER_MAPPING> getUsersForBranchLOBAndRoleCode(
			String BRANCH_CODE, String LOB_CODE, String ROLE_CODE, String APPLICATION) {

		String queryText = "SELECT DISTINCT A.*, B.BRANCH_NAME, C.LOB_NAME, D.ROLE_NAME, "
				+ "E.USER_FULL_NAME FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING A, "
				+ "MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C, MSIG_ROLES_MASTER D,"
				+ " MSIG_USERS_MASTER E WHERE A.BRANCH_CODE = :BRANCH_CODE "
				+ "AND A.LOB_CODE = :LOB_CODE AND A.ROLE_CODE = :ROLE_CODE AND A.APPLICATION = :APPLICATION AND "
				+ " A.BRANCH_CODE = B.BRANCH_CODE AND A.LOB_CODE = C.LOB_CODE "
				+ "AND A.ROLE_CODE = D.ROLE_CODE AND E.USER_ID = A.USER_ID AND A.APPLICATION = B.APPLICATION "
				+ "AND A.APPLICATION = C.APPLICATION AND A.APPLICATION = D.APPLICATION "
				+ "AND A.APPLICATION = B.APPLICATION";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING,
				BRANCH_CODE);
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.LOB_CODE", QueryObject.PARAM_STRING,
				LOB_CODE);
		query.addParameter("ROLE_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.ROLE_CODE", QueryObject.PARAM_STRING,
				ROLE_CODE);
		query.addParameter("APPLICATION", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.APPLICATION", QueryObject.PARAM_STRING,
				APPLICATION);

		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_ROLE_USER_MAPPING> getActiveUsersForBranchLOBAndRoleCode(
			String BRANCH_CODE, String LOB_CODE, String ROLE_CODE, String APPLICATION) {

		/*
		 * String queryText =
		 * "SELECT DISTINCT A.*, B.BRANCH_NAME, C.LOB_NAME, D.ROLE_NAME, " +
		 * "E.USER_FULL_NAME FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING A, " +
		 * "MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C, MSIG_ROLES_MASTER D," +
		 * " MSIG_USERS_MASTER E WHERE A.BRANCH_CODE = :BRANCH_CODE " +
		 * "AND A.LOB_CODE = :LOB_CODE AND A.ROLE_CODE = :ROLE_CODE AND A.APPLICATION = :APPLICATION AND "
		 * + " A.BRANCH_CODE = B.BRANCH_CODE AND A.LOB_CODE = C.LOB_CODE " +
		 * "AND A.ROLE_CODE = D.ROLE_CODE AND E.USER_ID = A.USER_ID AND A.APPLICATION = B.APPLICATION "
		 * + "AND A.APPLICATION = C.APPLICATION AND A.APPLICATION = D.APPLICATION " +
		 * "AND A.APPLICATION = B.APPLICATION AND E.STATUS = 'ACTIVE'";
		 */
		// added OutOfOffice (Handling INACTIVE users with currentDate < out_from_date)
		String queryText = "SELECT DISTINCT A.*, B.BRANCH_NAME, C.LOB_NAME, D.ROLE_NAME, "
				+ "E.USER_FULL_NAME FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING A, "
				+ "MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C, MSIG_ROLES_MASTER D,"
				+ " MSIG_USERS_MASTER E WHERE A.BRANCH_CODE = :BRANCH_CODE "
				+ "AND A.LOB_CODE = :LOB_CODE AND A.ROLE_CODE = :ROLE_CODE AND A.APPLICATION = :APPLICATION AND "
				+ " A.BRANCH_CODE = B.BRANCH_CODE AND A.LOB_CODE = C.LOB_CODE "
				+ "AND A.ROLE_CODE = D.ROLE_CODE AND E.USER_ID = A.USER_ID AND A.APPLICATION = B.APPLICATION "
				+ "AND A.APPLICATION = C.APPLICATION AND A.APPLICATION = D.APPLICATION "
				+ "AND A.APPLICATION = B.APPLICATION AND (E.STATUS = 'ACTIVE' OR (E.STATUS = 'INACTIVE' AND E.OUT_FROM_DATE IS NOT NULL AND CONVERT(DATE,GETDATE(),102) < CONVERT(DATE,E.OUT_FROM_DATE,102)))";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING,
				BRANCH_CODE);
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.LOB_CODE", QueryObject.PARAM_STRING,
				LOB_CODE);
		query.addParameter("ROLE_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.ROLE_CODE", QueryObject.PARAM_STRING,
				ROLE_CODE);
		query.addParameter("APPLICATION", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.APPLICATION", QueryObject.PARAM_STRING,
				APPLICATION);

		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<MSIG_BRANCH_MASTER> getBranchesForUser(String USER_ID) {
		String queryText = "SELECT DISTINCT A.BRANCH_CODE, BRANCH_NAME FROM MSIG_BRANCH_MASTER A, "
				+ "MSIG_BRANCH_LOB_ROLE_USER_MAPPING B WHERE A.BRANCH_CODE = B.BRANCH_CODE AND B.USER_ID = :USER_ID";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("USER_ID", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.USER_ID", QueryObject.PARAM_STRING, USER_ID);
		query.setResultClass(MSIG_BRANCH_MASTER.class);

		return query.getObjects();
	}

	public static BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> getUsersForBranchLobByApplication(
			String BRANCH_CODE, String LOB_CODE, String ROLE_CODE) {

		String queryText = "SELECT APPLICATION FROM MSIG_ROLES_MASTER WHERE ROLE_CODE = :ROLE_CODE";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("ROLE_CODE", "MSIG_ROLES_MASTER.ROLE_CODE", QueryObject.PARAM_STRING, ROLE_CODE);

		query.setResultClass(MSIG_ROLES_MASTER.class);
		MSIG_ROLES_MASTER roleObject = (MSIG_ROLES_MASTER) query.getObject();

		StringBuffer roleApplication = new StringBuffer();
		if (roleObject.getAPPLICATION().equals("BOTH")) {
			roleApplication.append("'BOTH','CMS','BMS'");
		} else {
			roleApplication.append("'" + roleObject.getAPPLICATION() + "'");
		}

		queryText = "SELECT A.BRANCH_CODE, A.LOB_CODE, A.ROLE_CODE, A.USER_ID, E.USER_FULL_NAME, "
				+ "D.APPLICATION FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING A, "
				+ "MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C, MSIG_ROLES_MASTER D, MSIG_USERS_MASTER E "
				+ "WHERE A.BRANCH_CODE = :BRANCH_CODE AND A.LOB_CODE = :LOB_CODE AND "
				+ "A.ROLE_CODE = :ROLE_CODE AND A.BRANCH_CODE = B.BRANCH_CODE AND "
				+ "A.LOB_CODE = C.LOB_CODE AND A.ROLE_CODE = D.ROLE_CODE AND A.USER_ID = E.USER_ID AND D.APPLICATION IN ("
				+ roleApplication.toString() + ")";

		query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING,
				BRANCH_CODE);
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.LOB_CODE", QueryObject.PARAM_STRING,
				LOB_CODE);
		query.addParameter("ROLE_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.ROLE_CODE", QueryObject.PARAM_STRING,
				ROLE_CODE);

		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> getRolesForBranchLOBUser(String BRANCH_CODE,
			String LOB_CODE, String USER_ID, String APPLICATION, String BUSINESS_FUNCTION) {
		String queryText = "SELECT TOP(1) A.BRANCH_CODE, A.LOB_CODE, A.ROLE_CODE, B.SEQUENCE FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING A JOIN MSIG_ROLES_PRIORITY_SEQ B ON A.APPLICATION = B.APPLICATION AND A.ROLE_CODE = B.ROLE_CODE WHERE (B.BRANCH LIKE :BRANCH_CODE OR B.BRANCH = 'ANY') AND B.LOB_CODE LIKE :LOB_CODE AND A.LOB_CODE LIKE :LOB_CODE AND B.BUSINESS_FUNCTION = :BUSINESS_FUNCTION AND A.APPLICATION = :APPLICATION AND USER_ID = :USER_ID AND BRANCH_CODE LIKE :BRANCH_CODE ORDER BY SEQUENCE DESC";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING,
				"%" + BRANCH_CODE + "%");
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.LOB_CODE", QueryObject.PARAM_STRING,
				"%" + LOB_CODE + "%");
		query.addParameter("USER_ID", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.USER_ID", QueryObject.PARAM_STRING, USER_ID);

		query.addParameter("LOB_CODE", "MSIG_ROLES_PRIORITY_SEQ.LOB_CODE", QueryObject.PARAM_STRING,
				"%" + LOB_CODE + "%");
		query.addParameter("APPLICATION", "MSIG_ROLES_PRIORITY_SEQ.APPLICATION", QueryObject.PARAM_STRING, APPLICATION);
		query.addParameter("BUSINESS_FUNCTION", "MSIG_ROLES_PRIORITY_SEQ.BUSINESS_FUNCTION", QueryObject.PARAM_STRING,
				BUSINESS_FUNCTION);

		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

		BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> busObj = query.getObjects();
//Redmine 818 Aut creation of AH role removed. Added validation logic before submitting to AH from frontend.
		/*
		 * if (!busObj.hasMoreElements() && "BMS".equals(APPLICATION)) {
		 * MSIG_BRANCH_LOB_ROLE_USER_MAPPING returnObj = new
		 * MSIG_BRANCH_LOB_ROLE_USER_MAPPING(); returnObj.setAPPLICATION(APPLICATION);
		 * returnObj.setROLE_CODE("AH1"); returnObj.setBRANCH_CODE(BRANCH_CODE);
		 * returnObj.setLOB_CODE(LOB_CODE); returnObj.setUSER_ID(USER_ID);
		 * returnObj.insert();
		 * 
		 * busObj = null;
		 * 
		 * queryText =
		 * "SELECT * FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING WHERE APPLICATION = '" +
		 * APPLICATION + "' AND BRANCH_CODE = '" + BRANCH_CODE + "' AND LOB_CODE = '" +
		 * LOB_CODE + "' AND ROLE_CODE = 'AH1' AND USER_ID = '" + USER_ID + "'";
		 * 
		 * query = new QueryObject(queryText);
		 * 
		 * query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);
		 * 
		 * busObj = query.getObjects(); }
		 */
		return busObj;
	}

	public static int generateBranchLOBRoleUserReport(int timezoneOffset, String application) {

		String queryText = "SELECT DISTINCT A.*, B.BRANCH_NAME, C.LOB_NAME, D.ROLE_NAME, E.USER_FULL_NAME "
				+ "FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING A, MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C, "
				+ "MSIG_ROLES_MASTER D, MSIG_USERS_MASTER E WHERE A.BRANCH_CODE = B.BRANCH_CODE AND "
				+ "A.LOB_CODE = C.LOB_CODE AND A.ROLE_CODE = D.ROLE_CODE AND A.USER_ID = E.USER_ID "
				+ "AND A.APPLICATION = B.APPLICATION AND A.APPLICATION = C.APPLICATION "
				+ "AND A.APPLICATION = D.APPLICATION AND A.APPLICATION = B.APPLICATION AND A.APPLICATION = :APPLICATION";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("APPLICATION", "A.APPLICATION", QueryObject.PARAM_STRING, application);
		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

		BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> objects = query.getObjects();

		if (objects == null) {
			return MasterDataUtil.createFaultMessage("No records in DB to download excel file");
		}

		String[] paramNames = { "key" };
		String[] paramValues = { "/MSIG/configurations/shared-path-config.xml" };
		String sheetName = "Branch LOB Role User Report";

		int response = MasterDataUtil.executeSOAPRequest("http://schemas.cordys.com/1.0/xmlstore", "GetXMLObject",
				paramNames, paramValues);

		if (response == 0) {
			return MasterDataUtil.createFaultMessage("Shared Path Configuration file is missing");
		}

		String sharedFilePath = Node.getData(XPath
				.getFirstMatch("descendant-or-self::Configuration/descendant-or-self::SharedPath", null, response));
		String[] sheetColumns = { "Application", "Branch Code", "Branch Name", "LOB Code", "LOB Name", "Role Code",
				"Role Name", "User Id", "User Name", "Task Admin", "Status", "Created By", "Created On", "Modified By",
				"Modified On" };

		HSSFWorkbook workbookObject = new HSSFWorkbook();
		try {
			workbookObject = GenerateReport.getWorkbookObjectNew(objects, sheetName, sheetColumns,
					new String[] { "APPLICATION", "BRANCH_CODE", "BRANCH_NAME", "LOB_CODE", "LOB_NAME", "ROLE_CODE",
							"ROLE_NAME", "USER_ID", "USER_FULL_NAME", "IS_LEAD", "STATUS", "CREATED_BY", "CREATED_ON",
							"MODIFIED_BY", "MODIFIED_ON" },
					new String[] { "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING",
							"STRING", "STRING", "STRING", "STRING", "DATE", "STRING", "DATE" },
					timezoneOffset);

			HSSFSheet sheet = workbookObject.getSheet(sheetName);
			int columnIndex = 0;
			while (columnIndex < sheetColumns.length) {
				sheet.autoSizeColumn(columnIndex++);
			}
		} catch (Exception e) {
			logger.error("Exception in generateBranchLOBRoleUserReport " + e.getMessage());
		}

		return GenerateReport.writeExcelFile(workbookObject, sharedFilePath, sheetName);
	}

	public static BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> getUsersForRoles(int request, Cursor cursor) {

		int[] roleNodes = XPath.getMatchingNodes("descendant-or-self::role", null, request);
		int userIdNode = XPath.getFirstMatch("descendant-or-self::userId", null, request);
		String appType = Node.getData(XPath.getFirstMatch("descendant-or-self::application", null, request));

		StringBuffer branches = new StringBuffer("");
		StringBuffer lobs = new StringBuffer("");
		StringBuffer roles = new StringBuffer("");

		for (int index = 0; index < roleNodes.length; index++) {
			int roleNode = roleNodes[index];
			String role = Node.getData(roleNode);
			String[] combination = role.split("_");

			branches.append(combination[0] + ",");
			lobs.append(combination[1] + ",");
			roles.append(combination[2] + ",");
		}

		String branch = branches.substring(0, branches.lastIndexOf(","));
		String lob = lobs.substring(0, lobs.lastIndexOf(","));
		String role = roles.substring(0, roles.lastIndexOf(","));

		return _getUsersForRoles(branch, lob, role, appType, userIdNode, cursor);

	}

	private static BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> _getUsersForRoles(String branch, String lob,
			String role, String application, int userIdNode, Cursor cursor) {

		String userId = Node.getData(userIdNode, "");

		/*
		 * commented below query to add additional functionality to check OutOfOffice
		 * users. String queryText =
		 * "SELECT DISTINCT CONCAT(BRANCH_CODE, '_', LOB_CODE, '_', ROLE_CODE) AS ROLE_CODE, A.USER_ID, USER_FULL_NAME FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING A, MSIG_USERS_MASTER B WHERE BRANCH_CODE IN (:BRANCH_CODE) AND LOB_CODE IN (:LOB_CODE) AND ROLE_CODE IN (:ROLE_CODE) AND A.USER_ID = B.USER_ID AND A.APPLICATION = :APPLICATION AND B.STATUS = 'ACTIVE'"
		 * ;
		 */

		// added OutOfOffice (Handling INACTIVE users with currentDate < out_from_date)
		// -- SAF 2017-1086
		String queryText = "SELECT DISTINCT CONCAT(BRANCH_CODE, '_', LOB_CODE, '_', ROLE_CODE) AS ROLE_CODE, A.USER_ID, USER_FULL_NAME FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING A, MSIG_USERS_MASTER B WHERE BRANCH_CODE IN (:BRANCH_CODE) AND LOB_CODE IN (:LOB_CODE) AND ROLE_CODE IN (:ROLE_CODE) AND A.USER_ID = B.USER_ID AND A.APPLICATION = :APPLICATION AND (B.STATUS = 'ACTIVE' OR (B.STATUS = 'INACTIVE' AND B.OUT_FROM_DATE IS NOT NULL AND CONVERT(DATE,GETDATE(),102) < CONVERT(DATE,B.OUT_FROM_DATE,102)))";

		if (!"".equals(userId)) {
			queryText += " AND A.USER_ID != :USER_ID";
		}

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING,
				branch);
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.LOB_CODE", QueryObject.PARAM_STRING, lob);
		query.addParameter("ROLE_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.ROLE_CODE", QueryObject.PARAM_STRING, role);
		query.addParameter("APPLICATION", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.APPLICATION", QueryObject.PARAM_STRING,
				application);

		if (!"".equals(userId)) {
			query.addParameter("USER_ID", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.USER_ID", QueryObject.PARAM_STRING,
					userId);
		}

		query.setCursor(cursor);
		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> getRolesForUser(String USER_ID) {
		String queryText = "SELECT DISTINCT BRANCH_CODE, LOB_CODE, ROLE_CODE,BRANCH_CODE+'_'+LOB_CODE+'_'+ROLE_CODE AS ROLE  FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING WHERE USER_ID = :USER_ID";

		QueryObject query = new QueryObject(queryText);

		query.addParameter("USER_ID", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.USER_ID", QueryObject.PARAM_STRING, USER_ID);

		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_ROLE_USER_MAPPING> getAutodelegationRolesForUser(
			String USER_ID, String APP) {
		String queryText = "SELECT DISTINCT BRANCH_CODE, LOB_CODE, ROLE_CODE,BRANCH_CODE+'_'+LOB_CODE+'_'+ROLE_CODE AS ROLE  FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING WHERE USER_ID = :USER_ID ";
		if ("BMS".equals(APP)) {

			queryText += " AND ROLE_CODE NOT IN ('CLN', 'CLNF', 'ShadowCH')";
		} else {
			queryText += " AND ROLE_CODE IN  ('SCH', 'LCH', 'CORP')";
		}

		QueryObject query = new QueryObject(queryText);

		query.addParameter("USER_ID", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.USER_ID", QueryObject.PARAM_STRING, USER_ID);

		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_ROLE_USER_MAPPING> getUsersByBranchAndLOB(
			String LOB_CODE, String BRANCH_CODE) {
		String queryText = "SELECT DISTINCT USER_ID FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING WHERE LOB_CODE = :LOB_CODE AND BRANCH_CODE = :BRANCH_CODE AND APPLICATION = 'CMS' AND STATUS = 'ACTIVE'";
		QueryObject query = new QueryObject(queryText);
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.LOB_CODE", QueryObject.PARAM_STRING,
				LOB_CODE);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING,
				BRANCH_CODE);
		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);
		return query.getObjects();
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_ROLE_USER_MAPPING> searchMsigBranchLobRoleUserByUserId(
			String USER_ID, String APPLICATION, String BRANCH_CODE, String LOB_CODE) {
		String queryText = "select * from MSIG_BRANCH_LOB_ROLE_USER_MAPPING where USER_ID = :USER_ID";
		if (APPLICATION != null && !APPLICATION.equals(""))
			queryText += " AND APPLICATION = :APPLICATION";
		if (BRANCH_CODE != null && !BRANCH_CODE.equals(""))
			queryText += " AND BRANCH_CODE = :BRANCH_CODE";
		if (LOB_CODE != null && !LOB_CODE.equals(""))
			queryText += " AND LOB_CODE = :LOB_CODE";
		QueryObject query = new QueryObject(queryText);

		query.addParameter("USER_ID", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.USER_ID", QueryObject.PARAM_STRING, USER_ID);
		query.addParameter("APPLICATION", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.APPLICATION", QueryObject.PARAM_STRING,
				APPLICATION);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING,
				BRANCH_CODE);
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_ROLE_USER_MAPPING.LOB_CODE", QueryObject.PARAM_STRING,
				LOB_CODE);
		query.setResultClass(MSIG_BRANCH_LOB_ROLE_USER_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> getMSIGAppRoleDNs(String application) {
		String userId = getUserID();
		String queryText = "SELECT 'cn=' + BRANCH_CODE + '_' + LOB_CODE + '_' + ROLE_CODE + ',cn=organizational roles,"
				+ getOrgDN() + "' AS roleDN FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING WITH (NOLOCK) WHERE USER_ID = :userId AND APPLICATION = :application";
		QueryObject query = new QueryObject(queryText);
		query.addParameter("userId", "USER_ID", QueryObject.PARAM_STRING, userId);
		query.addParameter("application", "APPLICATION", QueryObject.PARAM_STRING, application);
		return query.getObjects();
	}
	
	public static boolean isReviewCoordinator() {
		String userId = getUserID();
		String queryText = "SELECT role FROM (SELECT BRANCH_CODE + '_' + LOB_CODE + '_' + ROLE_CODE AS role FROM MSIG_BRANCH_LOB_ROLE_USER_MAPPING WITH (NOLOCK) "
				+ "WHERE USER_ID = :userId AND APPLICATION = :application) AS ROLES WHERE role = 'CLAIMS_REVIEWER_COORDINATOR'";
		QueryObject query = new QueryObject(queryText);
		query.addParameter("userId", "USER_ID", QueryObject.PARAM_STRING, userId);
		query.addParameter("application", "APPLICATION", QueryObject.PARAM_STRING, "CMS");
		return (query.getObject() != null) ? true : false;
	}
}
