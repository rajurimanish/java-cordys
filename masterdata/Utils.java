/*
  This class has been generated by the Code Generator
*/

package com.msig.masterdata;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.text.ParseException;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;

import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Calendar;
import java.util.Locale;

public class Utils extends UtilsBase
{
	public static CordysLogger logger = CordysLogger.getCordysLogger(Utils.class);
    public Utils()
    {
        this((BusObjectConfig)null);
    }

    public Utils(BusObjectConfig config)
    {
        super(config);
    }

    public static BusObjectIterator<com.msig.masterdata.Utils> getUtilsObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public static String populateMailContent(int businessObject, int template, String mailContent)
    {
       String attrName,attrVal;
		String contentVal = "";
		//Reading values from tempalte xml
		int placeholderNodes[] = XPath.getMatchingNodes(".//PlaceHolder", null, template);
		
		for (int i=0;i < placeholderNodes.length;i++) {
			//int fieldNode = 0;
			//fieldNode = Node.getFirstChild(placeholderNodes[i]);
			attrName = "<"+Node.getAttribute(placeholderNodes[i], "Name")+">";
			attrVal = Node.getAttribute(placeholderNodes[i], "XPath");
			
			// fetching value from Business object xml by mathching XPath			
			contentVal = Node.writeToString(XPath.getFirstMatch(attrVal.trim(), null, businessObject),false);
			//logger.log(Severity.ERROR, "Content Value" +contentVal+",attrName "+attrName);
				if(attrName.equals("<ExpiryDate>") && !contentVal.equals("")){
					//logger.log(Severity.ERROR, "Expiry Date" +contentVal);
					contentVal = contentVal.substring(8)+"/"+contentVal.substring(5,7)+"/"+contentVal.substring(0,4);
				}
					
			mailContent = mailContent.replaceAll(attrName, contentVal);
		}
		
		return mailContent;
    }
    public static int getAge(int year,int month,int dayOfMonth){
		LocalDate today = LocalDate.now();
		LocalDate birthday = LocalDate.of(year, month, dayOfMonth);
		Period p = Period.between(birthday, today);
		birthday.plusYears(1);
		return (p.getYears());
    }
    
    public static String addNoOfDays(int year,int month,int dayOfMonth,int value,String type){
		LocalDate date = LocalDate.of(year, month, dayOfMonth);
		if(type.equalsIgnoreCase("Years")) {
			//return date.plusYears(value).toString();
			date = date.plusYears(value);
			//Leap year validation for SAF # MYS-2019-0210 - Leap Year issue in BMS System - renewal case
			if( date.getYear()%4==0 && date.getMonthValue() ==2 && date.getDayOfMonth() ==28 ) {
				date = date.plusDays(1);
			}
			return date.toString();
		} else if(type.equalsIgnoreCase("Days"))
			return date.plusDays(value).toString();
		else return "";
    }

      public static String addNoOfDaysForLeapYear(int year,int month,int dayOfMonth,int value,String type){
			LocalDate date = LocalDate.of(year, month, dayOfMonth);
			if(type.equalsIgnoreCase("Years")) {
				date = date.plusYears(value);
				//Leap year validation for SAF # MYS-2019-0210 - Leap Year issue in BMS System - renewal case
				if( date.getYear()%4==0 && date.getMonthValue() ==2 && date.getDayOfMonth() ==28 ) {
					date = date.plusDays(1);
				}
				return date.toString();
				//return date.plusYears(value).toString();
			}else if(type.equalsIgnoreCase("Days"))
				return date.plusDays(value).toString();
			else return "";
	}
    
	public static String dateformat(String year,String month,String day){
	  SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
	  SimpleDateFormat reFormatter = new SimpleDateFormat("yyyy-MM-dd");
		try {  
			return reFormatter.format(formatter.parse(""+day+"/"+month+"/"+year+""));  
		} catch (ParseException e) {
			
		} 
		
		return null;
	}
	
    public static boolean isDateValid(String dateToValidate, String dateFromat){

		if(dateToValidate == null){
			return false;
		}
		SimpleDateFormat sdf = new SimpleDateFormat(dateFromat);
		sdf.setLenient(false);
		try {
			Date date = sdf.parse(dateToValidate);
		} catch (ParseException e) {
			return false;
		}
		return true;
	}
    
	public static String getDateDiffInDays(String startDate,String endDate,String dateFormat){
		String diffInDays="";
		SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
		try {
			long diff = sdf.parse(endDate).getTime() - sdf.parse(startDate).getTime();
			diffInDays = (diff / (24 * 60 * 60 * 1000))+"";
			} 
		catch (ParseException e) {
			return diffInDays;
		}
		return diffInDays;
	}
	
	public static String getDateDiffInYears(String startDate,String endDate,String dateFormat){
		String noOfYears="";
		int diff =0;
		SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
		try {
			Calendar a = getCalendar(sdf.parse(startDate));
			Calendar b = getCalendar(sdf.parse(endDate));
			diff = b.get(Calendar.YEAR) - a.get(Calendar.YEAR);
			if (a.get(Calendar.DAY_OF_YEAR) > b.get(Calendar.DAY_OF_YEAR)) {
				diff--;
			}	
		} 
		catch (ParseException e) {
			return noOfYears;
		}
		return noOfYears+diff;
	}

	public static Calendar getCalendar(Date date) {
		Calendar cal = Calendar.getInstance(Locale.CHINA);
		cal.setTime(date);
		return cal;
	}

	public static String getDateDiffInMonths(String startDate, String endDate, String dateFormat){
		String noOfMonths = "0";
		try {
			SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);

			Calendar sDate = Calendar.getInstance();
			sDate.setTime(sdf.parse(startDate));
			
			Calendar eDate = (Calendar) sDate.clone(); //Calendar eDate = Calendar.getInstance();				
			eDate.setTime(sdf.parse(endDate));
			
			/*
			System.out.println("Date a: "+ sDate.get(Calendar.YEAR) +"-"+(sDate.get(Calendar.MONTH)+1)+"-"+sDate.get(Calendar.DAY_OF_MONTH));
			System.out.println("Date b: "+ eDate.get(Calendar.YEAR) +"-"+(eDate.get(Calendar.MONTH)+1)+"-"+eDate.get(Calendar.DAY_OF_MONTH));
			
			int yearsDiff = eDate.get(Calendar.YEAR) - sDate.get(Calendar.YEAR);
			int monthsDiff = eDate.get(Calendar.MONTH) - sDate.get(Calendar.MONTH);
			
			int durationInMonths = yearsDiff *12 + monthsDiff;
			System.out.println("Duration in months: "+durationInMonths);
			*/
			
			LocalDate sLocalDate 	= LocalDate.of(sDate.get(Calendar.YEAR), (sDate.get(Calendar.MONTH)+1), sDate.get(Calendar.DAY_OF_MONTH));
			LocalDate eLocalDate 	= LocalDate.of(eDate.get(Calendar.YEAR), (eDate.get(Calendar.MONTH)+1), eDate.get(Calendar.DAY_OF_MONTH));
			
			long diffInMonths = ChronoUnit.MONTHS.between(sLocalDate, eLocalDate);
			long diffInYears = ChronoUnit.YEARS.between(sLocalDate, eLocalDate);
			diffInMonths = diffInMonths + 1;
			noOfMonths = ""+diffInMonths; 
		} 
		catch (Exception e) {
			return noOfMonths;
		}
		
		return noOfMonths;
	}

      public static String checkRiskClassificationForMP(String startDate,String endDate,String dateFormat){
		String valid = "Standard";//Standard
	
		DateFormat df = new SimpleDateFormat(dateFormat);
		
		Calendar calStart = Calendar.getInstance();
		calStart.set(Calendar.HOUR, 0);
		calStart.set(Calendar.MINUTE, 0);
		calStart.set(Calendar.SECOND, 0);
		calStart.set(Calendar.MILLISECOND, 0);
		
		Calendar calEnd = Calendar.getInstance();
		calEnd.set(Calendar.HOUR, 0);
		calEnd.set(Calendar.MINUTE, 0);
		calEnd.set(Calendar.SECOND, 0);
		calEnd.set(Calendar.MILLISECOND, 0);
		
		Calendar calTargetYear = Calendar.getInstance();
		calTargetYear.set(Calendar.HOUR, 0);
		calTargetYear.set(Calendar.MINUTE, 0);
		calTargetYear.set(Calendar.SECOND, 0);
		calTargetYear.set(Calendar.MILLISECOND, 0);
		
		try {
			calTargetYear.setTime(df.parse(startDate));
			calTargetYear.add(Calendar.YEAR, 2);
			calStart.setTime(df.parse(startDate));
			calEnd.setTime(df.parse(endDate));
			
			if( calStart.get(Calendar.YEAR)%4 == 0 && calStart.get(Calendar.MONTH)+1 == 2 && calStart.get(Calendar.DATE) == 29 ) {
				calTargetYear.add(Calendar.DATE, 1);
			}
			if( calEnd.getTime().compareTo(calTargetYear.getTime()) >= 0 ) {
				valid =  "Referred";
				return valid;
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		return valid;
	}
public static String addYearToEffectiveDate(int year,int month,int dayOfMonth,int value,String type){
            LocalDate date = LocalDate.of(year, month, dayOfMonth);
            if(type.equalsIgnoreCase("Years")) {
                  //return date.plusYears(value).toString();
                  date = date.plusYears(value);
                  date = date.minusDays(1);
                  if( date.getYear()%4==0 && date.getMonthValue() ==2 && date.getDayOfMonth() ==28 ) {
                        date = date.plusDays(1);
                  }
                  return date.toString();
            } 
            else return "";
    }
	
    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }

}
