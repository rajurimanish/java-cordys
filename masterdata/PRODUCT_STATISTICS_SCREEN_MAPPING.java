/*
  This class has been generated by the Code Generator
 */

package com.msig.masterdata;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.busobject.exception.BsfRuntimeException;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;

public class PRODUCT_STATISTICS_SCREEN_MAPPING extends
		PRODUCT_STATISTICS_SCREEN_MAPPINGBase {
	public PRODUCT_STATISTICS_SCREEN_MAPPING() {
		this((BusObjectConfig) null);
	}

	public PRODUCT_STATISTICS_SCREEN_MAPPING(BusObjectConfig config) {
		super(config);
	}

	public static BusObjectIterator<com.cordys.cpc.bsf.busobject.BusObject> getListOfProducts(
			int ADVANCE_CONFIG_XML, com.cordys.cpc.bsf.query.Cursor cursor) {

		String returnQueryText = "";

		String colName = null;
		String colValue = null;
		int inpXML = -1;
		String condition = null;

		returnQueryText = "SELECT distinct product_type,product_name from PRODUCT_STATISTICS_SCREEN_MAPPING";

		try {

			String op = null;
			String opValue = null;
			if (ADVANCE_CONFIG_XML > 0) {
				Map<String, String> opMap = new HashMap<String, String>();
				opMap.put("EQ", "=");
				opMap.put("NTEQ", "!=");
				opMap.put("GT", ">");
				opMap.put("GTEQ", ">=");
				opMap.put("LT", "<");
				opMap.put("LTEQ", "<=");
				opMap.put("LIKE", " LIKE ");
				opMap.put("GROUP", " GROUP BY ");
				opMap.put("ORDER", " ORDER BY ");
				opMap.put("A", " ASC ");
				opMap.put("D", " DESC ");
				opMap.put("IS", " IS ");
				opMap.put("OPNPRNTHS", " ( ");
				opMap.put("CLSPRNTHS", " ) ");

				inpXML = ADVANCE_CONFIG_XML;

				if (inpXML > 0) {
					int xmlColumnsFilter[] = XPath.getMatchingNodes(
							".//*[local-name()='FILTER']", null, inpXML);
					int xmlColumnsSort[] = XPath.getMatchingNodes(
							".//*[local-name()='SORTFIELD']", null, inpXML);
					List<Integer> whereClauseConditions = new ArrayList<Integer>();
					List<Integer> groupClauseConditions = new ArrayList<Integer>();
					List<Integer> orderClauseConditions = new ArrayList<Integer>();
					String operator = "";
					for (int i = 0; i < xmlColumnsFilter.length; i++) {

						operator = Node.getAttribute(xmlColumnsFilter[i],
								"OPERATION");

						if (operator != null && "GROUP".equals(operator))
							groupClauseConditions.add(xmlColumnsFilter[i]);
						else
							whereClauseConditions.add(xmlColumnsFilter[i]);

					}
					for (int i = 0; i < xmlColumnsSort.length; i++) {
						operator = Node.getAttribute(xmlColumnsSort[i],
								"OPERATION");

						if (operator != null && "ORDER".equals(operator))
							orderClauseConditions.add(xmlColumnsSort[i]);
					}
					if (whereClauseConditions != null
							&& !whereClauseConditions.isEmpty()) {
						returnQueryText += " WHERE ";

						Iterator<Integer> iter = whereClauseConditions
								.listIterator();
						Integer xml = 0;
						while (iter.hasNext()) {
							xml = iter.next();
							colValue = Node.getAttribute(xml, "FIELD_VALUE");
							colName = Node.getAttribute(xml, "FIELD_NAME");
							op = Node.getAttribute(xml, "OPERATION");
							condition = Node.getAttribute(xml, "CONDITION");
							opValue = opMap.get(op);
							boolean isConditionAdded = false;
							if (colValue != null
									&& !(" ( ".equals(opValue) || " ) "
											.equals(opValue))) {
								if (" LIKE ".equals(opValue)) {
									returnQueryText += colName + opValue + "'%"
											+ colValue + "%' ";
								} else if (" IS ".equals(opValue))
									returnQueryText += colName + opValue
											+ colValue + " ";
								else {
									returnQueryText += colName + opValue + "'"
											+ colValue + "' ";
								}
								isConditionAdded = true;
							}
							if (" ( ".equals(opValue) || " ) ".equals(opValue))
								returnQueryText += opValue;

							if (iter.hasNext() && isConditionAdded) {
								returnQueryText += " " + condition + " ";
							}

						}

					}

					if (groupClauseConditions != null
							&& !groupClauseConditions.isEmpty()) {

						if (groupClauseConditions.size() == 1) {
							colValue = Node
									.getAttribute(groupClauseConditions.get(0),
											"FIELD_VALUE");
							colName = Node.getAttribute(
									groupClauseConditions.get(0), "FIELD_NAME");
							op = Node.getAttribute(
									groupClauseConditions.get(0), "OPERATION");
							opValue = opMap.get(op);
							returnQueryText += opValue + colName;
						} else {
							throw new Exception("Invalid Group By Clause");
						}
					}

					if (orderClauseConditions != null
							&& !orderClauseConditions.isEmpty()) {

						if (orderClauseConditions.size() == 1) {
							colName = Node.getAttribute(
									orderClauseConditions.get(0), "FIELD_NAME");
							op = Node.getAttribute(
									orderClauseConditions.get(0), "ORDER");
							opValue = opMap.get(op);
							returnQueryText += " " + opMap.get("ORDER") + " "
									+ colName + " " + opValue;
						} else {
							throw new Exception("Invalid Order By Clause");
						}
					}

					if (inpXML > 0)
						Node.delete(inpXML);

				}

			}

		} catch (Exception e) {
			throw new BsfRuntimeException(e);
		}
		QueryObject query = new QueryObject(returnQueryText);
		query.setCursor(cursor);
		return query.getObjects();

	}

	public static com.msig.masterdata.PRODUCT_STATISTICS_SCREEN_MAPPING getStatisticScreenForRisk(
			String risk_type, String product_type) {
		String queryText = "select STAT_SCREEN_NM,LOB,LOB_DESCRIPTION from PRODUCT_STATISTICS_SCREEN_MAPPING, MSIG_LOB_MASTER where \"RISK_TYPE\" = :RISK_TYPE AND \"PRODUCT_TYPE\" = :PRODUCT_TYPE AND LOB_CODE=LOB";
		QueryObject query = new QueryObject(queryText);
		query.addParameter("RISK_TYPE",
				"PRODUCT_STATISTICS_SCREEN_MAPPING.RISK_TYPE",
				QueryObject.PARAM_STRING, risk_type);
		query.addParameter("PRODUCT_TYPE",
				"PRODUCT_STATISTICS_SCREEN_MAPPING.PRODUCT_TYPE",
				QueryObject.PARAM_STRING, product_type);
		query.setResultClass(PRODUCT_STATISTICS_SCREEN_MAPPING.class);
		return (PRODUCT_STATISTICS_SCREEN_MAPPING) query.getObject();
	}

}
