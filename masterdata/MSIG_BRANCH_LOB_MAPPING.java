/*
  This class has been generated by the Code Generator
 */

package com.msig.masterdata;

import java.util.Date;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.DMLStatement;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;

public class MSIG_BRANCH_LOB_MAPPING extends MSIG_BRANCH_LOB_MAPPINGBase {
	private static final String STATUS_INACTIVE = "INACTIVE";
	private static final String STATUS_ACTIVE = "ACTIVE";

	public MSIG_BRANCH_LOB_MAPPING() {
		this((BusObjectConfig) null);
	}

	public MSIG_BRANCH_LOB_MAPPING(BusObjectConfig config) {
		super(config);
	}

	@Override
	public void onBeforeInsert() {
		super.onBeforeInsert();

		if (this.getSTATUS() == null || (this.getSTATUS() != null && this.getSTATUS().equals(""))) {
			this.setSTATUS(STATUS_ACTIVE);
		}

		this.setCREATED_BY(MasterDataUtil.getUserName());
		this.setMODIFIED_BY(MasterDataUtil.getUserName());
		this.setCREATED_ON(new Date());
		this.setMODIFIED_ON(new Date());
	}

	@Override
	public void onBeforeUpdate() {
		super.onBeforeUpdate();
		this.setMODIFIED_BY(MasterDataUtil.getUserName());
		this.setMODIFIED_ON(new Date());
	}

	@SuppressWarnings("deprecation")
	@Override
	public void onAfterUpdate() {
		super.onAfterUpdate();

		String status = this.getSTATUS();
		if (status.equals(STATUS_INACTIVE)) {
			String queryText = "UPDATE MSIG_BRANCH_LOB_ROLE_MAPPING SET STATUS = '" + STATUS_INACTIVE + "' "
					+ "WHERE BRANCH_CODE = '" + this.getBRANCH_CODE() + "' AND LOB_CODE = '" + this.getLOB_CODE() + "'";
			DMLStatement dmlObj = new DMLStatement(queryText);

			dmlObj.execute();

			queryText = "UPDATE MSIG_BRANCH_LOB_ROLE_USER_MAPPING SET STATUS = '" + STATUS_INACTIVE + "' "
					+ "WHERE BRANCH_CODE = '" + this.getBRANCH_CODE() + "' AND LOB_CODE = '" + this.getLOB_CODE() + "'";
			dmlObj = new DMLStatement(queryText);

			dmlObj.execute();
		}
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_MAPPING> getMappingObejctsForBranchCode(
			String BRANCH_CODE) {
		String queryText = "SELECT A.*, B.BRANCH_NAME, C.LOB_NAME FROM MSIG_BRANCH_LOB_MAPPING A, MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C "
				+ "WHERE A.BRANCH_CODE = :BRANCH_CODE AND A.BRANCH_CODE = B.BRANCH_CODE AND "
				+ "A.LOB_CODE = C.LOB_CODE";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING, BRANCH_CODE);

		query.setResultClass(MSIG_BRANCH_LOB_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_MAPPING> getMappingObejctsForApplicationBranch(
			String APPLICATION, String BRANCH_CODE) {
		String queryText = "SELECT DISTINCT A.*, B.BRANCH_NAME, C.LOB_NAME FROM MSIG_BRANCH_LOB_MAPPING A, MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C "
				+ "WHERE A.APPLICATION = :APPLICATION AND A.BRANCH_CODE = :BRANCH_CODE AND A.BRANCH_CODE = B.BRANCH_CODE AND "
				+ "A.LOB_CODE = C.LOB_CODE AND A.APPLICATION = B.APPLICATION AND A.APPLICATION = C.APPLICATION";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING, BRANCH_CODE);
		query.addParameter("APPLICATION", "MSIG_BRANCH_LOB_MAPPING.APPLICATION", QueryObject.PARAM_STRING, APPLICATION);

		query.setResultClass(MSIG_BRANCH_LOB_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_MAPPING> getFilteredLOBByApplicationBranch(
			String APPLICATION, String BRANCH_CODE) {
		String queryText = "SELECT * FROM (SELECT DISTINCT A.LOB_CODE AS lobCode, A.LOB_CODE + ': '+ C.LOB_NAME AS lobName FROM MSIG_BRANCH_LOB_MAPPING A, MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C "
				+ "WHERE A.APPLICATION = :APPLICATION AND A.BRANCH_CODE = :BRANCH_CODE AND A.BRANCH_CODE = B.BRANCH_CODE AND A.LOB_CODE = C.LOB_CODE AND A.APPLICATION = B.APPLICATION "
				+ "AND A.APPLICATION = C.APPLICATION AND A.LOB_CODE NOT IN('OTAI','MASA','COMPLIANCE')) AS LOB";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING, BRANCH_CODE);
		query.addParameter("APPLICATION", "MSIG_BRANCH_LOB_MAPPING.APPLICATION", QueryObject.PARAM_STRING, APPLICATION);

		query.setResultClass(MSIG_BRANCH_LOB_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_MAPPING> getMappingObejctsForLOBCode(
			String LOB_CODE) {
		String queryText = "SELECT * FROM MSIG_BRANCH_LOB_MAPPING WHERE LOB_CODE = :LOB_CODE";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_MAPPING.LOB_CODE", QueryObject.PARAM_STRING, LOB_CODE);

		query.setResultClass(MSIG_BRANCH_LOB_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_MAPPING> getLOBForBranchByApplication(
			String BRANCH_CODE) {

		String queryText = "SELECT APPLICATION FROM MSIG_BRANCH_MASTER WHERE BRANCH_CODE = :BRANCH_CODE";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_MASTER.BRANCH_CODE", QueryObject.PARAM_STRING, BRANCH_CODE);

		query.setResultClass(MSIG_BRANCH_MASTER.class);
		MSIG_BRANCH_MASTER bObject = (MSIG_BRANCH_MASTER) query.getObject();

		StringBuffer bApplication = new StringBuffer();
		if (bObject.getAPPLICATION().equals("BOTH")) {
			bApplication.append("'BOTH','CMS','BMS'");
		} else {
			bApplication.append("'" + bObject.getAPPLICATION() + "'");
		}

		queryText = "SELECT A.BRANCH_CODE, A.LOB_CODE, C.APPLICATION FROM MSIG_BRANCH_LOB_MAPPING A, MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C "
				+ "WHERE A.BRANCH_CODE = :BRANCH_CODE AND A.BRANCH_CODE = B.BRANCH_CODE AND "
				+ "A.LOB_CODE = C.LOB_CODE AND C.APPLICATION IN (" + bApplication.toString() + ")";

		query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING, BRANCH_CODE);

		query.setResultClass(MSIG_BRANCH_LOB_MAPPING.class);

		return query.getObjects();
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_BRANCH_LOB_ROLE_MAPPING> checkMappedRolesForBranchAndLOB(
			String BRANCH_CODE, String LOB_CODE, String APPLICATION) {

		String queryText = "SELECT * FROM MSIG_BRANCH_LOB_ROLE_MAPPING WHERE BRANCH_CODE = :BRANCH_CODE "
				+ "AND LOB_CODE = :LOB_CODE AND APPLICATION = :APPLICATION";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_ROLE_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING,
				BRANCH_CODE);
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_ROLE_MAPPING.LOB_CODE", QueryObject.PARAM_STRING, LOB_CODE);
		query.addParameter("APPLICATION", "MSIG_BRANCH_LOB_ROLE_MAPPING.APPLICATION", QueryObject.PARAM_STRING,
				APPLICATION);

		query.setResultClass(MSIG_BRANCH_LOB_ROLE_MAPPING.class);

		return query.getObjects();

	}

	public static MSIG_BRANCH_LOB_MAPPING getMsigBranchLOBObject(String BRANCH_CODE, String LOB_CODE) {
		String queryText = "SELECT * FROM MSIG_BRANCH_LOB_MAPPING WHERE BRANCH_CODE = :BRANCH_CODE AND LOB_CODE = :LOB_CODE";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("BRANCH_CODE", "MSIG_BRANCH_LOB_MAPPING.BRANCH_CODE", QueryObject.PARAM_STRING, BRANCH_CODE);
		query.addParameter("LOB_CODE", "MSIG_BRANCH_LOB_MAPPING.LOB_CODE", QueryObject.PARAM_STRING, LOB_CODE);

		query.setResultClass(MSIG_BRANCH_LOB_MAPPING.class);

		return (MSIG_BRANCH_LOB_MAPPING) query.getObject();
	}

	public static int generateBranchLOBReport(int timezoneOffset) throws Exception {

		String queryText = "SELECT DISTINCT A.*, B.BRANCH_NAME, C.LOB_NAME FROM MSIG_BRANCH_LOB_MAPPING A, MSIG_BRANCH_MASTER B, MSIG_LOB_MASTER C "
				+ "WHERE A.BRANCH_CODE = B.BRANCH_CODE AND A.LOB_CODE = C.LOB_CODE AND "
				+ "A.APPLICATION = B.APPLICATION AND A.APPLICATION = C.APPLICATION";

		QueryObject query = new QueryObject(queryText);
		query.setResultClass(MSIG_BRANCH_LOB_MAPPING.class);

		BusObjectIterator<MSIG_BRANCH_LOB_MAPPING> objects = query.getObjects();

		if (objects == null) {
			return MasterDataUtil.createFaultMessage("No records in DB to download excel file");
		}

		String[] paramNames = { "key" };
		String[] paramValues = { "/MSIG/configurations/shared-path-config.xml" };

		int response = MasterDataUtil.executeSOAPRequest("http://schemas.cordys.com/1.0/xmlstore", "GetXMLObject",
				paramNames, paramValues);

		if (response == 0) {
			return MasterDataUtil.createFaultMessage("Shared Path Configuration file is missing");
		}

		String sharedFilePath = Node.getData(XPath
				.getFirstMatch("descendant-or-self::Configuration/descendant-or-self::SharedPath", null, response));

		HSSFWorkbook workbookObject = GenerateReport.getWorkbookObjectNew(objects, "Branch LOB Report",
				new String[] { "Application", "Branch Code", "Branch Name", "LOB Code", "LOB Name", "Status",
						"Created By", "Created On", "Modified By", "Modified On" },
				new String[] { "APPLICATION", "BRANCH_CODE", "BRANCH_NAME", "LOB_CODE", "LOB_NAME", "STATUS",
						"CREATED_BY", "CREATED_ON", "MODIFIED_BY", "MODIFIED_ON" },
				new String[] { "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "DATE", "STRING",
						"DATE" },
				timezoneOffset);
		HSSFSheet sheet = workbookObject.getSheet("Branch LOB Report");
		int columnIndex = 0;
		while (columnIndex < 10) {
			sheet.autoSizeColumn(columnIndex++);
		}

		return GenerateReport.writeExcelFile(workbookObject, sharedFilePath, "Branch LOB Report");
	}

}
