/*
  This class has been generated by the Code Generator
 */

package com.msig.masterdata;

import java.util.Date;

import javax.management.Query;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.eibus.util.logger.CordysLogger;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;
import com.eibus.xml.xpath.XPathResult;

@SuppressWarnings("unused")
public class MSIG_APPROVAL_MATRIX_LINES extends MSIG_APPROVAL_MATRIX_LINESBase {
	private static CordysLogger logger = CordysLogger.getCordysLogger(MSIG_APPROVAL_MATRIX_LINES.class);

	public MSIG_APPROVAL_MATRIX_LINES() {
		this((BusObjectConfig) null);
	}

	public MSIG_APPROVAL_MATRIX_LINES(BusObjectConfig config) {
		super(config);
	}

	@Override
	public void onBeforeInsert() {
		super.onBeforeInsert();
		this.setCREATED_BY(MasterDataUtil.getUserName());
		this.setMODIFIED_BY(MasterDataUtil.getUserName());
		this.setCREATED_ON(new Date());
		this.setMODIFIED_ON(new Date());
	}

	@Override
	public void onBeforeUpdate() {
		super.onBeforeUpdate();
		this.setMODIFIED_BY(MasterDataUtil.getUserName());
		this.setMODIFIED_ON(new Date());
	}

	public static BusObjectIterator<com.msig.masterdata.MSIG_APPROVAL_MATRIX_LINES> getLinesForHeaderID(String APR_MATRIX_HDR_ID) {
		String queryText = "SELECT * FROM \"MSIG_APPROVAL_MATRIX_LINES\" WHERE APR_MATRIX_HDR_ID = :APR_MATRIX_HDR_ID ORDER BY ROUTING_ORDER";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("APR_MATRIX_HDR_ID",
				"MSIG_APPROVAL_MATRIX_LINES.APR_MATRIX_HDR_ID",
				QueryObject.PARAM_STRING, APR_MATRIX_HDR_ID);

		query.setResultClass(MSIG_APPROVAL_MATRIX_LINES.class);
		return query.getObjects();
	}
	
	public static BusObjectIterator<com.msig.masterdata.MSIG_APPROVAL_MATRIX_LINES> _getLinesForHeaderID(
			String APR_MATRIX_HDR_ID) {
		String queryText = "SELECT * FROM \"MSIG_APPROVAL_MATRIX_LINES\" WHERE APR_MATRIX_HDR_ID = :APR_MATRIX_HDR_ID AND ACTION NOT IN ('SMT_APPROVAL','UW_SMT_APPROVAL') ORDER BY ROUTING_ORDER";

		QueryObject query = new QueryObject(queryText);
		query.addParameter("APR_MATRIX_HDR_ID",
				"MSIG_APPROVAL_MATRIX_LINES.APR_MATRIX_HDR_ID",
				QueryObject.PARAM_STRING, APR_MATRIX_HDR_ID);

		query.setResultClass(MSIG_APPROVAL_MATRIX_LINES.class);
		return query.getObjects();
	}

	public static String copyApprovalMatrixLines(String oldHeaderId,
			String newHeaderId) throws Exception {
		BusObjectIterator<MSIG_APPROVAL_MATRIX_LINES> linesIterator = MSIG_APPROVAL_MATRIX_LINES.getLinesForHeaderID(oldHeaderId);

		if (!linesIterator.hasMoreElements()) {
			return null;
		}

		while (linesIterator.hasMoreElements()) {
			MSIG_APPROVAL_MATRIX_LINES oldLineObject = (MSIG_APPROVAL_MATRIX_LINES) linesIterator
					.nextElement();
			MSIG_APPROVAL_MATRIX_LINES newLineObject = new MSIG_APPROVAL_MATRIX_LINES();

			newLineObject.setAPR_MATRIX_HDR_ID(newHeaderId);
			newLineObject.setLEVEL(oldLineObject.getLEVEL());
			newLineObject.setROLE_CODE(oldLineObject.getROLE_CODE());
			newLineObject.setROUTING_ORDER(oldLineObject.getROUTING_ORDER());
			newLineObject.setRULE_ENABLED(oldLineObject.getRULE_ENABLED());
			newLineObject.setRULE_NAME(oldLineObject.getRULE_NAME());
			newLineObject.setRULE_XML(oldLineObject.getRULE_XML());
			newLineObject.setRULE_XPATH_EXPRESSION(oldLineObject
					.getRULE_XPATH_EXPRESSION());
			newLineObject.setACTION(oldLineObject.getACTION());

			newLineObject.insert();
			newLineObject.getObjectManager()._commitTransactionDirect(true);
		}

		return "Success";
	}

	public static boolean evaluateRule(int businessObject,
			String xpathExpression) throws Exception {
		if ("".equals(xpathExpression) || xpathExpression == null) {
			return true;
		}
		XPathResult result = XPath.evaluateExpression(xpathExpression, null,
				businessObject);
		return result.getBooleanResult();
	}

	private static int getSequenceForRoleCode(String APR_MATRIX_HDR_ID, String ROLE_CODE) {
		String queryText = "SELECT TOP(1) ROUTING_ORDER FROM MSIG_APPROVAL_MATRIX_LINES WHERE APR_MATRIX_HDR_ID = :APR_MATRIX_HDR_ID AND ROLE_CODE = :ROLE_CODE ORDER BY ROUTING_ORDER";
		
		QueryObject query = new QueryObject(queryText);
		query.addParameter("APR_MATRIX_HDR_ID", "MSIG_APPROVAL_MATRIX_LINES.APR_MATRIX_HDR_ID", QueryObject.PARAM_STRING, APR_MATRIX_HDR_ID);
		query.addParameter("ROLE_CODE", "MSIG_APPROVAL_MATRIX_LINES.ROLE_CODE", QueryObject.PARAM_STRING, ROLE_CODE);
		
		query.setResultClass(MSIG_APPROVAL_MATRIX_LINES.class);
		
		MSIG_APPROVAL_MATRIX_LINES lineObj = (MSIG_APPROVAL_MATRIX_LINES) query.getObject();
		
		return lineObj.getROUTING_ORDER();
	}
	
	private static boolean isLowerLevelRole(String BRANCH_CODE, String LOB_CODE, String roleCode1, String roleCode2) {
		String queryText = "SELECT * FROM MSIG_ROLES_PRIORITY_SEQ WHERE APPLICATION = 'CMS' AND BRANCH LIKE :BRANCH_CODE AND LOB_CODE LIKE :LOB_CODE AND ROLE_CODE = :roleCode1 and BUSINESS_FUNCTION = 'CLAIMS_SETTLEMENT'";
		
		QueryObject query = new QueryObject(queryText);
		query.addParameter("roleCode1", "MSIG_ROLES_PRIORITY_SEQ.ROLE_CODE", QueryObject.PARAM_STRING, roleCode1);
		query.addParameter("BRANCH_CODE", "MSIG_ROLES_PRIORITY_SEQ.BRANCH_CODE", QueryObject.PARAM_STRING, "%" + BRANCH_CODE + "%");
		query.addParameter("LOB_CODE", "MSIG_ROLES_PRIORITY_SEQ.LOB_CODE", QueryObject.PARAM_STRING, "%" + LOB_CODE + "%");
		
		query.setResultClass(MSIG_ROLES_PRIORITY_SEQ.class);
		
		MSIG_ROLES_PRIORITY_SEQ p1Obj = (MSIG_ROLES_PRIORITY_SEQ) query.getObject();
		int firstSequence = (int) p1Obj.getSEQUENCE();
		
		queryText = "SELECT * FROM MSIG_ROLES_PRIORITY_SEQ WHERE APPLICATION = 'CMS' AND BRANCH LIKE :BRANCH_CODE AND LOB_CODE LIKE :LOB_CODE AND ROLE_CODE = :roleCode2 and BUSINESS_FUNCTION = 'CLAIMS_SETTLEMENT'";
		
		query = new QueryObject(queryText);
		query.addParameter("roleCode2", "MSIG_ROLES_PRIORITY_SEQ.ROLE_CODE", QueryObject.PARAM_STRING, roleCode2);
		query.addParameter("BRANCH_CODE", "MSIG_ROLES_PRIORITY_SEQ.BRANCH_CODE", QueryObject.PARAM_STRING, "%" + BRANCH_CODE + "%");
		query.addParameter("LOB_CODE", "MSIG_ROLES_PRIORITY_SEQ.LOB_CODE", QueryObject.PARAM_STRING, "%" + LOB_CODE + "%");
		
		query.setResultClass(MSIG_ROLES_PRIORITY_SEQ.class);
		
		MSIG_ROLES_PRIORITY_SEQ p2Obj = (MSIG_ROLES_PRIORITY_SEQ) query.getObject();
		int secondSequence = (int) p2Obj.getSEQUENCE();
		
		return firstSequence > secondSequence;
	}
	
	@SuppressWarnings("deprecation")
	public static int getCMSNextRoleFromAM(String headerId, String application, String branch, String lob, int bo, int currSequence, boolean isReview) throws Exception {
		
		if ("".equals(headerId) || "".equals(branch) || "".equals(lob)) {
			throw new Exception("Header Id, Branch and LOB cannot be empty");
		}
		
		BusObjectIterator<MSIG_APPROVAL_MATRIX_LINES> linesObj = MSIG_APPROVAL_MATRIX_LINES.getLinesForHeaderID(headerId);
		
		if (!linesObj.hasMoreElements()) {
			throw new Exception("Please configure approval matrix lines for Header");
		}
		int businessObjectNode = 0;
		int faultMessage = 0;
		int faultDetail = 0;
		int nextRoleNode = 0;
		int reviewNode = 0;
		int successNode = 0;
		int faultNode = 0;
		int roleCodeNode = 0;
		
		boolean isAnyRulePassed = false;
		boolean isPassedRuleReview = false;
		boolean areUsersUnderRole = true;
		boolean isNextActionReview = false;
		
		String nextRole = "";
		Document doc = null;
		
		try {
			businessObjectNode = Node.getFirstChild(bo);
			
			while (linesObj.hasMoreElements()) {
				MSIG_APPROVAL_MATRIX_LINES lineObj = linesObj.nextElement();
				
				String roleCode = lineObj.getROLE_CODE();
				String action = lineObj.getACTION();
				boolean ruleEnabled = lineObj.getRULE_ENABLED();
				int sequenceNo = lineObj.getROUTING_ORDER();
				
				MSIG_ROLES_MASTER roleObj = MSIG_ROLES_MASTER.getMsigRolesMasterObject(application, roleCode);
				
				if (roleObj == null) {
					// Check if the rule is evaluated successfully
					boolean isRulePassed = evaluateRule(businessObjectNode, lineObj.getRULE_XPATH_EXPRESSION());
					if (!isAnyRulePassed) {
						isPassedRuleReview = action.equals("REVIEW");
						isAnyRulePassed = !isPassedRuleReview;
					}
					continue;
				}
				
				if (!ruleEnabled) {
					nextRole = roleCode;
					break;
				}
				
				boolean isRulePassed = evaluateRule(businessObjectNode, lineObj.getRULE_XPATH_EXPRESSION());
				
				//logger.error("Rule result::" + roleCode + "::" + action + "::" + isRulePassed + ":::" + isAnyRulePassed);
				
				if (isRulePassed || isAnyRulePassed) {
					// Check for lower level role scenario
					if (sequenceNo >= currSequence) {
						// Found next role code
						if (isReview && action.equals("REVIEW") && !isAnyRulePassed) {
							// Pick next approval role
							isAnyRulePassed = false;
							isPassedRuleReview = false;
							continue;
						}
						BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> users = MSIG_BRANCH_LOB_ROLE_USER_MAPPING.getActiveUsersForBranchLOBAndRoleCode(branch, lob, roleCode, application);
						if (users.hasMoreElements()) {
							nextRole = roleCode;
							areUsersUnderRole = true;
							isNextActionReview = action.equals("REVIEW");
							break;
						} else {
							isAnyRulePassed = true;
							areUsersUnderRole = false;
						}
					} else {
						// He is not the correct one to approve
						isPassedRuleReview = action.equals("REVIEW");
						isAnyRulePassed = !isPassedRuleReview;
					}
				}/* else if (isAnyRulePassed) {
					if (sequenceNo >= currSequence) {
						if (isReview && action.equals("REVIEW")) {
							// Pick next approval role
							isAnyRulePassed = false;
							isPassedRuleReview = false;
							continue;
						}
						BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> users = MSIG_BRANCH_LOB_ROLE_USER_MAPPING.getUsersForBranchLOBAndRoleCode(branch, lob, roleCode, application);
						if (users.hasMoreElements()) {
							nextRole = roleCode;
							isNextActionReview = action.equals("REVIEW");
							break;
						} else {
							areUsersUnderRole = false;
							isAnyRulePassed = true;
						}
					}
				}*/
			}
			doc = BSF.getXMLDocument();
			int respNode = doc.createElement("RESPONSE");
			
			if (nextRole.equals("")) {
				// Create fault message
				logger.error("FAULT OCCURED");
				faultNode = doc.createElement("FAULT", respNode);
				faultMessage = doc.createTextElement("FaultMessage", "Failed to fetch next role from approval matrix", faultNode);
				faultDetail = doc.createTextElement("FaultDetail", "Next role not defined in approval matrix", faultNode);
			} else {
				// Create success message
				//logger.error("ROLE::::" + nextRole);
				successNode = doc.createElement("SUCCESS", respNode);
				nextRoleNode = doc.createTextElement("NextRole", branch + "_" + lob + "_" + nextRole, successNode);
				roleCodeNode = doc.createTextElement("RoleCode", nextRole, successNode);
				reviewNode = doc.createTextElement("IsReview", (isNextActionReview) ? "true" : "false", successNode);
			}
			
			return respNode;
		} finally {
			if (Node.isValidNode(businessObjectNode)) {
				Node.delete(businessObjectNode);
				businessObjectNode = 0;
			}
			doc = null;
		}
	}
	
	public static int getCMSNextRoleFromAM(String headerId, String application, String branch, String lob, int bo, int currSequence, boolean isReview, int reviewIndex) throws Exception {
		
		if ("".equals(headerId) || "".equals(branch) || "".equals(lob)) {
			throw new Exception("Header Id, Branch and LOB cannot be empty");
		}
		
		int businessObjectNode = 0;
		int faultMessage = 0;
		int faultDetail = 0;
		int nextRoleNode = 0;
		int reviewNode = 0;
		int successNode = 0;
		int faultNode = 0;
		int roleCodeNode = 0;
		
		int rIndex = reviewIndex;
		int prevReviewPassedCount = 0;
		
		boolean isAnyRulePassed = false;
		boolean isPassedRuleReview = false;
		boolean isNextActionReview = false;
		boolean areUsersExistsUnderRole = true;
        boolean isReviewAction  = false;
        boolean isRulePassed  = false;
		boolean isPassedRuleApprove = false;
		boolean doubleReviewExceptionFlag = false;
		
		
		String nextRole = "";
		String noUsersRoleCode = "";
		StringBuilder rulesResult = new StringBuilder("\n");
		String currentRoleCode = "";
		String currentStatus = "";
		
		// Normal routing scenario
		BusObjectIterator<MSIG_APPROVAL_MATRIX_LINES> linesObj = MSIG_APPROVAL_MATRIX_LINES._getLinesForHeaderID(headerId);
		
		if (!linesObj.hasMoreElements()) {
			throw new Exception("Please configure approval matrix lines for Header");
		}
		try {
	
			if (!isReview) {
				rIndex = 0;
				reviewIndex = 0;
			}/* else {
				rIndex += 1;
			}*/
			
			businessObjectNode = Node.getFirstChild(bo);
			
			/*currentRoleCode = Node.getData(XPath.getFirstMatch("descendant-or-self::ApplicationBusinessObject/descendant-or-self::processObject/descendant-or-self::nextRoleDN", null, businessObjectNode));
			if (!"".equals(currentRoleCode)) {
				currentRoleCode = currentRoleCode.substring(3, currentRoleCode.indexOf(","));
				currentRoleCode = currentRoleCode.split("_")[2];
				currSequence = MSIG_APPROVAL_MATRIX_LINES.getSequenceForRoleCode(headerId, currentRoleCode);
			} else {
				currSequence = 1;
			}
			currentStatus = Node.getData(XPath.getFirstMatch("descendant-or-self::ApplicationBusinessObject/descendant-or-self::caseInfo/descendant-or-self::status", null, businessObjectNode));*/
			
			int jcFlag = 0;
			int pzFlag = 0;
			while (linesObj.hasMoreElements()) {
				MSIG_APPROVAL_MATRIX_LINES lineObj = linesObj.nextElement();
				
				String roleCode = lineObj.getROLE_CODE();
				String action = lineObj.getACTION();
				
				isReviewAction = action.equals("REVIEW");
				
				boolean ruleEnabled = lineObj.getRULE_ENABLED();
				int sequenceNo = lineObj.getROUTING_ORDER();
									
				MSIG_BRANCH_LOB_ROLE_MAPPING roleObj = MSIG_BRANCH_LOB_ROLE_MAPPING.getMsigBranchLobRoleMappingObject(application, branch, lob, roleCode);
				
				if (roleObj == null) {
					// Check if the rule is evaluated successfully
					isRulePassed = evaluateRule(businessObjectNode, lineObj.getRULE_XPATH_EXPRESSION());
				
					if(isReview && isReviewAction && isRulePassed && !roleCode.startsWith("B") && rIndex == 0)
					{
							int reviewFlagNode = 0;
								reviewFlagNode = XPath.getFirstMatch("descendant-or-self::ApplicationBusinessObject/descendant-or-self::processObject", null, businessObjectNode);
								if(reviewFlagNode > 0)
									Node.setDataElement(reviewFlagNode ,"reviewFlag", "false");
							//rulesResult.append("Review Flag Node1 = "+Node.writeToString(reviewFlagNode,true));
						//doubleReviewExceptionFlag = true;
					}
					
					if (isReview && isRulePassed && rIndex > 0) {
						rIndex -= 1;
					}
					if (!isAnyRulePassed) {
						isPassedRuleReview = isReviewAction;
						isAnyRulePassed = isRulePassed && !isPassedRuleReview;
					}
					
					
					rulesResult.append("Sequence role object null: " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\n");
					continue;
					
				}
				
				if (!ruleEnabled) {
					if (isReview && rIndex >= 1) {
						rIndex--;
						continue;
					} else {
						nextRole = roleCode;
						break;
					}
				}
				//rulesResult.append(lineObj.getRULE_XPATH_EXPRESSION());
				isRulePassed = evaluateRule(businessObjectNode, lineObj.getRULE_XPATH_EXPRESSION());
				
				if(roleCode.contains("HOB") || roleCode.contains("AVP") )
					isPassedRuleApprove = true;
				//logger.error("Rule result::" + roleCode + "::" + action + "::" + isRulePassed + ":::" + isAnyRulePassed + ":::::" + rIndex);
				
				if (isReview && !isRulePassed && !isAnyRulePassed) {
					isAnyRulePassed = false;
					isPassedRuleReview = false;
					rulesResult.append("Sequence first if: " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\n");				
					if(isReview  &&  lineObj.getRULE_XPATH_EXPRESSION().contains("reviewFlag"))
					{
						if(rIndex > 0)
						{
							rIndex--;
						}
					}		
					continue;
					
					
				}else if(isReview  &&  lineObj.getRULE_XPATH_EXPRESSION().contains("reviewFlag"))
				{
				
					rulesResult.append("Sequence second if: " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\n");				
						if(rIndex > 0)
						{
							rIndex--;
						}
						if(rIndex > 0)
						   	continue;	
					
				}
				else if (isReview && isRulePassed && rIndex > 0) {
					isPassedRuleReview = isReviewAction;
					isAnyRulePassed = isRulePassed && !isPassedRuleReview;
					if(roleCode.contains("HOB") || roleCode.contains("AVP") )
								isAnyRulePassed = false;
					//isRulePassed = !isPassedRuleReview;
					rIndex--;
					if (rIndex >= 0) {
					 
					  //  if(!isReviewAction)
						//	rIndex  =  0;
						//else
						rulesResult.append("Sequence middle if " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\n");
								continue;
					}
				}				
				else if(isReview && !isReviewAction && (isRulePassed || isAnyRulePassed))
				{
					rIndex = 0;
				}
				
				
				rulesResult.append("Sequence: " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action+prevReviewPassedCount + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\n");
				
				if ((rIndex == 0 && isRulePassed ) || (rIndex == 0 && isAnyRulePassed && prevReviewPassedCount ==  0 && !isReviewAction) || (rIndex == 0 && isAnyRulePassed && !isReviewAction && !isPassedRuleApprove) ) {
				String isJapCh = Node.getData(XPath.getFirstMatch("descendant-or-self::businessObject//descendant-or-self::isJapaneseChannel", null, businessObjectNode), "true");
				String isPngCh = Node.getData(XPath.getFirstMatch("descendant-or-self::businessObject//descendant-or-self::policyBranch", null, businessObjectNode), "true");
				 
								
				//rulesResult.append("IN side while: " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action + prevReviewPassedCount + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\n");
				rulesResult.append("IN side while: " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action + prevReviewPassedCount + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\t is japaneseChanel: " + isJapCh + "\n");
					// Check for lower level role scenario
					if (sequenceNo >= currSequence) {
					    if(roleCode.equalsIgnoreCase("CEO"))
						  jcFlag=1;
						if(roleCode.equalsIgnoreCase("BHOB2"))
						  pzFlag=1;
						if ((isJapCh.equalsIgnoreCase("false")) && (roleCode.equalsIgnoreCase("DCEO")) && (isAnyRulePassed) && jcFlag==0)
						{
							roleCode = "CEO";
							jcFlag = 1;
							rulesResult.append("Skip DCEO to CEO: " + roleCode + "...\n");
						}
						if (((isPngCh.equalsIgnoreCase("PZ")) || (isPngCh.equalsIgnoreCase("SP"))) && (roleCode.equalsIgnoreCase("BHOB")) && (isAnyRulePassed) && pzFlag==0)
						{
							roleCode = "BHOB2";
							pzFlag = 1;
							rulesResult.append("Skip BHOB to BHOB2: " + roleCode + "...\n");
						}
						// Found next role code
						BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> users = MSIG_BRANCH_LOB_ROLE_USER_MAPPING.getActiveUsersForBranchLOBAndRoleCode(branch, lob, roleCode, application);
						if (users.hasMoreElements()) {
							nextRole = roleCode;
							
							/*if (!"".equals(currentRoleCode)) {
								// Check if it is lower level role (Exceptional scenario, this wouldn't required if approval matrix configuration done by following priority sequence in ascending order)
								boolean isLowerLevelRole = MSIG_APPROVAL_MATRIX_LINES.isLowerLevelRole(branch, lob, currentRoleCode, nextRole);
								if (isLowerLevelRole) {
									isAnyRulePassed = false;
									nextRole = "";
									rulesResult.append("Rule at sequence: " + sequenceNo + " is skipped because it is lower level role to the role " + currentRoleCode + "\n");
									continue;
								}
							}*/
							
							users = null;
							isNextActionReview = isReviewAction;
							if (isNextActionReview) {
								rIndex = reviewIndex + prevReviewPassedCount + 1;
							} else {
								rIndex = 0;
							}
							areUsersExistsUnderRole = true;
						
								break;
							
						} else {
							areUsersExistsUnderRole = false;
							if (isReviewAction) {
								prevReviewPassedCount += 1;
							}
							noUsersRoleCode = roleCode;
							isAnyRulePassed = true;
							if (isNextActionReview) {
								isAnyRulePassed = false;
							}
							if((roleCode.contains("HOB") || roleCode.contains("AVP")) && !roleCode.startsWith("B"))
								isAnyRulePassed = false;
							if(isReview && isReviewAction && isRulePassed && !roleCode.startsWith("B"))
							{
								int reviewFlagNode = 0;
								reviewFlagNode = XPath.getFirstMatch("descendant-or-self::ApplicationBusinessObject/descendant-or-self::processObject", null, businessObjectNode);
								if(reviewFlagNode > 0)
									Node.setDataElement(reviewFlagNode ,"reviewFlag", "false");
							//	rulesResult.append("Review Flag Node2 = "+Node.writeToString(reviewFlagNode,true));
								//doubleReviewExceptionFlag = true;
							}
						
						}
					} else {
						// He is not the correct one to approve
						/*isPassedRuleReview = isReviewAction;
						isAnyRulePassed = !isPassedRuleReview;*/
						if (!isAnyRulePassed) {
							isAnyRulePassed = true;
						}
						if(roleCode.contains("HOB") || roleCode.contains("AVP") )
								isAnyRulePassed = false;
					}
				}
				
			}
			int respNode = 0;
			if (areUsersExistsUnderRole) {
			
				respNode = createResponse(nextRole, branch, lob, isNextActionReview, rIndex);
				Node.createTextElement("Rule-Evaluation-Result", rulesResult.toString(), respNode);
			} else {
				respNode = createResponse("", branch, lob, false, rIndex, "No active users under role: " + noUsersRoleCode);
				Node.createTextElement("Rule-Evaluation-Result", rulesResult.toString(), respNode);
			}
			
			if (respNode == 0) {
				throw new Exception("Failed to fetch next role from Approval Matrix");
			}
			
			return respNode;
		} catch(Exception e)
		{
			throw new Exception(e.getMessage()+rulesResult.toString());
		}		
		finally {
			if (Node.isValidNode(businessObjectNode)) {
				Node.delete(businessObjectNode);
				businessObjectNode = 0;
			}
		}
		
	}
	@SuppressWarnings("deprecation")
	public static int getBMSNextRoleFromAM(String headerId, String application, String branch, String lob, int bo, int currSequence, int reviewIndex, boolean isReview, String status, String isSMT, String isApprovedBySMT, String isRFIByHM) throws Exception {
		
		if ("".equals(headerId) || "".equals(branch) || "".equals(lob)) {
			throw new Exception("Header Id, Branch and LOB cannot be empty");
		}
		
		boolean isSMTApproval = !"Draft".equals(status) && isSMT.equals("true");
		boolean isSMTApproved = !"Draft".equals(status) && isApprovedBySMT.equals("true");
		boolean isRFIByDC = !"Draft".equals(status) && isRFIByHM.equals("true");
		
		int businessObjectNode = 0;
		int faultMessage = 0;
		int faultDetail = 0;
		int nextRoleNode = 0;
		int reviewNode = 0;
		int successNode = 0;
		int faultNode = 0;
		int roleCodeNode = 0;
		
		int rIndex = reviewIndex;
		
		boolean isAnyRulePassed = false;
		boolean isPassedRuleReview = false;
		boolean isNextActionReview = false;
		boolean areUsersExistsUnderRole = true;
		
		boolean isNextSMTRuleToBeSkipped = false;
		
		String nextRole = "";
		String noUsersRoleCode = "";
		StringBuilder ruleEvaluationResult = new StringBuilder("\n");
		
		BusObjectIterator<MSIG_APPROVAL_MATRIX_LINES> linesObj = null;
		
		if (isRFIByDC) {
			// RFI action performed by CEO/DCEO tto seek more information from UW SMT
			linesObj = MSIG_APPROVAL_MATRIX_LINES.getUWSMTApprovalLineForHeader(headerId);
			
			if (!linesObj.hasMoreElements()) {
				throw new Exception("No UW SMT rule found in approval matrix");
			}
			
			MSIG_APPROVAL_MATRIX_LINES lineObj = linesObj.nextElement();
			
			String roleCode = lineObj.getROLE_CODE();
			
			MSIG_BRANCH_LOB_ROLE_MAPPING roleObj = MSIG_BRANCH_LOB_ROLE_MAPPING.getMsigBranchLobRoleMappingObject(application, branch, lob, roleCode);
			
			if (roleObj == null) {
				throw new Exception("Branch LOB Role Combination does not exists in DB");
			}
			
			int respNode = createResponse(roleCode, branch, lob, false, 0);
			
			return respNode;
			
		} else if (!isSMTApproval) {
			// Normal routing scenario
			linesObj = MSIG_APPROVAL_MATRIX_LINES._getLinesForHeaderID(headerId);
			
			if (!linesObj.hasMoreElements()) {
				throw new Exception("Please configure approval matrix lines for Header");
			}
			try {

				if (!isReview) {
					rIndex = 0;
				} else {
					rIndex -= 1;
				}
				
				businessObjectNode = Node.getFirstChild(bo);
				
				while (linesObj.hasMoreElements()) {
					MSIG_APPROVAL_MATRIX_LINES lineObj = linesObj.nextElement();
					
					String roleCode = lineObj.getROLE_CODE();
					String action = lineObj.getACTION();
					
					boolean isRegisterAction = action.equals("REGISTER");
					boolean isReviewAction = action.equals("REVIEW");
					
					boolean ruleEnabled = lineObj.getRULE_ENABLED();
					int sequenceNo = lineObj.getROUTING_ORDER();
					
					if (action.equals("REGISTER") && status.equals("Draft")) {
						nextRole = roleCode;
						break;
					}
										
					MSIG_BRANCH_LOB_ROLE_MAPPING roleObj = MSIG_BRANCH_LOB_ROLE_MAPPING.getMsigBranchLobRoleMappingObject(application, branch, lob, roleCode);
					
					if (roleObj == null) {
						// Check if the rule is evaluated successfully
						boolean isRulePassed = evaluateRule(businessObjectNode, lineObj.getRULE_XPATH_EXPRESSION());
						if (!isAnyRulePassed) {
							isPassedRuleReview = isReviewAction;
							isAnyRulePassed = isRulePassed && !isPassedRuleReview;
						}
						
						//sree -- appending Sequence when Role is not present / mapped.
						ruleEvaluationResult.append("Sequence role object null: " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\n");
						continue;
					}
					
					if (!ruleEnabled && isRegisterAction) {
						nextRole = "";
						continue;
					} else if (!ruleEnabled) {
						if (isReview && rIndex >= 1) {
							rIndex--;
							continue;
						} else {
							nextRole = roleCode;
							break;
						}
					}
					
					boolean isRulePassed = evaluateRule(businessObjectNode, lineObj.getRULE_XPATH_EXPRESSION());
					
					//logger.error("Rule result::" + roleCode + "::" + action + "::" + isRulePassed + ":::" + isAnyRulePassed + ":::::" + rIndex);
					
					if (isReview && isRulePassed && rIndex >= 1) {
						isAnyRulePassed = false;
						isPassedRuleReview = false;
						rIndex--;
						if (rIndex > 0) {
							continue;
						}
					}
					
					ruleEvaluationResult.append("Sequence: " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\n");
					
					if (rIndex == 0 && (isRulePassed || isAnyRulePassed)) {
						// Check for lower level role scenario
						if (sequenceNo >= currSequence) {
							// Found next role code
							BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> users = MSIG_BRANCH_LOB_ROLE_USER_MAPPING.getActiveUsersForBranchLOBAndRoleCode(branch, lob, roleCode, application);
							if (users.hasMoreElements()) {
								nextRole = roleCode;
								users = null;
								isNextActionReview = isReviewAction;
								if (isNextActionReview) {
									rIndex = reviewIndex + 1;
								} else {
									rIndex = 0;
								}
								areUsersExistsUnderRole = true;
								break;
							} else {
								areUsersExistsUnderRole = false;
								noUsersRoleCode = roleCode;
								//isAnyRulePassed = true;
								/*isPassedRuleReview = isReviewAction;
								isAnyRulePassed = !isPassedRuleReview;*/
								// Check if the rule is evaluated successfully
								if (!isAnyRulePassed) {
									isPassedRuleReview = isReviewAction;
									isAnyRulePassed = isRulePassed && !isPassedRuleReview;
								}
								
							}
						} else {
							// He is not the correct one to approve
							isPassedRuleReview = isReviewAction;
							isAnyRulePassed = !isPassedRuleReview;
						}
					}
				}
				
				int respNode = 0;
				if (areUsersExistsUnderRole) {
					respNode = createResponse(nextRole, branch, lob, isNextActionReview, rIndex);
					Node.createTextElement("Rule-Evaluation-Result", ruleEvaluationResult.toString(), respNode);
				} else {
					respNode = createResponse("", branch, lob, false, rIndex, "No active users under role: " + noUsersRoleCode);
					Node.createTextElement("Rule-Evaluation-Result", ruleEvaluationResult.toString(), respNode);
				}
				
				if (respNode == 0) {
					throw new Exception("Failed to fetch next role from Approval Matrix");
				}
				
				return respNode;
			} finally {
				if (Node.isValidNode(businessObjectNode)) {
					Node.delete(businessObjectNode);
					businessObjectNode = 0;
				}
			}
		} else {
			// AH is trying to appeal to BU SMT (or) BU SMT trying to Approve
			linesObj = MSIG_APPROVAL_MATRIX_LINES.getSMTLinesForHeader(headerId);
			int reviewCount = reviewIndex;
			
			if (!linesObj.hasMoreElements()) {
				throw new Exception("Please configure approval matrix lines for Header");
			}
			
			try {
				businessObjectNode = Node.getFirstChild(bo);
				
				while (linesObj.hasMoreElements()) {
					MSIG_APPROVAL_MATRIX_LINES lineObj = linesObj.nextElement();
					
					String roleCode = lineObj.getROLE_CODE();
					String action = lineObj.getACTION();
					
					boolean isCurrActSMTApproval = action.equals("SMT_APPROVAL");
					isNextActionReview = action.equals("SMT_REVIEW");
					
					boolean ruleEnabled = lineObj.getRULE_ENABLED();
					int sequenceNo = lineObj.getROUTING_ORDER();
					
					if ((!isSMTApproval || !isCurrActSMTApproval) && !isNextActionReview) {
						nextRole = "";
						continue;
					}
					
					if (isSMTApproval && isCurrActSMTApproval && !isSMTApproved) {
						// This will be executed when AH is appealing to BU SMT / UW SMT (No need to consider RAA)
						nextRole = roleCode;
						break;
					}
					
					if (isSMTApproved && isNextSMTRuleToBeSkipped && isCurrActSMTApproval) {
						nextRole = "";
						isNextSMTRuleToBeSkipped = false;
						continue;
					}
					
					MSIG_BRANCH_LOB_ROLE_MAPPING roleObj = MSIG_BRANCH_LOB_ROLE_MAPPING.getMsigBranchLobRoleMappingObject(application, branch, lob, roleCode);
					
					if (roleObj == null) {
						int resp = createResponse("", "", "", false, 0);
						
						if (resp == 0) {
							throw new Exception("Failed to fetch next role from approval matrix");
						}
					}
					
					boolean isRulePassed = evaluateRule(businessObjectNode, lineObj.getRULE_XPATH_EXPRESSION());
					
					//logger.error("Rule result::" + roleCode + "::" + action + "::" + isRulePassed + ":::" + isAnyRulePassed + ":::::" + rIndex);

					if (isRulePassed && isReview && isNextActionReview && reviewIndex > 0) {
						// We have to skip the rules for which action is "SMT_REVIEW" only
						reviewIndex--;
						nextRole = "";
						continue;
					}
					
                                      //Sree
					ruleEvaluationResult.append("Sequence: " + sequenceNo + "\t Role: " + roleCode + "\t Action: " + action + "\t Is rule passed: " + isRulePassed + "\t Review Index: " + rIndex + "\t Any prev rule passed: " + isAnyRulePassed + "\t Any active users under role: " + areUsersExistsUnderRole + "\n");                                  
                                      /*    if (isNextActionReview) {
						rIndex = reviewIndex + 1;
					} else*/ 
					if (roleCode.equals("RHCREP")) {
						rIndex = 0;						
					}                                         
                                        //End

					if (!isRulePassed) {
						nextRole = "";
						continue;
					} else if (isRulePassed && rIndex == 0) {//Sree - modified condition from reviewIndex == 0 to rIndex == 0
						// Found next role code
						BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> users = MSIG_BRANCH_LOB_ROLE_USER_MAPPING.getActiveUsersForBranchLOBAndRoleCode(branch, lob, roleCode, application);
						if (users.hasMoreElements()) {
							nextRole = roleCode;
							users = null;
							if (isNextActionReview) {
								reviewCount += 1;
							} else {
								reviewCount = 0;
							}
							break;
						} else {
							//isNextSMTRuleToBeSkipped = true;
							nextRole = "";
							continue;
						}
					}
				}
				
				int respNode = createResponse(nextRole, branch, lob, isNextActionReview, reviewCount);
                                Node.createTextElement("Rule-Evaluation-Result", ruleEvaluationResult.toString(), respNode);//Sree
				
				return respNode;
			} finally {
				if (Node.isValidNode(businessObjectNode)) {
					Node.delete(businessObjectNode);
					businessObjectNode = 0;
				}
			}
		}
	}
	
	private static int createResponse(String nextRole, String branch, String lob, boolean isReview, int reviewIndex) {
		Document doc = null;
		
		try {
			doc = BSF.getXMLDocument();
			int respNode = doc.createElement("RESPONSE");
			
			if (nextRole.equals("")) {
				// Create fault message
				int faultNode = doc.createElement("FAULT", respNode);
				int faultMessage = doc.createTextElement("FaultMessage", "Failed to fetch next role from approval matrix", faultNode);
				int faultDetail = doc.createTextElement("FaultDetail", "Next role not defined in approval matrix", faultNode);
			} else {
				// Create success message
				int successNode = doc.createElement("SUCCESS", respNode);
				int nextRoleNode = doc.createTextElement("NextRole", branch + "_" + lob + "_" + nextRole, successNode);
				int roleCodeNode = doc.createTextElement("RoleCode", nextRole, successNode);
				int reviewNode = doc.createTextElement("IsReview", (isReview) ? "true" : "false", successNode);
				doc.createTextElement("ReviewIndex", String.valueOf(reviewIndex), successNode);
			}
			return respNode;
		} catch (Exception e) {
			return 0;
		} finally {	
			doc = null;
		}
	}
	
	private static int createResponse(String nextRole, String branch, String lob, boolean isReview, int reviewIndex, String message) {
		Document doc = null;
		
		try {
			doc = BSF.getXMLDocument();
			int respNode = doc.createElement("RESPONSE");
			
			if (nextRole.equals("")) {
				// Create fault message
				int faultNode = doc.createElement("FAULT", respNode);
				int faultMessage = doc.createTextElement("FaultDetail", "Failed to fetch next role from approval matrix", faultNode);
				int faultDetail = doc.createTextElement("FaultMessage", message, faultNode);
			} else {
				// Create success message
				int successNode = doc.createElement("SUCCESS", respNode);
				int nextRoleNode = doc.createTextElement("NextRole", branch + "_" + lob + "_" + nextRole, successNode);
				int roleCodeNode = doc.createTextElement("RoleCode", nextRole, successNode);
				int reviewNode = doc.createTextElement("IsReview", (isReview) ? "true" : "false", successNode);
				doc.createTextElement("ReviewIndex", String.valueOf(reviewIndex), successNode);
			}
			return respNode;
		} catch (Exception e) {
			return 0;
		} finally {	
			doc = null;
		}
	}
	
	@SuppressWarnings("deprecation")
	public static int getNextRoleFromAM(String headerId, String application, String branch, String lob, int bo, int currSequence, int reviewIndex, boolean isReview, String status) throws Exception {
		
		if ("".equals(headerId) || "".equals(branch) || "".equals(lob)) {
			throw new Exception("Header Id, Branch and LOB cannot be empty");
		}
		
		BusObjectIterator<MSIG_APPROVAL_MATRIX_LINES> linesObj = MSIG_APPROVAL_MATRIX_LINES.getLinesForHeaderID(headerId);
		
		if (!linesObj.hasMoreElements()) {
			throw new Exception("Please configure approval matrix lines for Header");
		}
		int businessObjectNode = 0;
		int faultMessage = 0;
		int faultDetail = 0;
		int nextRoleNode = 0;
		int reviewNode = 0;
		int successNode = 0;
		int faultNode = 0;
		int roleCodeNode = 0;
		
		int rIndex = reviewIndex;
		
		boolean isAnyRulePassed = false;
		boolean isPassedRuleReview = false;
		boolean areUsersUnderRole = true;
		boolean isNextActionReview = false;
		
		String nextRole = "";
		
		Document doc = null;
		
		try {
			
			if (!isReview) {
				rIndex = 0;
			}
			
			businessObjectNode = Node.getFirstChild(bo);
			
			while (linesObj.hasMoreElements()) {
				MSIG_APPROVAL_MATRIX_LINES lineObj = linesObj.nextElement();
				
				String roleCode = lineObj.getROLE_CODE();
				String action = lineObj.getACTION();
				
				boolean ruleEnabled = lineObj.getRULE_ENABLED();
				int sequenceNo = lineObj.getROUTING_ORDER();
				
				if (action.equals("REGISTER") && status.equals("Draft")) {
					nextRole = roleCode;
					break;
				}
				
				MSIG_ROLES_MASTER roleObj = MSIG_ROLES_MASTER.getMsigRolesMasterObject(application, roleCode);
				
				if (roleObj == null) {
					// Check if the rule is evaluated successfully
					boolean isRulePassed = evaluateRule(businessObjectNode, lineObj.getRULE_XPATH_EXPRESSION());
					if (!isAnyRulePassed) {
						isPassedRuleReview = action.equals("REVIEW");
						isAnyRulePassed = isRulePassed && !isPassedRuleReview;
					}
					continue;
				}
				
				if (!ruleEnabled && action.equals("REGISTER")) {
					nextRole = "";
					continue;
				} else if (!ruleEnabled) {
					if (isReview && rIndex >= 1) {
						rIndex--;
						continue;
					} else {
						nextRole = roleCode;
						break;
					}
				}
				
				boolean isRulePassed = evaluateRule(businessObjectNode, lineObj.getRULE_XPATH_EXPRESSION());
				
				//logger.error("Rule result::" + roleCode + "::" + action + "::" + isRulePassed + ":::" + isAnyRulePassed + ":::::" + rIndex);
				
				if (isReview && isRulePassed && rIndex >= 1) {
					isAnyRulePassed = false;
					isPassedRuleReview = false;
					rIndex -= 1;
					continue;
				}
				
				if ((!isReview || rIndex == 0) && (isRulePassed || isAnyRulePassed)) {
					// Check for lower level role scenario
					if (sequenceNo >= currSequence) {
						// Found next role code
						BusObjectIterator<MSIG_BRANCH_LOB_ROLE_USER_MAPPING> users = MSIG_BRANCH_LOB_ROLE_USER_MAPPING.getUsersForBranchLOBAndRoleCode(branch, lob, roleCode, application);
						if (users.hasMoreElements()) {
							nextRole = roleCode;
							areUsersUnderRole = true;
							users = null;
							isNextActionReview = action.equals("REVIEW");
							if (isNextActionReview) {
								rIndex = reviewIndex + 1;
							} else {
								rIndex = 0;
							}
							break;
						} else {
							isAnyRulePassed = true;
							areUsersUnderRole = false;
						}
					} else {
						// He is not the correct one to approve
						isPassedRuleReview = action.equals("REVIEW");
						isAnyRulePassed = !isPassedRuleReview;
					}
				}
			}
			doc = BSF.getXMLDocument();
			int respNode = doc.createElement("RESPONSE");
			
			if (nextRole.equals("")) {
				// Create fault message
				faultNode = doc.createElement("FAULT", respNode);
				faultMessage = doc.createTextElement("FaultMessage", "Failed to fetch next role from approval matrix", faultNode);
				faultDetail = doc.createTextElement("FaultDetail", "Next role not defined in approval matrix", faultNode);
			} else {
				// Create success message
				successNode = doc.createElement("SUCCESS", respNode);
				nextRoleNode = doc.createTextElement("NextRole", branch + "_" + lob + "_" + nextRole, successNode);
				roleCodeNode = doc.createTextElement("RoleCode", nextRole, successNode);
				reviewNode = doc.createTextElement("IsReview", (isNextActionReview) ? "true" : "false", successNode);
				doc.createTextElement("ReviewIndex", String.valueOf(rIndex), successNode);
			}
			
			return respNode;
		} finally {
			if (Node.isValidNode(businessObjectNode)) {
				Node.delete(businessObjectNode);
				businessObjectNode = 0;
			}
			doc = null;
		}
	}
	
	private static BusObjectIterator<MSIG_APPROVAL_MATRIX_LINES> getSMTLinesForHeader(String headerId) {
		String queryText = "SELECT * FROM MSIG_APPROVAL_MATRIX_LINES WHERE APR_MATRIX_HDR_ID = :APR_MATRIX_HDR_ID AND ACTION IN ('SMT_REVIEW', 'SMT_APPROVAL') ORDER BY ROUTING_ORDER";
		
		QueryObject query = new QueryObject(queryText);
		
		query.addParameter("APR_MATRIX_HDR_ID", "MSIG_APPROVAL_MATRIX_LINES.APR_MATRIX_HDR_ID", QueryObject.PARAM_STRING, headerId);
		
		query.setResultClass(MSIG_APPROVAL_MATRIX_LINES.class);
		
		return query.getObjects();
	}
	
	private static BusObjectIterator<MSIG_APPROVAL_MATRIX_LINES> getUWSMTApprovalLineForHeader(String headerId) {
		String queryText = "SELECT * FROM MSIG_APPROVAL_MATRIX_LINES WHERE APR_MATRIX_HDR_ID = :APR_MATRIX_HDR_ID AND ACTION = 'UW_SMT_APPROVAL' ORDER BY ROUTING_ORDER";
		
		QueryObject query = new QueryObject(queryText);
		
		query.addParameter("APR_MATRIX_HDR_ID", "MSIG_APPROVAL_MATRIX_LINES.APR_MATRIX_HDR_ID", QueryObject.PARAM_STRING, headerId);
		
		query.setResultClass(MSIG_APPROVAL_MATRIX_LINES.class);
		
		return query.getObjects();
	}
	
}
